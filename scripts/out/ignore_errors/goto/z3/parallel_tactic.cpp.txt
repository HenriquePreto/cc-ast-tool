{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/z3/src/solver/parallel_tactic.cpp#511:5#parallel_tactic::cube_and_conquer",
            "gotos": 3,
            "labels": 2,
            "body": "{\n    int &m;\n    int cube;\n    int vars;\n    unsigned int num_simplifications = 0;\n  cube_again:\n    if (this->canceled(s))\n        return;\n    <recovery-expr>().reset();\n    <recovery-expr>().append(<recovery-expr>(s)(1));\n    SASSERT(<recovery-expr>().size() <= 1);\n    {\n    }\n    if (!<recovery-expr>().empty()) {\n        <recovery-expr>(s)(<recovery-expr>().get(0).cube());\n        <recovery-expr>().reset();\n        <recovery-expr>().append(<recovery-expr>().get(0).vars());\n    }\n    num_simplifications = 0;\n  simplify_again:\n    ++num_simplifications;\n    s.inc_depth(1);\n    if (this->canceled(s))\n        return;\n    switch (<recovery-expr>(s)()) {\n        break;\n        return;\n        this->report_unsat(s);\n        return;\n    }\n    if (this->canceled(s))\n        return;\n    if (s.giveup()) {\n        return;\n    }\n    if (this->memory_pressure()) {\n        goto simplify_again;\n    }\n    s.set_cube_params();\n    int conquer;\n    unsigned int cutoff;\n    _Bool first = true;\n    unsigned int num_backtracks = 0, width = 0;\n    while (cutoff > 0 && !this->canceled(s))\n        {\n            int c;\n            if (<recovery-expr>().empty() || (<recovery-expr>().size() == 1 && <recovery-expr>().is_true(<recovery-expr>().back()))) {\n                if (num_simplifications > 1) {\n                    return;\n                }\n                goto simplify_again;\n            }\n            if (<recovery-expr>().is_false(<recovery-expr>().back())) {\n                break;\n            }\n            int is_sat;\n            if (!s.has_assumptions() && width >= this->m_conquer_delay && !<recovery-expr>()) {\n                <recovery-expr>() = <recovery-expr>(s)();\n                s.set_conquer_params(*<recovery-expr>().get());\n            }\n            if (<recovery-expr>()) {\n                <recovery-expr>() = <recovery-expr>()->check_sat(<recovery-expr>());\n            }\n            switch (<recovery-expr>()) {\n                cutoff = <recovery-expr>().size();\n                if (cutoff != <recovery-expr>().size()) {\n                    IF_VERBOSE(0, <recovery-expr>(verbose_stream) << \"(tactic.parallel :backtrack \" << cutoff << \" -> \" << <recovery-expr>().size() << \")\\n\");\n                    cutoff = <recovery-expr>().size();\n                }\n                this->inc_unsat(s);\n                break;\n                if (<recovery-expr>()) {\n                    this->collect_statistics(*<recovery-expr>().get());\n                }\n                return;\n                ++width;\n                IF_VERBOSE(2, <recovery-expr>(verbose_stream) << \"(tactic.parallel :cube \" << <recovery-expr>().size() << \" :vars \" << <recovery-expr>().size() << \")\\n\");\n                break;\n            }\n            if (<recovery-expr>()) {\n                first = false;\n            }\n        }\n    if (<recovery-expr>()) {\n        this->collect_statistics(*<recovery-expr>().get());\n    }\n    if (<recovery-expr>()) {\n        this->report_unsat(s);\n    } else if (<recovery-expr>()) {\n        this->dec_branch();\n    } else {\n        s.inc_width(width);\n        goto cube_again;\n    }\n}\n"
        }
    ],
    "total": 77,
    "visited": 1
}
