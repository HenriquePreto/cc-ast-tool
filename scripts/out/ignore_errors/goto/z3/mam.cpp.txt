{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/z3/src/smt/mam.cpp#2126:5#(anonymous namespace)::interpreter::init_continue",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    int *lbl;\n    unsigned int min_sz;\n    unsigned short num_args = c->m_num_args;\n    int *r;\n    for (unsigned int i = 0; i < num_args; i++) {\n        void *bare = <recovery-expr>(c)[i];\n        int *n;\n        switch (<recovery-expr>(GET_TAG, bare)) {\n          case 0:\n            goto non_depth1;\n          case 1:\n            ;\n            break;\n          case 2:\n            ;\n            break;\n          case 3:\n            goto non_depth1;\n        }\n        <recovery-expr>() = <recovery-expr>()->get_root();\n        if (this->m_use_filters && <recovery-expr>()->get_plbls().empty_intersection(<recovery-expr>(c)))\n            return nullptr;\n        if (<recovery-expr>()->get_num_parents() == 0)\n            return nullptr;\n      non_depth1:\n        ;\n    }\n    int *best_v;\n    for (unsigned int i = 0; i < num_args; i++) {\n        int *bare;\n        int *curr_v;\n        switch (GET_TAG(<recovery-expr>())) {\n          case 0:\n            <recovery-expr>() = nullptr;\n            break;\n          case 1:\n            ;\n            break;\n          case 2:\n            ;\n            break;\n          case 3:\n            ;\n            break;\n        }\n        if (<recovery-expr>() != nullptr) {\n            if (<recovery-expr>()->size() < min_sz && (<recovery-expr>() == nullptr || <recovery-expr>()->size() < <recovery-expr>()->size())) {\n                <recovery-expr>() = <recovery-expr>();\n                if (<recovery-expr>()->empty()) {\n                    return nullptr;\n                }\n            } else {\n            }\n        }\n    }\n    backtrack_point &bp;\n    <recovery-expr>(bp.m_instr, c);\n    bp.m_old_max_generation = this->m_max_generation;\n    if (<recovery-expr>() == nullptr) {\n        <recovery-expr>(bp) = nullptr;\n    } else {\n        SASSERT(!<recovery-expr>()->empty());\n        <recovery-expr>(bp) = <recovery-expr>();\n        <recovery-expr>(bp) = <recovery-expr>()->begin();\n        <recovery-expr>(bp) = <recovery-expr>()->end();\n    }\n    for (; <recovery-expr>(bp) != <recovery-expr>(bp); ++<recovery-expr>(bp)) {\n        int *curr;\n        if (<recovery-expr>())\n            break;\n    }\n    if (<recovery-expr>(bp) == <recovery-expr>(bp)) {\n        if (<recovery-expr>()) {\n            <recovery-expr>(bp) = nullptr;\n        }\n        return nullptr;\n    }\n    this->m_top++;\n    return *(<recovery-expr>(bp));\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/z3/src/smt/mam.cpp#2278:5#(anonymous namespace)::interpreter::execute_core",
            "gotos": 103,
            "labels": 2,
            "body": "{\n    unsigned int since_last_check = 0;\n    this->m_max_generation = <recovery-expr>()->get_generation();\n    if (<recovery-expr>()) {\n    }\n    this->m_pc = t->get_root();\n    this->m_top = 0;\n  main_loop:\n    if (!this->m_pc)\n        goto backtrack;\n    switch (this->m_pc->m_opcode) {\n      case INIT1:\n        ;\n        if (<recovery-expr>())\n            goto backtrack;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case INIT2:\n        ;\n        if (<recovery-expr>())\n            goto backtrack;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case INIT3:\n        ;\n        if (<recovery-expr>())\n            goto backtrack;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case INIT4:\n        ;\n        if (<recovery-expr>())\n            goto backtrack;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case INIT5:\n        ;\n        if (<recovery-expr>())\n            goto backtrack;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case INIT6:\n        ;\n        if (<recovery-expr>())\n            goto backtrack;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case INITN:\n        ;\n        if (this->m_num_args != static_cast<const initn *>(this->m_pc)->m_num_args)\n            goto backtrack;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case COMPARE:\n        ;\n        if (<recovery-expr>())\n            goto backtrack;\n        if (<recovery-expr>()) {\n        }\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case CHECK:\n        ;\n        if (<recovery-expr>())\n            goto backtrack;\n        if (<recovery-expr>()) {\n        }\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case CFILTER:\n      case FILTER:\n        ;\n        if (<recovery-expr>())\n            goto backtrack;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case PFILTER:\n        ;\n        if (<recovery-expr>())\n            goto backtrack;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case CHOOSE:\n        ;\n        this->m_top++;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case NOOP:\n        <recovery-expr>(SASSERT, static_cast<const choose *>(this->m_pc)->m_alt == 0);\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case BIND1:\n        ;\n        this->m_oreg = static_cast<const bind *>(this->m_pc)->m_oreg;\n        this->m_curr_max_generation = this->m_max_generation;\n        if (<recovery-expr>())\n            goto backtrack;\n        this->m_top++;\n        ;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case BIND2:\n        ;\n        this->m_oreg = static_cast<const bind *>(this->m_pc)->m_oreg;\n        this->m_curr_max_generation = this->m_max_generation;\n        if (<recovery-expr>())\n            goto backtrack;\n        this->m_top++;\n        ;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case BIND3:\n        ;\n        this->m_oreg = static_cast<const bind *>(this->m_pc)->m_oreg;\n        this->m_curr_max_generation = this->m_max_generation;\n        if (<recovery-expr>())\n            goto backtrack;\n        this->m_top++;\n        ;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case BIND4:\n        ;\n        this->m_oreg = static_cast<const bind *>(this->m_pc)->m_oreg;\n        this->m_curr_max_generation = this->m_max_generation;\n        if (<recovery-expr>())\n            goto backtrack;\n        this->m_top++;\n        ;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case BIND5:\n        ;\n        this->m_oreg = static_cast<const bind *>(this->m_pc)->m_oreg;\n        this->m_curr_max_generation = this->m_max_generation;\n        if (<recovery-expr>())\n            goto backtrack;\n        this->m_top++;\n        ;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case BIND6:\n        ;\n        this->m_oreg = static_cast<const bind *>(this->m_pc)->m_oreg;\n        this->m_curr_max_generation = this->m_max_generation;\n        if (<recovery-expr>())\n            goto backtrack;\n        this->m_top++;\n        ;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case BINDN:\n        ;\n        this->m_oreg = static_cast<const bind *>(this->m_pc)->m_oreg;\n        this->m_curr_max_generation = this->m_max_generation;\n        if (<recovery-expr>())\n            goto backtrack;\n        this->m_top++;\n        ;\n        this->m_num_args = static_cast<const bind *>(this->m_pc)->m_num_args;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case YIELD1:\n        ;\n        if (<recovery-expr>()) {\n            return false;\n        }\n        goto backtrack;\n      case YIELD2:\n        ;\n        if (<recovery-expr>()) {\n            return false;\n        }\n        goto backtrack;\n      case YIELD3:\n        ;\n        if (<recovery-expr>()) {\n            return false;\n        }\n        goto backtrack;\n      case YIELD4:\n        ;\n        if (<recovery-expr>()) {\n            return false;\n        }\n        goto backtrack;\n      case YIELD5:\n        ;\n        if (<recovery-expr>()) {\n            return false;\n        }\n        goto backtrack;\n      case YIELD6:\n        ;\n        if (<recovery-expr>()) {\n            return false;\n        }\n        goto backtrack;\n      case YIELDN:\n        this->m_num_args = static_cast<const yield *>(this->m_pc)->m_num_bindings;\n        if (<recovery-expr>()) {\n            return false;\n        }\n        goto backtrack;\n      case GET_ENODE:\n        ;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case GET_CGR1:\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>())\n            goto backtrack;\n        if (<recovery-expr>()) {\n            for (unsigned int i = 0; i < static_cast<const get_cgr *>(this->m_pc)->m_num_args; ++i) {\n            }\n        }\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n        ;\n      case GET_CGR2:\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>())\n            goto backtrack;\n        if (<recovery-expr>()) {\n            for (unsigned int i = 0; i < static_cast<const get_cgr *>(this->m_pc)->m_num_args; ++i) {\n            }\n        }\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n        ;\n      case GET_CGR3:\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>())\n            goto backtrack;\n        if (<recovery-expr>()) {\n            for (unsigned int i = 0; i < static_cast<const get_cgr *>(this->m_pc)->m_num_args; ++i) {\n            }\n        }\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n        ;\n      case GET_CGR4:\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>())\n            goto backtrack;\n        if (<recovery-expr>()) {\n            for (unsigned int i = 0; i < static_cast<const get_cgr *>(this->m_pc)->m_num_args; ++i) {\n            }\n        }\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n        ;\n      case GET_CGR5:\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>())\n            goto backtrack;\n        if (<recovery-expr>()) {\n            for (unsigned int i = 0; i < static_cast<const get_cgr *>(this->m_pc)->m_num_args; ++i) {\n            }\n        }\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n        ;\n      case GET_CGR6:\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>()) {\n            goto backtrack;\n        }\n        ;\n        if (<recovery-expr>())\n            goto backtrack;\n        if (<recovery-expr>()) {\n            for (unsigned int i = 0; i < static_cast<const get_cgr *>(this->m_pc)->m_num_args; ++i) {\n            }\n        }\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n        ;\n      case GET_CGRN:\n        this->m_num_args = static_cast<const get_cgr *>(this->m_pc)->m_num_args;\n        if (<recovery-expr>())\n            goto backtrack;\n        if (<recovery-expr>()) {\n            for (unsigned int i = 0; i < static_cast<const get_cgr *>(this->m_pc)->m_num_args; ++i) {\n            }\n        }\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n        ;\n      case IS_CGR:\n        if (!this->exec_is_cgr(static_cast<const is_cgr *>(this->m_pc)))\n            goto backtrack;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n      case CONTINUE:\n        this->m_num_args = static_cast<const cont *>(this->m_pc)->m_num_args;\n        this->m_oreg = static_cast<const cont *>(this->m_pc)->m_oreg;\n        if (<recovery-expr>())\n            goto backtrack;\n        this->m_pc = this->m_pc->m_next;\n        goto main_loop;\n    }\n  backtrack:\n    ;\n    if (this->m_top == 0) {\n        return true;\n    }\n    backtrack_point &bp;\n    this->m_max_generation = bp.m_old_max_generation;\n    if (since_last_check++ > 100) {\n        since_last_check = 0;\n        if (<recovery-expr>()) {\n            while (this->m_top != 0)\n                {\n                    backtrack_point &bp;\n                    this->m_top--;\n                }\n            return false;\n        }\n    }\n    switch (bp.m_instr->m_opcode) {\n      case CHOOSE:\n        this->m_pc = static_cast<const choose *>(bp.m_instr)->m_alt;\n        <recovery-expr>(SASSERT, this->m_pc != 0);\n        this->m_top--;\n        goto main_loop;\n      case BIND1:\n        this->m_b = static_cast<const bind *>(bp.m_instr);\n        if (<recovery-expr>()) {\n            this->m_top--;\n            goto backtrack;\n        }\n        this->m_oreg = this->m_b->m_oreg;\n        this->m_pc = this->m_b->m_next;\n        goto main_loop;\n      case BIND2:\n        this->m_b = static_cast<const bind *>(bp.m_instr);\n        if (<recovery-expr>()) {\n            this->m_top--;\n            goto backtrack;\n        }\n        this->m_oreg = this->m_b->m_oreg;\n        this->m_pc = this->m_b->m_next;\n        goto main_loop;\n      case BIND3:\n        this->m_b = static_cast<const bind *>(bp.m_instr);\n        if (<recovery-expr>()) {\n            this->m_top--;\n            goto backtrack;\n        }\n        this->m_oreg = this->m_b->m_oreg;\n        this->m_pc = this->m_b->m_next;\n        goto main_loop;\n      case BIND4:\n        this->m_b = static_cast<const bind *>(bp.m_instr);\n        if (<recovery-expr>()) {\n            this->m_top--;\n            goto backtrack;\n        }\n        this->m_oreg = this->m_b->m_oreg;\n        this->m_pc = this->m_b->m_next;\n        goto main_loop;\n      case BIND5:\n        this->m_b = static_cast<const bind *>(bp.m_instr);\n        if (<recovery-expr>()) {\n            this->m_top--;\n            goto backtrack;\n        }\n        this->m_oreg = this->m_b->m_oreg;\n        this->m_pc = this->m_b->m_next;\n        goto main_loop;\n      case BIND6:\n        this->m_b = static_cast<const bind *>(bp.m_instr);\n        if (<recovery-expr>()) {\n            this->m_top--;\n            goto backtrack;\n        }\n        this->m_oreg = this->m_b->m_oreg;\n        this->m_pc = this->m_b->m_next;\n        goto main_loop;\n      case BINDN:\n        this->m_b = static_cast<const bind *>(bp.m_instr);\n        if (<recovery-expr>()) {\n            this->m_top--;\n            goto backtrack;\n        }\n        this->m_oreg = this->m_b->m_oreg;\n        this->m_num_args = this->m_b->m_num_args;\n        this->m_pc = this->m_b->m_next;\n        goto main_loop;\n      case CONTINUE:\n        ++<recovery-expr>(bp);\n        for (; <recovery-expr>(bp) != <recovery-expr>(bp); ++<recovery-expr>(bp)) {\n            const cont *c = static_cast<const cont *>(bp.m_instr);\n            if (<recovery-expr>()) {\n                if (<recovery-expr>()) {\n                }\n                this->m_num_args = c->m_num_args;\n                this->m_oreg = c->m_oreg;\n                this->m_pc = c->m_next;\n                goto main_loop;\n            }\n        }\n        this->m_top--;\n        goto backtrack;\n      default:\n        <recovery-expr>(UNREACHABLE);\n    }\n    return false;\n}\n"
        }
    ],
    "total": 152,
    "visited": 2
}
