{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/bzip2/bzip2.c#415:1#uncompressStream",
            "gotos": 15,
            "labels": 4,
            "body": "{\n    BZFILE *bzf;\n    Int32 bzerr, bzerr_dummy, ret, nread, streamNo, i;\n    UChar obuf[5000];\n    UChar unused[5000];\n    Int32 nUnused;\n    void *unusedTmpV;\n    UChar *unusedTmp;\n    nUnused = 0;\n    streamNo = 0;\n    SET_BINARY_MODE(<recovery-expr>());\n    SET_BINARY_MODE(<recovery-expr>());\n    if (ferror(<recovery-expr>()))\n        goto errhandler_io;\n    if (ferror(<recovery-expr>()))\n        goto errhandler_io;\n    while (((Bool)1))\n        {\n            bzf = <recovery-expr>()(&bzerr, <recovery-expr>(), verbosity, (int)smallMode, unused, nUnused);\n            if (<recovery-expr>())\n                goto errhandler;\n            streamNo++;\n            while (bzerr == 0)\n                {\n                    nread = BZ2_bzRead(&bzerr, bzf, obuf, 5000);\n                    if (bzerr == (-5))\n                        goto trycat;\n                    if ((bzerr == 0 || bzerr == 4) && nread > 0)\n                        fwrite(obuf, sizeof(UChar), nread, <recovery-expr>());\n                    if (ferror(<recovery-expr>()))\n                        goto errhandler_io;\n                }\n            if (bzerr != 4)\n                goto errhandler;\n            BZ2_bzReadGetUnused(&bzerr, bzf, &unusedTmpV, &nUnused);\n            if (bzerr != 0)\n                panic(\"decompress:bzReadGetUnused\");\n            unusedTmp = (UChar *)unusedTmpV;\n            for (i = 0; i < nUnused; i++)\n                unused[i] = unusedTmp[i];\n            BZ2_bzReadClose(&bzerr, bzf);\n            if (bzerr != 0)\n                panic(\"decompress:bzReadGetUnused\");\n            if (nUnused == 0 && <recovery-expr>()(<recovery-expr>()))\n                break;\n        }\n  closeok:\n    if (ferror(<recovery-expr>()))\n        goto errhandler_io;\n    if (<recovery-expr>()) {\n        Int32 fd = fileno(<recovery-expr>());\n        if (fd < 0)\n            goto errhandler_io;\n        applySavedFileAttrToOutputFile(fd);\n    }\n    ret = fclose(<recovery-expr>());\n    if (<recovery-expr>())\n        goto errhandler_io;\n    if (ferror(<recovery-expr>()))\n        goto errhandler_io;\n    ret = fflush(<recovery-expr>());\n    if (ret != 0)\n        goto errhandler_io;\n    if (<recovery-expr>()) {\n        ret = fclose(<recovery-expr>());\n        if (<recovery-expr>())\n            goto errhandler_io;\n    }\n    return ((Bool)1);\n  trycat:\n    if (forceOverwrite) {\n        rewind(<recovery-expr>());\n        while (((Bool)1))\n            {\n                if (<recovery-expr>()(<recovery-expr>()))\n                    break;\n                nread = fread(obuf, sizeof(UChar), 5000, <recovery-expr>());\n                if (ferror(<recovery-expr>()))\n                    goto errhandler_io;\n                if (nread > 0)\n                    fwrite(obuf, sizeof(UChar), nread, <recovery-expr>());\n                if (ferror(<recovery-expr>()))\n                    goto errhandler_io;\n            }\n        goto closeok;\n    }\n  errhandler:\n    BZ2_bzReadClose(&bzerr_dummy, bzf);\n    switch (bzerr) {\n      case (-9):\n        configError();\n        break;\n      case (-6):\n      errhandler_io:\n        ioError();\n        break;\n      case (-4):\n        crcError();\n      case (-3):\n        outOfMemory();\n      case (-7):\n        compressedStreamEOF();\n      case (-5):\n        if (<recovery-expr>())\n            fclose(<recovery-expr>());\n        if (<recovery-expr>())\n            fclose(<recovery-expr>());\n        if (streamNo == 1) {\n            return ((Bool)0);\n        } else {\n            return ((Bool)1);\n        }\n      default:\n        panic(\"decompress:unexpected error\");\n    }\n    panic(\"decompress:end\");\n    return ((Bool)1);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/bzip2/bzip2.c#1304:1#uncompress",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    Int32 n, i;\n    Bool magicNumberOK;\n    Bool cantGuess;\n    struct MY_STAT statBuf;\n    deleteOutputOnInterrupt = ((Bool)0);\n    if (<recovery-expr>())\n        <recovery-expr>()(\"uncompress: bad modes\\n\");\n    cantGuess = ((Bool)0);\n    switch (srcMode) {\n      case 1:\n        copyFileName(inName, (Char *)\"(stdin)\");\n        copyFileName(outName, (Char *)\"(stdout)\");\n        break;\n      case 3:\n        copyFileName(inName, name);\n        copyFileName(outName, name);\n        for (i = 0; i < 4; i++)\n            if (mapSuffix(outName, zSuffix[i], unzSuffix[i]))\n                goto zzz;\n        cantGuess = ((Bool)1);\n        strcat(outName, \".out\");\n        break;\n      case 2:\n        copyFileName(inName, name);\n        copyFileName(outName, (Char *)\"(stdout)\");\n        break;\n    }\n  zzz:\n    if (srcMode != 1 && containsDubiousChars(inName)) {\n        setExit(1);\n        return;\n    }\n    if (srcMode != 1 && !fileExists(inName)) {\n        setExit(1);\n        return;\n    }\n    if (srcMode == 3 || srcMode == 2) {\n        MY_STAT(inName, &<recovery-expr>());\n        if (MY_S_ISDIR(<recovery-expr>().st_mode)) {\n            setExit(1);\n            return;\n        }\n    }\n    if (srcMode == 3 && !forceOverwrite && notAStandardFile(inName)) {\n        setExit(1);\n        return;\n    }\n    if (cantGuess) {\n    }\n    if (srcMode == 3 && fileExists(outName)) {\n        if (forceOverwrite) {\n            remove(outName);\n        } else {\n            setExit(1);\n            return;\n        }\n    }\n    if (srcMode == 3 && !forceOverwrite && (n = countHardLinks(inName)) > 0) {\n        setExit(1);\n        return;\n    }\n    if (srcMode == 3) {\n        saveInputFileMetaInfo(inName);\n    }\n    switch (srcMode) {\n      case 1:\n        ;\n        if (<recovery-expr>()) {\n            setExit(1);\n            return;\n        }\n        ;\n        break;\n      case 2:\n        ;\n        if (<recovery-expr>()) {\n            setExit(1);\n            return;\n        }\n        ;\n        break;\n      case 3:\n        ;\n        if (<recovery-expr>()) {\n            setExit(1);\n            return;\n        }\n        if (<recovery-expr>()) {\n            setExit(1);\n            return;\n        }\n        ;\n        break;\n      default:\n        <recovery-expr>()(\"uncompress: bad srcMode\");\n        break;\n    }\n    if (verbosity >= 1) {\n        pad(inName);\n    }\n    deleteOutputOnInterrupt = ((Bool)1);\n    if (magicNumberOK) {\n        if (srcMode == 3) {\n            applySavedTimeInfoToOutputFile(outName);\n            deleteOutputOnInterrupt = ((Bool)0);\n            if (!keepInputFiles) {\n                IntNative retVal = remove(inName);\n                {\n                    if ((retVal) != 0)\n                        <recovery-expr>()();\n                }\n                ;\n            }\n        }\n    } else {\n        unzFailsExist = ((Bool)1);\n        deleteOutputOnInterrupt = ((Bool)0);\n        if (srcMode == 3) {\n            IntNative retVal = remove(outName);\n            {\n                if ((retVal) != 0)\n                    <recovery-expr>()();\n            }\n            ;\n        }\n    }\n    deleteOutputOnInterrupt = ((Bool)0);\n    if (magicNumberOK) {\n    } else {\n        setExit(2);\n    }\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/bzip2/bzip2.c#311:1#compressStream",
            "gotos": 12,
            "labels": 2,
            "body": "{\n    BZFILE *bzf;\n    UChar ibuf[5000];\n    Int32 nIbuf;\n    UInt32 nbytes_in_lo32, nbytes_in_hi32;\n    UInt32 nbytes_out_lo32, nbytes_out_hi32;\n    Int32 bzerr, bzerr_dummy, ret;\n    SET_BINARY_MODE(<recovery-expr>());\n    SET_BINARY_MODE(<recovery-expr>());\n    if (ferror(<recovery-expr>()))\n        goto errhandler_io;\n    if (ferror(<recovery-expr>()))\n        goto errhandler_io;\n    bzf = <recovery-expr>()(&bzerr, <recovery-expr>(), blockSize100k, verbosity, workFactor);\n    if (bzerr != 0)\n        goto errhandler;\n    while (((Bool)1))\n        {\n            if (<recovery-expr>()(<recovery-expr>()))\n                break;\n            nIbuf = fread(ibuf, sizeof(UChar), 5000, <recovery-expr>());\n            if (ferror(<recovery-expr>()))\n                goto errhandler_io;\n            if (nIbuf > 0)\n                BZ2_bzWrite(&bzerr, bzf, (void *)ibuf, nIbuf);\n            if (bzerr != 0)\n                goto errhandler;\n        }\n    BZ2_bzWriteClose64(&bzerr, bzf, 0, &nbytes_in_lo32, &nbytes_in_hi32, &nbytes_out_lo32, &nbytes_out_hi32);\n    if (bzerr != 0)\n        goto errhandler;\n    if (ferror(<recovery-expr>()))\n        goto errhandler_io;\n    ret = fflush(<recovery-expr>());\n    if (<recovery-expr>())\n        goto errhandler_io;\n    if (<recovery-expr>()) {\n        Int32 fd = fileno(<recovery-expr>());\n        if (fd < 0)\n            goto errhandler_io;\n        applySavedFileAttrToOutputFile(fd);\n        ret = fclose(<recovery-expr>());\n        if (<recovery-expr>())\n            goto errhandler_io;\n    }\n    if (ferror(<recovery-expr>()))\n        goto errhandler_io;\n    ret = fclose(<recovery-expr>());\n    if (<recovery-expr>())\n        goto errhandler_io;\n    if (verbosity >= 1) {\n        if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {\n        } else {\n            Char buf_nin[32], buf_nout[32];\n            UInt64 nbytes_in, nbytes_out;\n            double nbytes_in_d, nbytes_out_d;\n            uInt64_from_UInt32s(&nbytes_in, nbytes_in_lo32, nbytes_in_hi32);\n            uInt64_from_UInt32s(&nbytes_out, nbytes_out_lo32, nbytes_out_hi32);\n            nbytes_in_d = uInt64_to_double(&nbytes_in);\n            nbytes_out_d = uInt64_to_double(&nbytes_out);\n            uInt64_toAscii(buf_nin, &nbytes_in);\n            uInt64_toAscii(buf_nout, &nbytes_out);\n        }\n    }\n    return;\n  errhandler:\n    BZ2_bzWriteClose64(&bzerr_dummy, bzf, 1, &nbytes_in_lo32, &nbytes_in_hi32, &nbytes_out_lo32, &nbytes_out_hi32);\n    switch (bzerr) {\n      case (-9):\n        configError();\n        break;\n      case (-3):\n        outOfMemory();\n        break;\n      case (-6):\n      errhandler_io:\n        ioError();\n        break;\n      default:\n        panic(\"compress:unexpected error\");\n    }\n    panic(\"compress:end\");\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/bzip2/bzip2.c#536:1#testStream",
            "gotos": 6,
            "labels": 2,
            "body": "{\n    BZFILE *bzf;\n    Int32 bzerr, bzerr_dummy, ret, streamNo, i;\n    UChar obuf[5000];\n    UChar unused[5000];\n    Int32 nUnused;\n    void *unusedTmpV;\n    UChar *unusedTmp;\n    nUnused = 0;\n    streamNo = 0;\n    SET_BINARY_MODE(<recovery-expr>());\n    if (ferror(<recovery-expr>()))\n        goto errhandler_io;\n    while (((Bool)1))\n        {\n            bzf = <recovery-expr>()(&bzerr, <recovery-expr>(), verbosity, (int)smallMode, unused, nUnused);\n            if (<recovery-expr>())\n                goto errhandler;\n            streamNo++;\n            while (bzerr == 0)\n                {\n                    BZ2_bzRead(&bzerr, bzf, obuf, 5000);\n                    if (bzerr == (-5))\n                        goto errhandler;\n                }\n            if (bzerr != 4)\n                goto errhandler;\n            BZ2_bzReadGetUnused(&bzerr, bzf, &unusedTmpV, &nUnused);\n            if (bzerr != 0)\n                panic(\"test:bzReadGetUnused\");\n            unusedTmp = (UChar *)unusedTmpV;\n            for (i = 0; i < nUnused; i++)\n                unused[i] = unusedTmp[i];\n            BZ2_bzReadClose(&bzerr, bzf);\n            if (bzerr != 0)\n                panic(\"test:bzReadGetUnused\");\n            if (nUnused == 0 && <recovery-expr>()(<recovery-expr>()))\n                break;\n        }\n    if (ferror(<recovery-expr>()))\n        goto errhandler_io;\n    ret = fclose(<recovery-expr>());\n    if (<recovery-expr>())\n        goto errhandler_io;\n    return ((Bool)1);\n  errhandler:\n    BZ2_bzReadClose(&bzerr_dummy, bzf);\n    switch (bzerr) {\n      case (-9):\n        configError();\n        break;\n      case (-6):\n      errhandler_io:\n        ioError();\n        break;\n      case (-4):\n        ;\n        return ((Bool)0);\n      case (-3):\n        outOfMemory();\n      case (-7):\n        ;\n        return ((Bool)0);\n      case (-5):\n        if (<recovery-expr>())\n            fclose(<recovery-expr>());\n        if (streamNo == 1) {\n            return ((Bool)0);\n        } else {\n            return ((Bool)1);\n        }\n      default:\n        panic(\"test:unexpected error\");\n    }\n    panic(\"test:end\");\n    return ((Bool)1);\n}\n"
        }
    ],
    "total": 44,
    "visited": 4
}
