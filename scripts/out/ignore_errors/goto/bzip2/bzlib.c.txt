{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/bzip2/bzlib.c#1301:1#BZ2_bzBuffToBuffDecompress",
            "gotos": 2,
            "labels": 2,
            "body": "{\n    bz_stream strm;\n    int ret;\n    if (<recovery-expr>())\n        return (-2);\n    ret = BZ2_bzDecompressInit(&strm, verbosity, small);\n    if (ret != 0)\n        return ret;\n    strm.next_in = source;\n    strm.next_out = dest;\n    strm.avail_in = sourceLen;\n    strm.avail_out = *destLen;\n    ret = BZ2_bzDecompress(&strm);\n    if (ret == 0)\n        goto output_overflow_or_eof;\n    if (ret != 4)\n        goto errhandler;\n    *destLen -= strm.avail_out;\n    BZ2_bzDecompressEnd(&strm);\n    return 0;\n  output_overflow_or_eof:\n    if (strm.avail_out > 0) {\n        BZ2_bzDecompressEnd(&strm);\n        return (-7);\n    } else {\n        BZ2_bzDecompressEnd(&strm);\n        return (-8);\n    }\n    ;\n  errhandler:\n    BZ2_bzDecompressEnd(&strm);\n    return ret;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/bzip2/bzlib.c#1249:1#BZ2_bzBuffToBuffCompress",
            "gotos": 2,
            "labels": 2,
            "body": "{\n    bz_stream strm;\n    int ret;\n    if (<recovery-expr>())\n        return (-2);\n    if (workFactor == 0)\n        workFactor = 30;\n    ret = BZ2_bzCompressInit(&strm, blockSize100k, verbosity, workFactor);\n    if (ret != 0)\n        return ret;\n    strm.next_in = source;\n    strm.next_out = dest;\n    strm.avail_in = sourceLen;\n    strm.avail_out = *destLen;\n    ret = BZ2_bzCompress(&strm, 2);\n    if (ret == 3)\n        goto output_overflow;\n    if (ret != 4)\n        goto errhandler;\n    *destLen -= strm.avail_out;\n    BZ2_bzCompressEnd(&strm);\n    return 0;\n  output_overflow:\n    BZ2_bzCompressEnd(&strm);\n    return (-8);\n  errhandler:\n    BZ2_bzCompressEnd(&strm);\n    return ret;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/bzip2/bzlib.c#537:1#unRLE_obuf_to_output_FAST",
            "gotos": 5,
            "labels": 2,
            "body": "{\n    UChar k1;\n    if (s->blockRandomised) {\n        while (((Bool)1))\n            {\n                while (((Bool)1))\n                    {\n                        if (s->strm->avail_out == 0)\n                            return ((Bool)0);\n                        if (s->state_out_len == 0)\n                            break;\n                        *((UChar *)(s->strm->next_out)) = s->state_out_ch;\n                        {\n                            s->calculatedBlockCRC = (s->calculatedBlockCRC << 8) ^ BZ2_crc32Table[(s->calculatedBlockCRC >> 24) ^ ((UChar)s->state_out_ch)];\n                        }\n                        ;\n                        s->state_out_len--;\n                        s->strm->next_out++;\n                        s->strm->avail_out--;\n                        s->strm->total_out_lo32++;\n                        if (s->strm->total_out_lo32 == 0)\n                            s->strm->total_out_hi32++;\n                    }\n                if (s->nblock_used == s->save_nblock + 1)\n                    return ((Bool)0);\n                if (s->nblock_used > s->save_nblock + 1)\n                    return ((Bool)1);\n                s->state_out_len = 1;\n                s->state_out_ch = s->k0;\n                if (s->tPos >= (UInt32)100000 * (UInt32)s->blockSize100k)\n                    return ((Bool)1);\n                s->tPos = s->tt[s->tPos];\n                k1 = (UChar)(s->tPos & 255);\n                s->tPos >>= 8;\n                ;\n                if (s->rNToGo == 0) {\n                    s->rNToGo = BZ2_rNums[s->rTPos];\n                    s->rTPos++;\n                    if (s->rTPos == 512)\n                        s->rTPos = 0;\n                }\n                s->rNToGo--;\n                ;\n                k1 ^= ((s->rNToGo == 1) ? 1 : 0);\n                s->nblock_used++;\n                if (s->nblock_used == s->save_nblock + 1)\n                    continue;\n                if (k1 != s->k0) {\n                    s->k0 = k1;\n                    continue;\n                }\n                ;\n                s->state_out_len = 2;\n                if (s->tPos >= (UInt32)100000 * (UInt32)s->blockSize100k)\n                    return ((Bool)1);\n                s->tPos = s->tt[s->tPos];\n                k1 = (UChar)(s->tPos & 255);\n                s->tPos >>= 8;\n                ;\n                if (s->rNToGo == 0) {\n                    s->rNToGo = BZ2_rNums[s->rTPos];\n                    s->rTPos++;\n                    if (s->rTPos == 512)\n                        s->rTPos = 0;\n                }\n                s->rNToGo--;\n                ;\n                k1 ^= ((s->rNToGo == 1) ? 1 : 0);\n                s->nblock_used++;\n                if (s->nblock_used == s->save_nblock + 1)\n                    continue;\n                if (k1 != s->k0) {\n                    s->k0 = k1;\n                    continue;\n                }\n                ;\n                s->state_out_len = 3;\n                if (s->tPos >= (UInt32)100000 * (UInt32)s->blockSize100k)\n                    return ((Bool)1);\n                s->tPos = s->tt[s->tPos];\n                k1 = (UChar)(s->tPos & 255);\n                s->tPos >>= 8;\n                ;\n                if (s->rNToGo == 0) {\n                    s->rNToGo = BZ2_rNums[s->rTPos];\n                    s->rTPos++;\n                    if (s->rTPos == 512)\n                        s->rTPos = 0;\n                }\n                s->rNToGo--;\n                ;\n                k1 ^= ((s->rNToGo == 1) ? 1 : 0);\n                s->nblock_used++;\n                if (s->nblock_used == s->save_nblock + 1)\n                    continue;\n                if (k1 != s->k0) {\n                    s->k0 = k1;\n                    continue;\n                }\n                ;\n                if (s->tPos >= (UInt32)100000 * (UInt32)s->blockSize100k)\n                    return ((Bool)1);\n                s->tPos = s->tt[s->tPos];\n                k1 = (UChar)(s->tPos & 255);\n                s->tPos >>= 8;\n                ;\n                if (s->rNToGo == 0) {\n                    s->rNToGo = BZ2_rNums[s->rTPos];\n                    s->rTPos++;\n                    if (s->rTPos == 512)\n                        s->rTPos = 0;\n                }\n                s->rNToGo--;\n                ;\n                k1 ^= ((s->rNToGo == 1) ? 1 : 0);\n                s->nblock_used++;\n                s->state_out_len = ((Int32)k1) + 4;\n                if (s->tPos >= (UInt32)100000 * (UInt32)s->blockSize100k)\n                    return ((Bool)1);\n                s->tPos = s->tt[s->tPos];\n                s->k0 = (UChar)(s->tPos & 255);\n                s->tPos >>= 8;\n                ;\n                if (s->rNToGo == 0) {\n                    s->rNToGo = BZ2_rNums[s->rTPos];\n                    s->rTPos++;\n                    if (s->rTPos == 512)\n                        s->rTPos = 0;\n                }\n                s->rNToGo--;\n                ;\n                s->k0 ^= ((s->rNToGo == 1) ? 1 : 0);\n                s->nblock_used++;\n            }\n    } else {\n        UInt32 c_calculatedBlockCRC = s->calculatedBlockCRC;\n        UChar c_state_out_ch = s->state_out_ch;\n        Int32 c_state_out_len = s->state_out_len;\n        Int32 c_nblock_used = s->nblock_used;\n        Int32 c_k0 = s->k0;\n        UInt32 *c_tt = s->tt;\n        UInt32 c_tPos = s->tPos;\n        char *cs_next_out = s->strm->next_out;\n        unsigned int cs_avail_out = s->strm->avail_out;\n        Int32 ro_blockSize100k = s->blockSize100k;\n        UInt32 avail_out_INIT = cs_avail_out;\n        Int32 s_save_nblockPP = s->save_nblock + 1;\n        unsigned int total_out_lo32_old;\n        while (((Bool)1))\n            {\n                if (c_state_out_len > 0) {\n                    while (((Bool)1))\n                        {\n                            if (cs_avail_out == 0)\n                                goto return_notr;\n                            if (c_state_out_len == 1)\n                                break;\n                            *((UChar *)(cs_next_out)) = c_state_out_ch;\n                            {\n                                c_calculatedBlockCRC = (c_calculatedBlockCRC << 8) ^ BZ2_crc32Table[(c_calculatedBlockCRC >> 24) ^ ((UChar)c_state_out_ch)];\n                            }\n                            ;\n                            c_state_out_len--;\n                            cs_next_out++;\n                            cs_avail_out--;\n                        }\n                  s_state_out_len_eq_one:\n                    {\n                        if (cs_avail_out == 0) {\n                            c_state_out_len = 1;\n                            goto return_notr;\n                        }\n                        ;\n                        *((UChar *)(cs_next_out)) = c_state_out_ch;\n                        {\n                            c_calculatedBlockCRC = (c_calculatedBlockCRC << 8) ^ BZ2_crc32Table[(c_calculatedBlockCRC >> 24) ^ ((UChar)c_state_out_ch)];\n                        }\n                        ;\n                        cs_next_out++;\n                        cs_avail_out--;\n                    }\n                }\n                if (c_nblock_used > s_save_nblockPP)\n                    return ((Bool)1);\n                if (c_nblock_used == s_save_nblockPP) {\n                    c_state_out_len = 0;\n                    goto return_notr;\n                }\n                ;\n                c_state_out_ch = c_k0;\n                if (c_tPos >= (UInt32)100000 * (UInt32)ro_blockSize100k)\n                    return ((Bool)1);\n                c_tPos = c_tt[c_tPos];\n                k1 = (UChar)(c_tPos & 255);\n                c_tPos >>= 8;\n                ;\n                c_nblock_used++;\n                if (k1 != c_k0) {\n                    c_k0 = k1;\n                    goto s_state_out_len_eq_one;\n                }\n                ;\n                if (c_nblock_used == s_save_nblockPP)\n                    goto s_state_out_len_eq_one;\n                c_state_out_len = 2;\n                if (c_tPos >= (UInt32)100000 * (UInt32)ro_blockSize100k)\n                    return ((Bool)1);\n                c_tPos = c_tt[c_tPos];\n                k1 = (UChar)(c_tPos & 255);\n                c_tPos >>= 8;\n                ;\n                c_nblock_used++;\n                if (c_nblock_used == s_save_nblockPP)\n                    continue;\n                if (k1 != c_k0) {\n                    c_k0 = k1;\n                    continue;\n                }\n                ;\n                c_state_out_len = 3;\n                if (c_tPos >= (UInt32)100000 * (UInt32)ro_blockSize100k)\n                    return ((Bool)1);\n                c_tPos = c_tt[c_tPos];\n                k1 = (UChar)(c_tPos & 255);\n                c_tPos >>= 8;\n                ;\n                c_nblock_used++;\n                if (c_nblock_used == s_save_nblockPP)\n                    continue;\n                if (k1 != c_k0) {\n                    c_k0 = k1;\n                    continue;\n                }\n                ;\n                if (c_tPos >= (UInt32)100000 * (UInt32)ro_blockSize100k)\n                    return ((Bool)1);\n                c_tPos = c_tt[c_tPos];\n                k1 = (UChar)(c_tPos & 255);\n                c_tPos >>= 8;\n                ;\n                c_nblock_used++;\n                c_state_out_len = ((Int32)k1) + 4;\n                if (c_tPos >= (UInt32)100000 * (UInt32)ro_blockSize100k)\n                    return ((Bool)1);\n                c_tPos = c_tt[c_tPos];\n                c_k0 = (UChar)(c_tPos & 255);\n                c_tPos >>= 8;\n                ;\n                c_nblock_used++;\n            }\n      return_notr:\n        total_out_lo32_old = s->strm->total_out_lo32;\n        s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);\n        if (s->strm->total_out_lo32 < total_out_lo32_old)\n            s->strm->total_out_hi32++;\n        s->calculatedBlockCRC = c_calculatedBlockCRC;\n        s->state_out_ch = c_state_out_ch;\n        s->state_out_len = c_state_out_len;\n        s->nblock_used = c_nblock_used;\n        s->k0 = c_k0;\n        s->tt = c_tt;\n        s->tPos = c_tPos;\n        s->strm->next_out = cs_next_out;\n        s->strm->avail_out = cs_avail_out;\n    }\n    return ((Bool)0);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/bzip2/bzlib.c#409:1#BZ2_bzCompress",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    Bool progress;\n    EState *s;\n    if (<recovery-expr>())\n        return (-2);\n    s = strm->state;\n    if (<recovery-expr>())\n        return (-2);\n    if (s->strm != strm)\n        return (-2);\n  preswitch:\n    switch (s->mode) {\n      case 1:\n        return (-1);\n      case 2:\n        if (action == 0) {\n            progress = handle_compress(strm);\n            return progress ? 1 : (-2);\n        } else if (action == 1) {\n            s->avail_in_expect = strm->avail_in;\n            s->mode = 3;\n            goto preswitch;\n        } else if (action == 2) {\n            s->avail_in_expect = strm->avail_in;\n            s->mode = 4;\n            goto preswitch;\n        } else\n            return (-2);\n      case 3:\n        if (action != 1)\n            return (-1);\n        if (s->avail_in_expect != s->strm->avail_in)\n            return (-1);\n        progress = handle_compress(strm);\n        if (s->avail_in_expect > 0 || !isempty_RL(s) || s->state_out_pos < s->numZ)\n            return 2;\n        s->mode = 2;\n        return 1;\n      case 4:\n        if (action != 2)\n            return (-1);\n        if (s->avail_in_expect != s->strm->avail_in)\n            return (-1);\n        progress = handle_compress(strm);\n        if (!progress)\n            return (-1);\n        if (s->avail_in_expect > 0 || !isempty_RL(s) || s->state_out_pos < s->numZ)\n            return 3;\n        s->mode = 1;\n        return 4;\n    }\n    return 0;\n}\n"
        }
    ],
    "total": 41,
    "visited": 4
}
