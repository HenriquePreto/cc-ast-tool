{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/bzip2/blocksort.c#750:1#mainSort",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    Int32 i, j, k, ss, sb;\n    Int32 runningOrder[256];\n    Bool bigDone[256];\n    Int32 copyStart[256];\n    Int32 copyEnd[256];\n    UChar c1;\n    Int32 numQSorted;\n    UInt16 s;\n    for (i = 65536; i >= 0; i--)\n        ftab[i] = 0;\n    j = block[0] << 8;\n    i = nblock - 1;\n    for (; i >= 3; i -= 4) {\n        quadrant[i] = 0;\n        j = (j >> 8) | (((UInt16)block[i]) << 8);\n        ftab[j]++;\n        quadrant[i - 1] = 0;\n        j = (j >> 8) | (((UInt16)block[i - 1]) << 8);\n        ftab[j]++;\n        quadrant[i - 2] = 0;\n        j = (j >> 8) | (((UInt16)block[i - 2]) << 8);\n        ftab[j]++;\n        quadrant[i - 3] = 0;\n        j = (j >> 8) | (((UInt16)block[i - 3]) << 8);\n        ftab[j]++;\n    }\n    for (; i >= 0; i--) {\n        quadrant[i] = 0;\n        j = (j >> 8) | (((UInt16)block[i]) << 8);\n        ftab[j]++;\n    }\n    for (i = 0; i < (2 + 12 + 18 + 2); i++) {\n        block[nblock + i] = block[i];\n        quadrant[nblock + i] = 0;\n    }\n    for (i = 1; i <= 65536; i++)\n        ftab[i] += ftab[i - 1];\n    s = block[0] << 8;\n    i = nblock - 1;\n    for (; i >= 3; i -= 4) {\n        s = (s >> 8) | (block[i] << 8);\n        j = ftab[s] - 1;\n        ftab[s] = j;\n        ptr[j] = i;\n        s = (s >> 8) | (block[i - 1] << 8);\n        j = ftab[s] - 1;\n        ftab[s] = j;\n        ptr[j] = i - 1;\n        s = (s >> 8) | (block[i - 2] << 8);\n        j = ftab[s] - 1;\n        ftab[s] = j;\n        ptr[j] = i - 2;\n        s = (s >> 8) | (block[i - 3] << 8);\n        j = ftab[s] - 1;\n        ftab[s] = j;\n        ptr[j] = i - 3;\n    }\n    for (; i >= 0; i--) {\n        s = (s >> 8) | (block[i] << 8);\n        j = ftab[s] - 1;\n        ftab[s] = j;\n        ptr[j] = i;\n    }\n    for (i = 0; i <= 255; i++) {\n        bigDone[i] = ((Bool)0);\n        runningOrder[i] = i;\n    }\n    {\n        Int32 vv;\n        Int32 h = 1;\n        do \n            h = 3 * h + 1;\n        while (h <= 256);\n        do {\n            h = h / 3;\n            for (i = h; i <= 255; i++) {\n                vv = runningOrder[i];\n                j = i;\n                while ((ftab[((runningOrder[j - h]) + 1) << 8] - ftab[(runningOrder[j - h]) << 8]) > (ftab[((vv) + 1) << 8] - ftab[(vv) << 8]))\n                    {\n                        runningOrder[j] = runningOrder[j - h];\n                        j = j - h;\n                        if (j <= (h - 1))\n                            goto zero;\n                    }\n              zero:\n                runningOrder[j] = vv;\n            }\n        } while (h != 1);\n    }\n    numQSorted = 0;\n    for (i = 0; i <= 255; i++) {\n        ss = runningOrder[i];\n        for (j = 0; j <= 255; j++) {\n            if (j != ss) {\n                sb = (ss << 8) + j;\n                if (!(ftab[sb] & (1 << 21))) {\n                    Int32 lo = ftab[sb] & (~((1 << 21)));\n                    Int32 hi = (ftab[sb + 1] & (~((1 << 21)))) - 1;\n                    if (hi > lo) {\n                        mainQSort3(ptr, block, quadrant, nblock, lo, hi, 2, budget);\n                        numQSorted += (hi - lo + 1);\n                        if (*budget < 0)\n                            return;\n                    }\n                }\n                ftab[sb] |= (1 << 21);\n            }\n        }\n        {\n            if (!(!bigDone[ss]))\n                BZ2_bz__AssertH__fail(1006);\n        }\n        ;\n        {\n            for (j = 0; j <= 255; j++) {\n                copyStart[j] = ftab[(j << 8) + ss] & (~((1 << 21)));\n                copyEnd[j] = (ftab[(j << 8) + ss + 1] & (~((1 << 21)))) - 1;\n            }\n            for (j = ftab[ss << 8] & (~((1 << 21))); j < copyStart[ss]; j++) {\n                k = ptr[j] - 1;\n                if (k < 0)\n                    k += nblock;\n                c1 = block[k];\n                if (!bigDone[c1])\n                    ptr[copyStart[c1]++] = k;\n            }\n            for (j = (ftab[(ss + 1) << 8] & (~((1 << 21)))) - 1; j > copyEnd[ss]; j--) {\n                k = ptr[j] - 1;\n                if (k < 0)\n                    k += nblock;\n                c1 = block[k];\n                if (!bigDone[c1])\n                    ptr[copyEnd[c1]--] = k;\n            }\n        }\n        {\n            if (!((copyStart[ss] - 1 == copyEnd[ss]) || (copyStart[ss] == 0 && copyEnd[ss] == nblock - 1)))\n                BZ2_bz__AssertH__fail(1007);\n        }\n        for (j = 0; j <= 255; j++)\n            ftab[(j << 8) + ss] |= (1 << 21);\n        bigDone[ss] = ((Bool)1);\n        if (i < 255) {\n            Int32 bbStart = ftab[ss << 8] & (~((1 << 21)));\n            Int32 bbSize = (ftab[(ss + 1) << 8] & (~((1 << 21)))) - bbStart;\n            Int32 shifts = 0;\n            while ((bbSize >> shifts) > 65534)\n                shifts++;\n            for (j = bbSize - 1; j >= 0; j--) {\n                Int32 a2update = ptr[bbStart + j];\n                UInt16 qVal = (UInt16)(j >> shifts);\n                quadrant[a2update] = qVal;\n                if (a2update < (2 + 12 + 18 + 2))\n                    quadrant[a2update + nblock] = qVal;\n            }\n            {\n                if (!(((bbSize - 1) >> shifts) <= 65535))\n                    BZ2_bz__AssertH__fail(1002);\n            }\n            ;\n        }\n    }\n}\n"
        }
    ],
    "total": 9,
    "visited": 1
}
