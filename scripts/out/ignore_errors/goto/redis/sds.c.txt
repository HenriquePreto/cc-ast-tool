{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/sds.c#1267:1#sdstemplate",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    sds res = sdsempty();\n    const char *p = template;\n    while (*p)\n        {\n            const char *sv = strchr(p, '{');\n            if (!sv) {\n                res = sdscat(res, p);\n                break;\n            } else if (sv > p) {\n                res = <recovery-expr>()(res, p, sv - p);\n            }\n            sv++;\n            if (!*sv)\n                goto error;\n            if (*sv == '{') {\n                p = sv + 1;\n                res = sdscat(res, \"{\");\n                continue;\n            }\n            const char *ev = strchr(sv, '}');\n            if (!ev)\n                goto error;\n            sds varname = <recovery-expr>()(sv, ev - sv);\n            sds value = cb_func(varname, cb_arg);\n            sdsfree(varname);\n            if (!value)\n                goto error;\n            res = sdscat(res, value);\n            sdsfree(value);\n            p = ev + 1;\n        }\n    return res;\n  error:\n    sdsfree(res);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/sds.c#937:1#sdssplitlen",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    int elements = 0, slots = 5;\n    long start = 0, j;\n    sds *tokens;\n    if (seplen < 1 || <recovery-expr>() <= 0) {\n        *count = 0;\n    }\n    tokens = <recovery-expr>()(sizeof(sds) * slots);\n    for (j = 0; j < (<recovery-expr>() - (seplen - 1)); j++) {\n        if (slots < elements + 2) {\n            sds *newtokens;\n            slots *= 2;\n            newtokens = <recovery-expr>()(tokens, sizeof(sds) * slots);\n            if (<recovery-expr>())\n                goto cleanup;\n            tokens = newtokens;\n        }\n        if ((seplen == 1 && *(s + j) == sep[0]) || (memcmp(s + j, sep, seplen) == 0)) {\n            tokens[elements] = <recovery-expr>()(s + start, j - start);\n            if (<recovery-expr>())\n                goto cleanup;\n            elements++;\n            start = j + seplen;\n            j = j + seplen - 1;\n        }\n    }\n    tokens[elements] = <recovery-expr>()(s + start, <recovery-expr>() - start);\n    if (<recovery-expr>())\n        goto cleanup;\n    elements++;\n    *count = elements;\n    return tokens;\n  cleanup:\n    {\n        int i;\n        for (i = 0; i < elements; i++)\n            sdsfree(tokens[i]);\n        zfree(tokens);\n        *count = 0;\n    }\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/sds.c#1094:1#sdssplitargs",
            "gotos": 4,
            "labels": 1,
            "body": "{\n    const char *p = line;\n    char *current;\n    char **vector;\n    *argc = 0;\n    while (1)\n        {\n            while (*p && isspace(*p))\n                p++;\n            if (*p) {\n                int inq = 0;\n                int insq = 0;\n                int done = 0;\n                if (<recovery-expr>())\n                    current = sdsempty();\n                while (!done)\n                    {\n                        if (inq) {\n                            if (*p == '\\\\' && *(p + 1) == 'x' && is_hex_digit(*(p + 2)) && is_hex_digit(*(p + 3))) {\n                                unsigned char byte;\n                                byte = (hex_digit_to_int(*(p + 2)) * 16) + hex_digit_to_int(*(p + 3));\n                                current = <recovery-expr>()(current, (char *)&byte, 1);\n                                p += 3;\n                            } else if (*p == '\\\\' && *(p + 1)) {\n                                char c;\n                                p++;\n                                switch (*p) {\n                                  case 'n':\n                                    c = '\\n';\n                                    break;\n                                  case 'r':\n                                    c = '\\r';\n                                    break;\n                                  case 't':\n                                    c = '\\t';\n                                    break;\n                                  case 'b':\n                                    c = '\\b';\n                                    break;\n                                  case 'a':\n                                    c = '\\a';\n                                    break;\n                                  default:\n                                    c = *p;\n                                    break;\n                                }\n                                current = <recovery-expr>()(current, &c, 1);\n                            } else if (*p == '\"') {\n                                if (*(p + 1) && !isspace(*(p + 1)))\n                                    goto err;\n                                done = 1;\n                            } else if (!*p) {\n                                goto err;\n                            } else {\n                                current = <recovery-expr>()(current, p, 1);\n                            }\n                        } else if (insq) {\n                            if (*p == '\\\\' && *(p + 1) == '\\'') {\n                                p++;\n                                current = <recovery-expr>()(current, \"'\", 1);\n                            } else if (*p == '\\'') {\n                                if (*(p + 1) && !isspace(*(p + 1)))\n                                    goto err;\n                                done = 1;\n                            } else if (!*p) {\n                                goto err;\n                            } else {\n                                current = <recovery-expr>()(current, p, 1);\n                            }\n                        } else {\n                            switch (*p) {\n                              case ' ':\n                              case '\\n':\n                              case '\\r':\n                              case '\\t':\n                              case '\\x00':\n                                done = 1;\n                                break;\n                              case '\"':\n                                inq = 1;\n                                break;\n                              case '\\'':\n                                insq = 1;\n                                break;\n                              default:\n                                current = <recovery-expr>()(current, p, 1);\n                                break;\n                            }\n                        }\n                        if (*p)\n                            p++;\n                    }\n                vector = <recovery-expr>()(vector, ((*argc) + 1) * sizeof(char *));\n                vector[*argc] = current;\n                (*argc)++;\n            } else {\n                if (<recovery-expr>())\n                    vector = <recovery-expr>()(sizeof(void *));\n                return vector;\n            }\n        }\n  err:\n    while ((*argc)--)\n        sdsfree(vector[*argc]);\n    zfree(vector);\n    if (current)\n        sdsfree(current);\n    *argc = 0;\n}\n"
        }
    ],
    "total": 58,
    "visited": 3
}
