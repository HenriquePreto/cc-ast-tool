{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/function_lua.c#271:1#luaRegisterFunctionReadNamedArgs",
            "gotos": 10,
            "labels": 1,
            "body": "{\n    char *err;\n    sds name;\n    sds desc;\n    luaFunctionCtx *lua_f_ctx;\n    if (!lua_istable(<recovery-expr>(), 1)) {\n        err = \"calling redis.register_function with a single argument is only applicable to Lua table (representing named arguments).\";\n        goto error;\n    }\n    lua_pushnil(<recovery-expr>());\n    while (lua_next(<recovery-expr>(), -2))\n        {\n            if (!lua_isstring(<recovery-expr>(), -2)) {\n                err = \"named argument key given to redis.register_function is not a string\";\n                goto error;\n            }\n            const char *key = lua_tostring(<recovery-expr>(), -2);\n            if (!strcasecmp(key, \"function_name\")) {\n                if (!(name = <recovery-expr>()(<recovery-expr>(), -1))) {\n                    err = \"function_name argument given to redis.register_function must be a string\";\n                    goto error;\n                }\n            } else if (!strcasecmp(key, \"description\")) {\n                if (!(desc = <recovery-expr>()(<recovery-expr>(), -1))) {\n                    err = \"description argument given to redis.register_function must be a string\";\n                    goto error;\n                }\n            } else if (!strcasecmp(key, \"callback\")) {\n                if (!lua_isfunction(<recovery-expr>(), -1)) {\n                    err = \"callback argument given to redis.register_function must be a function\";\n                    goto error;\n                }\n                int lua_function_ref;\n                lua_f_ctx = <recovery-expr>()(sizeof (*lua_f_ctx));\n                lua_f_ctx->lua_function_ref = lua_function_ref;\n                continue;\n            } else if (!strcasecmp(key, \"flags\")) {\n                if (!lua_istable(<recovery-expr>(), -1)) {\n                    err = \"flags argument to redis.register_function must be a table representing function flags\";\n                    goto error;\n                }\n                if (<recovery-expr>()) {\n                    err = \"unknown flag given\";\n                    goto error;\n                }\n            } else {\n                err = \"unknown argument given to redis.register_function\";\n                goto error;\n            }\n            lua_pop(<recovery-expr>(), 1);\n        }\n    if (!name) {\n        err = \"redis.register_function must get a function name argument\";\n        goto error;\n    }\n    if (!lua_f_ctx) {\n        err = \"redis.register_function must get a callback argument\";\n        goto error;\n    }\n    return 0;\n  error:\n    if (name)\n        sdsfree(name);\n    if (desc)\n        sdsfree(desc);\n    if (lua_f_ctx) {\n        lua_unref(<recovery-expr>(), lua_f_ctx->lua_function_ref);\n        zfree(lua_f_ctx);\n    }\n    <recovery-expr>()(<recovery-expr>(), err);\n    return -1;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/function_lua.c#230:1#luaRegisterFunctionReadFlags",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    int j = 1;\n    int ret = -1;\n    int f_flags = 0;\n    while (1)\n        {\n            lua_pushnumber(<recovery-expr>(), j++);\n            lua_gettable(<recovery-expr>(), -2);\n            int t = lua_type(<recovery-expr>(), -1);\n            if (<recovery-expr>()) {\n                lua_pop(<recovery-expr>(), 1);\n                break;\n            }\n            if (!lua_isstring(<recovery-expr>(), -1)) {\n                lua_pop(<recovery-expr>(), 1);\n                goto done;\n            }\n            const char *flag_str = lua_tostring(<recovery-expr>(), -1);\n            int found = 0;\n            for (scriptFlag *flag = scripts_flags_def; flag->str; ++flag) {\n                if (!strcasecmp(flag->str, flag_str)) {\n                    f_flags |= <recovery-expr>(flag);\n                    found = 1;\n                    break;\n                }\n            }\n            lua_pop(<recovery-expr>(), 1);\n            if (!found) {\n                goto done;\n            }\n        }\n    *<recovery-expr>() = f_flags;\n    ret = 0;\n  done:\n    return ret;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/function_lua.c#103:1#luaEngineCreate",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    int ret = -1;\n    luaEngineCtx *lua_engine_ctx = engine_ctx;\n    if (<recovery-expr>()) {\n        goto done;\n    }\n    loadCtx load_ctx = {.li = li, .start_time = getMonotonicUs()};\n    if (<recovery-expr>()) {\n        errorInfo err_info = {0};\n        *err = sdscatprintf(sdsempty(), \"Error registering functions: %s\", err_info.msg);\n        luaErrorInformationDiscard(&err_info);\n        goto done;\n    }\n    ret = 0;\n  done:\n    ;\n    return ret;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/function_lua.c#353:1#luaRegisterFunctionReadPositionalArgs",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    char *err;\n    sds name;\n    sds desc;\n    luaFunctionCtx *lua_f_ctx;\n    if (!(name = <recovery-expr>()(<recovery-expr>(), 1))) {\n        err = \"first argument to redis.register_function must be a string\";\n        goto error;\n    }\n    if (!lua_isfunction(<recovery-expr>(), 2)) {\n        err = \"second argument to redis.register_function must be a function\";\n        goto error;\n    }\n    int lua_function_ref;\n    lua_f_ctx = <recovery-expr>()(sizeof (*lua_f_ctx));\n    lua_f_ctx->lua_function_ref = lua_function_ref;\n    return 0;\n  error:\n    if (name)\n        sdsfree(name);\n    if (desc)\n        sdsfree(desc);\n    <recovery-expr>()(<recovery-expr>(), err);\n    return -1;\n}\n"
        }
    ],
    "total": 65,
    "visited": 4
}
