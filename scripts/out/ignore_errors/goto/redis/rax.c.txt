{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/rax.c#509:1#raxGenericInsert",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    int j = 0;\n    raxNode *h, **parentlink;\n    ;\n    if (<recovery-expr>()) {\n        ;\n        if (!<recovery-expr>(h) || (<recovery-expr>(h) && overwrite)) {\n            h = raxReallocForData(h, data);\n            if (h)\n                memcpy(parentlink, &h, sizeof (h));\n        }\n        if (<recovery-expr>()) {\n            return 0;\n        }\n        if (<recovery-expr>(h)) {\n            if (old)\n                *old = raxGetData(h);\n            if (overwrite)\n                raxSetData(h, data);\n            return 0;\n        }\n        raxSetData(h, data);\n        <recovery-expr>(rax)++;\n        return 1;\n    }\n    if (<recovery-expr>()) {\n        ;\n        ;\n        ;\n        ;\n        raxNode **childfield = ((raxNode **)(((char *)(h)) + (sizeof(raxNode) + <recovery-expr>((h)) + ((sizeof(void *) - (((<recovery-expr>((h))) + 4) % sizeof(void *))) & (sizeof(void *) - 1)) + (<recovery-expr>((h)) ? sizeof(raxNode *) : sizeof(raxNode *) * <recovery-expr>((h))) + ((<recovery-expr>((h)) && !<recovery-expr>((h))) * sizeof(void *))) - sizeof(raxNode *) - ((<recovery-expr>((h)) && !<recovery-expr>((h))) ? sizeof(void *) : 0)));\n        raxNode *next;\n        memcpy(&next, childfield, sizeof (next));\n        ;\n        ;\n        if (<recovery-expr>(h)) {\n            ;\n        }\n        int split_node_is_key;\n        raxNode *splitnode = <recovery-expr>()(1, split_node_is_key);\n        raxNode *trimmed;\n        raxNode *postfix;\n        if (<recovery-expr>()) {\n        }\n        if (<recovery-expr>()) {\n        }\n        if (<recovery-expr>()) {\n            zfree(splitnode);\n            zfree(trimmed);\n            zfree(postfix);\n            return 0;\n        }\n        splitnode->data[0] = h->data[j];\n        if (j == 0) {\n            if (<recovery-expr>(h)) {\n                void *ndata = raxGetData(h);\n                raxSetData(splitnode, ndata);\n            }\n            memcpy(parentlink, &splitnode, sizeof (splitnode));\n        } else {\n            <recovery-expr>(trimmed) = j;\n            memcpy(trimmed->data, h->data, j);\n            <recovery-expr>(trimmed) = j > 1 ? 1 : 0;\n            <recovery-expr>(trimmed) = <recovery-expr>(h);\n            <recovery-expr>(trimmed) = <recovery-expr>(h);\n            if (<recovery-expr>(h) && !<recovery-expr>(h)) {\n                void *ndata = raxGetData(h);\n                raxSetData(trimmed, ndata);\n            }\n            raxNode **cp = ((raxNode **)(((char *)(trimmed)) + (sizeof(raxNode) + <recovery-expr>((trimmed)) + ((sizeof(void *) - (((<recovery-expr>((trimmed))) + 4) % sizeof(void *))) & (sizeof(void *) - 1)) + (<recovery-expr>((trimmed)) ? sizeof(raxNode *) : sizeof(raxNode *) * <recovery-expr>((trimmed))) + ((<recovery-expr>((trimmed)) && !<recovery-expr>((trimmed))) * sizeof(void *))) - sizeof(raxNode *) - ((<recovery-expr>((trimmed)) && !<recovery-expr>((trimmed))) ? sizeof(void *) : 0)));\n            memcpy(cp, &splitnode, sizeof (splitnode));\n            memcpy(parentlink, &trimmed, sizeof (trimmed));\n            parentlink = cp;\n            <recovery-expr>(rax)++;\n        }\n        if (<recovery-expr>()) {\n            <recovery-expr>(postfix) = 0;\n            <recovery-expr>(postfix) = 0;\n            raxNode **cp = ((raxNode **)(((char *)(postfix)) + (sizeof(raxNode) + <recovery-expr>((postfix)) + ((sizeof(void *) - (((<recovery-expr>((postfix))) + 4) % sizeof(void *))) & (sizeof(void *) - 1)) + (<recovery-expr>((postfix)) ? sizeof(raxNode *) : sizeof(raxNode *) * <recovery-expr>((postfix))) + ((<recovery-expr>((postfix)) && !<recovery-expr>((postfix))) * sizeof(void *))) - sizeof(raxNode *) - ((<recovery-expr>((postfix)) && !<recovery-expr>((postfix))) ? sizeof(void *) : 0)));\n            memcpy(cp, &next, sizeof (next));\n            <recovery-expr>(rax)++;\n        } else {\n            postfix = next;\n        }\n        raxNode **splitchild = ((raxNode **)(((char *)(splitnode)) + (sizeof(raxNode) + <recovery-expr>((splitnode)) + ((sizeof(void *) - (((<recovery-expr>((splitnode))) + 4) % sizeof(void *))) & (sizeof(void *) - 1)) + (<recovery-expr>((splitnode)) ? sizeof(raxNode *) : sizeof(raxNode *) * <recovery-expr>((splitnode))) + ((<recovery-expr>((splitnode)) && !<recovery-expr>((splitnode))) * sizeof(void *))) - sizeof(raxNode *) - ((<recovery-expr>((splitnode)) && !<recovery-expr>((splitnode))) ? sizeof(void *) : 0)));\n        memcpy(splitchild, &postfix, sizeof (postfix));\n        zfree(h);\n        h = splitnode;\n    } else if (<recovery-expr>()) {\n        ;\n        raxNode *postfix;\n        raxNode *trimmed;\n        if (<recovery-expr>()) {\n            zfree(postfix);\n            zfree(trimmed);\n            return 0;\n        }\n        raxNode **childfield = ((raxNode **)(((char *)(h)) + (sizeof(raxNode) + <recovery-expr>((h)) + ((sizeof(void *) - (((<recovery-expr>((h))) + 4) % sizeof(void *))) & (sizeof(void *) - 1)) + (<recovery-expr>((h)) ? sizeof(raxNode *) : sizeof(raxNode *) * <recovery-expr>((h))) + ((<recovery-expr>((h)) && !<recovery-expr>((h))) * sizeof(void *))) - sizeof(raxNode *) - ((<recovery-expr>((h)) && !<recovery-expr>((h))) ? sizeof(void *) : 0)));\n        raxNode *next;\n        memcpy(&next, childfield, sizeof (next));\n        <recovery-expr>(postfix) = 1;\n        <recovery-expr>(postfix) = 0;\n        raxSetData(postfix, data);\n        raxNode **cp = ((raxNode **)(((char *)(postfix)) + (sizeof(raxNode) + <recovery-expr>((postfix)) + ((sizeof(void *) - (((<recovery-expr>((postfix))) + 4) % sizeof(void *))) & (sizeof(void *) - 1)) + (<recovery-expr>((postfix)) ? sizeof(raxNode *) : sizeof(raxNode *) * <recovery-expr>((postfix))) + ((<recovery-expr>((postfix)) && !<recovery-expr>((postfix))) * sizeof(void *))) - sizeof(raxNode *) - ((<recovery-expr>((postfix)) && !<recovery-expr>((postfix))) ? sizeof(void *) : 0)));\n        memcpy(cp, &next, sizeof (next));\n        <recovery-expr>(rax)++;\n        <recovery-expr>(trimmed) = j;\n        <recovery-expr>(trimmed) = j > 1;\n        <recovery-expr>(trimmed) = 0;\n        <recovery-expr>(trimmed) = 0;\n        memcpy(trimmed->data, h->data, j);\n        memcpy(parentlink, &trimmed, sizeof (trimmed));\n        if (<recovery-expr>(h)) {\n            void *aux = raxGetData(h);\n            raxSetData(trimmed, aux);\n        }\n        cp = ((raxNode **)(((char *)(trimmed)) + (sizeof(raxNode) + <recovery-expr>((trimmed)) + ((sizeof(void *) - (((<recovery-expr>((trimmed))) + 4) % sizeof(void *))) & (sizeof(void *) - 1)) + (<recovery-expr>((trimmed)) ? sizeof(raxNode *) : sizeof(raxNode *) * <recovery-expr>((trimmed))) + ((<recovery-expr>((trimmed)) && !<recovery-expr>((trimmed))) * sizeof(void *))) - sizeof(raxNode *) - ((<recovery-expr>((trimmed)) && !<recovery-expr>((trimmed))) ? sizeof(void *) : 0)));\n        memcpy(cp, &postfix, sizeof (postfix));\n        <recovery-expr>(rax)++;\n        zfree(h);\n        return 1;\n    }\n    while (<recovery-expr>())\n        {\n            raxNode *child;\n            if (<recovery-expr>()) {\n                ;\n                raxNode *newh;\n                if (<recovery-expr>())\n                    goto oom;\n                h = newh;\n                memcpy(parentlink, &h, sizeof (h));\n                parentlink = ((raxNode **)(((char *)(h)) + (sizeof(raxNode) + <recovery-expr>((h)) + ((sizeof(void *) - (((<recovery-expr>((h))) + 4) % sizeof(void *))) & (sizeof(void *) - 1)) + (<recovery-expr>((h)) ? sizeof(raxNode *) : sizeof(raxNode *) * <recovery-expr>((h))) + ((<recovery-expr>((h)) && !<recovery-expr>((h))) * sizeof(void *))) - sizeof(raxNode *) - ((<recovery-expr>((h)) && !<recovery-expr>((h))) ? sizeof(void *) : 0)));\n            } else {\n                ;\n                raxNode **new_parentlink;\n                raxNode *newh;\n                if (<recovery-expr>())\n                    goto oom;\n                h = newh;\n                memcpy(parentlink, &h, sizeof (h));\n                parentlink = new_parentlink;\n            }\n            <recovery-expr>(rax)++;\n            h = child;\n        }\n    raxNode *newh = raxReallocForData(h, data);\n    if (<recovery-expr>())\n        goto oom;\n    h = newh;\n    if (!<recovery-expr>(h))\n        <recovery-expr>(rax)++;\n    raxSetData(h, data);\n    memcpy(parentlink, &h, sizeof (h));\n    return 1;\n  oom:\n    if (<recovery-expr>(h) == 0) {\n        <recovery-expr>(h) = 1;\n        <recovery-expr>(h) = 1;\n        <recovery-expr>(rax)++;\n    }\n    return 0;\n}\n"
        }
    ],
    "total": 42,
    "visited": 1
}
