{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/sentinel.c#3759:1#sentinelCommand",
            "gotos": 15,
            "labels": 1,
            "body": "{\n    if (c->argc == 2 && !strcasecmp(c->argv[1]->ptr, \"help\")) {\n        const char *help[];\n        addReplyHelp(c, help);\n    } else if (!strcasecmp(c->argv[1]->ptr, \"masters\")) {\n        if (c->argc != 2)\n            goto numargserr;\n        addReplyDictOfRedisInstances(c, sentinel.masters);\n    } else if (!strcasecmp(c->argv[1]->ptr, \"master\")) {\n        sentinelRedisInstance *ri;\n        if (c->argc != 3)\n            goto numargserr;\n        if (<recovery-expr>())\n            return;\n        addReplySentinelRedisInstance(c, ri);\n    } else if (!strcasecmp(c->argv[1]->ptr, \"slaves\") || !strcasecmp(c->argv[1]->ptr, \"replicas\")) {\n        sentinelRedisInstance *ri;\n        if (c->argc != 3)\n            goto numargserr;\n        if (<recovery-expr>())\n            return;\n        addReplyDictOfRedisInstances(c, ri->slaves);\n    } else if (!strcasecmp(c->argv[1]->ptr, \"sentinels\")) {\n        sentinelRedisInstance *ri;\n        if (c->argc != 3)\n            goto numargserr;\n        if (<recovery-expr>())\n            return;\n        addReplyDictOfRedisInstances(c, ri->sentinels);\n    } else if (!strcasecmp(c->argv[1]->ptr, \"myid\") && c->argc == 2) {\n        addReplyBulkCBuffer(c, sentinel.myid, 40);\n    } else if (!strcasecmp(c->argv[1]->ptr, \"is-master-down-by-addr\")) {\n        sentinelRedisInstance *ri;\n        long long req_epoch;\n        char *leader;\n        long port;\n        int isdown = 0;\n        if (c->argc != 6)\n            goto numargserr;\n        if (<recovery-expr>())\n            return;\n        if (!sentinel.tilt && ri && (ri->flags & (1 << 3)) && (ri->flags & (1 << 0)))\n            isdown = 1;\n        if (ri && ri->flags & (1 << 0) && strcasecmp(c->argv[5]->ptr, \"*\")) {\n        }\n        addReplyArrayLen(c, 3);\n        addReply(c, isdown ? shared.cone : shared.czero);\n        addReplyBulkCString(c, leader ? leader : \"*\");\n        if (leader)\n            sdsfree(leader);\n    } else if (!strcasecmp(c->argv[1]->ptr, \"reset\")) {\n        if (c->argc != 3)\n            goto numargserr;\n        addReplyLongLong(c, sentinelResetMastersByPattern(c->argv[2]->ptr, (1 << 16)));\n    } else if (!strcasecmp(c->argv[1]->ptr, \"get-master-addr-by-name\")) {\n        sentinelRedisInstance *ri;\n        if (c->argc != 3)\n            goto numargserr;\n        ri = sentinelGetMasterByName(c->argv[2]->ptr);\n        if (<recovery-expr>()) {\n            addReplyNullArray(c);\n        } else {\n            sentinelAddr *addr = sentinelGetCurrentMasterAddress(ri);\n            addReplyArrayLen(c, 2);\n            addReplyBulkCString(c, announceSentinelAddr(addr));\n            addReplyBulkLongLong(c, addr->port);\n        }\n    } else if (!strcasecmp(c->argv[1]->ptr, \"failover\")) {\n        sentinelRedisInstance *ri;\n        if (c->argc != 3)\n            goto numargserr;\n        if (<recovery-expr>())\n            return;\n        if (ri->flags & (1 << 6)) {\n            addReplyError(c, \"-INPROG Failover already in progress\");\n            return;\n        }\n        if (<recovery-expr>()) {\n            addReplyError(c, \"-NOGOODSLAVE No suitable replica to promote\");\n            return;\n        }\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n            _serverLog(3, \"Executing user requested FAILOVER of '%s'\", ri->name);\n        } while (0);\n        sentinelStartFailover(ri);\n        ri->flags |= (1 << 11);\n        addReply(c, shared.ok);\n    } else if (!strcasecmp(c->argv[1]->ptr, \"pending-scripts\")) {\n        if (c->argc != 2)\n            goto numargserr;\n        sentinelPendingScriptsCommand(c);\n    } else if (!strcasecmp(c->argv[1]->ptr, \"monitor\")) {\n        sentinelRedisInstance *ri;\n        long quorum, port;\n        char ip[46];\n        if (c->argc != 6)\n            goto numargserr;\n        if (getLongFromObjectOrReply(c, c->argv[5], &quorum, \"Invalid quorum\") != 0)\n            return;\n        if (getLongFromObjectOrReply(c, c->argv[4], &port, \"Invalid port\") != 0)\n            return;\n        if (quorum <= 0) {\n            addReplyError(c, \"Quorum must be 1 or greater.\");\n            return;\n        }\n        if (<recovery-expr>()) {\n            addReplyError(c, \"Invalid IP address or hostname specified\");\n            return;\n        }\n        if (<recovery-expr>()) {\n            addReplyError(c, sentinelCheckCreateInstanceErrors((1 << 0)));\n        } else {\n            sentinelFlushConfigAndReply(c);\n            sentinelEvent(3, \"+monitor\", ri, \"%@ quorum %d\", ri->quorum);\n        }\n    } else if (!strcasecmp(c->argv[1]->ptr, \"flushconfig\")) {\n        if (c->argc != 2)\n            goto numargserr;\n        sentinelFlushConfigAndReply(c);\n        return;\n    } else if (!strcasecmp(c->argv[1]->ptr, \"remove\")) {\n        sentinelRedisInstance *ri;\n        if (c->argc != 3)\n            goto numargserr;\n        if (<recovery-expr>())\n            return;\n        sentinelEvent(3, \"-monitor\", ri, \"%@\");\n        dictDelete(sentinel.masters, c->argv[2]->ptr);\n        sentinelFlushConfigAndReply(c);\n    } else if (!strcasecmp(c->argv[1]->ptr, \"ckquorum\")) {\n        sentinelRedisInstance *ri;\n        int usable;\n        if (c->argc != 3)\n            goto numargserr;\n        if (<recovery-expr>())\n            return;\n        int result = sentinelIsQuorumReachable(ri, &usable);\n        if (result == 0) {\n            addReplySds(c, sdscatfmt(sdsempty(), \"+OK %i usable Sentinels. Quorum and failover authorization can be reached\\r\\n\", usable));\n        } else {\n            sds e = sdscatfmt(sdsempty(), \"-NOQUORUM %i usable Sentinels. \", usable);\n            if (result & (1 << 0))\n                e = sdscat(e, \"Not enough available Sentinels to reach the specified quorum for this master\");\n            if (result & (1 << 1)) {\n                if (result & (1 << 0))\n                    e = sdscat(e, \". \");\n                e = sdscat(e, \"Not enough available Sentinels to reach the majority and authorize a failover\");\n            }\n            addReplyErrorSds(c, e);\n        }\n    } else if (!strcasecmp(c->argv[1]->ptr, \"set\")) {\n        sentinelSetCommand(c);\n    } else if (!strcasecmp(c->argv[1]->ptr, \"config\")) {\n        if (c->argc < 3)\n            goto numargserr;\n        if (!strcasecmp(c->argv[2]->ptr, \"set\") && c->argc == 5)\n            sentinelConfigSetCommand(c);\n        else if (!strcasecmp(c->argv[2]->ptr, \"get\") && c->argc == 4)\n            sentinelConfigGetCommand(c);\n        else\n            addReplyError(c, \"Only SENTINEL CONFIG GET <option> / SET <option> <value> are supported.\");\n    } else if (!strcasecmp(c->argv[1]->ptr, \"info-cache\")) {\n        if (c->argc < 2)\n            goto numargserr;\n        mstime_t now = mstime();\n        dictType copy_keeper = instancesDictType;\n        dict *masters_local = sentinel.masters;\n        if (c->argc > 2) {\n            masters_local = dictCreate(&copy_keeper);\n            for (int i = 2; i < c->argc; i++) {\n                sentinelRedisInstance *ri;\n                ri = sentinelGetMasterByName(c->argv[i]->ptr);\n                if (!ri)\n                    continue;\n                dictAdd(masters_local, ri->name, ri);\n            }\n        }\n        addReplyArrayLen(c, ((masters_local)->ht_used[0] + (masters_local)->ht_used[1]) * 2);\n        dictIterator *di;\n        dictEntry *de;\n        di = dictGetIterator(masters_local);\n        while (<recovery-expr>())\n            {\n                sentinelRedisInstance *ri = (<recovery-expr>((de)).val);\n                addReplyBulkCBuffer(c, ri->name, strlen(ri->name));\n                addReplyArrayLen(c, ((ri->slaves)->ht_used[0] + (ri->slaves)->ht_used[1]) + 1);\n                addReplyArrayLen(c, 2);\n                addReplyLongLong(c, ri->info_refresh ? (now - ri->info_refresh) : 0);\n                if (ri->info)\n                    addReplyBulkCBuffer(c, ri->info, <recovery-expr>()(ri->info));\n                else\n                    addReplyNull(c);\n                dictIterator *sdi;\n                dictEntry *sde;\n                sdi = dictGetIterator(ri->slaves);\n                while (<recovery-expr>())\n                    {\n                        sentinelRedisInstance *sri = (<recovery-expr>((sde)).val);\n                        addReplyArrayLen(c, 2);\n                        addReplyLongLong(c, ri->info_refresh ? (now - sri->info_refresh) : 0);\n                        if (sri->info)\n                            addReplyBulkCBuffer(c, sri->info, <recovery-expr>()(sri->info));\n                        else\n                            addReplyNull(c);\n                    }\n                dictReleaseIterator(sdi);\n            }\n        dictReleaseIterator(di);\n        if (masters_local != sentinel.masters)\n            dictRelease(masters_local);\n    } else if (!strcasecmp(c->argv[1]->ptr, \"simulate-failure\")) {\n        int j;\n        sentinel.simfailure_flags = 0;\n        for (j = 2; j < c->argc; j++) {\n            if (!strcasecmp(c->argv[j]->ptr, \"crash-after-election\")) {\n                sentinel.simfailure_flags |= (1 << 0);\n                do {\n                    if (((3) & 255) < server.verbosity)\n                        break;\n                    _serverLog(3, \"Failure simulation: this Sentinel will crash after being successfully elected as failover leader\");\n                } while (0);\n            } else if (!strcasecmp(c->argv[j]->ptr, \"crash-after-promotion\")) {\n                sentinel.simfailure_flags |= (1 << 1);\n                do {\n                    if (((3) & 255) < server.verbosity)\n                        break;\n                    _serverLog(3, \"Failure simulation: this Sentinel will crash after promoting the selected replica to master\");\n                } while (0);\n            } else if (!strcasecmp(c->argv[j]->ptr, \"help\")) {\n                addReplyArrayLen(c, 2);\n                addReplyBulkCString(c, \"crash-after-election\");\n                addReplyBulkCString(c, \"crash-after-promotion\");\n                return;\n            } else {\n                addReplyError(c, \"Unknown failure simulation specified\");\n                return;\n            }\n        }\n        addReply(c, shared.ok);\n    } else if (!strcasecmp(c->argv[1]->ptr, \"debug\")) {\n        if (c->argc == 2)\n            addReplySentinelDebugInfo(c);\n        else\n            sentinelSetDebugConfigParameters(c);\n    } else {\n        addReplySubcommandSyntaxError(c);\n    }\n    return;\n  numargserr:\n    addReplyErrorArity(c);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/sentinel.c#3491:1#sentinelSetDebugConfigParameters",
            "gotos": 13,
            "labels": 1,
            "body": "{\n    int j;\n    int badarg = 0;\n    char *option;\n    for (j = 2; j < c->argc; j++) {\n        int moreargs = (c->argc - 1) - j;\n        option = c->argv[j]->ptr;\n        long long ll;\n        if (!strcasecmp(option, \"info-period\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            sentinel_info_period = ll;\n        } else if (!strcasecmp(option, \"ping-period\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            sentinel_ping_period = ll;\n        } else if (!strcasecmp(option, \"ask-period\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            sentinel_ask_period = ll;\n        } else if (!strcasecmp(option, \"publish-period\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            sentinel_publish_period = ll;\n        } else if (!strcasecmp(option, \"default-down-after\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            sentinel_default_down_after = ll;\n        } else if (!strcasecmp(option, \"tilt-trigger\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            sentinel_tilt_trigger = ll;\n        } else if (!strcasecmp(option, \"tilt-period\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            sentinel_tilt_period = ll;\n        } else if (!strcasecmp(option, \"slave-reconf-timeout\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            sentinel_slave_reconf_timeout = ll;\n        } else if (!strcasecmp(option, \"min-link-reconnect-period\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            sentinel_min_link_reconnect_period = ll;\n        } else if (!strcasecmp(option, \"default-failover-timeout\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            sentinel_default_failover_timeout = ll;\n        } else if (!strcasecmp(option, \"election-timeout\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            sentinel_election_timeout = ll;\n        } else if (!strcasecmp(option, \"script-max-runtime\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            sentinel_script_max_runtime = ll;\n        } else if (!strcasecmp(option, \"script-retry-delay\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            sentinel_script_retry_delay = ll;\n        } else {\n            addReplyErrorFormat(c, \"Unknown option or number of arguments for SENTINEL DEBUG '%s'\", option);\n            return;\n        }\n    }\n    addReply(c, shared.ok);\n    return;\n  badfmt:\n    addReplyErrorFormat(c, \"Invalid argument '%s' for SENTINEL DEBUG '%s'\", (char *)c->argv[badarg]->ptr, option);\n    return;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/sentinel.c#3186:1#sentinelConfigSetCommand",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    robj *o = c->argv[3];\n    robj *val = c->argv[4];\n    long long numval;\n    int drop_conns = 0;\n    if (!strcasecmp(o->ptr, \"resolve-hostnames\")) {\n        if ((numval = yesnotoi(val->ptr)) == -1)\n            goto badfmt;\n        sentinel.resolve_hostnames = numval;\n    } else if (!strcasecmp(o->ptr, \"announce-hostnames\")) {\n        if ((numval = yesnotoi(val->ptr)) == -1)\n            goto badfmt;\n        sentinel.announce_hostnames = numval;\n    } else if (!strcasecmp(o->ptr, \"announce-ip\")) {\n        if (sentinel.announce_ip)\n            sdsfree(sentinel.announce_ip);\n        sentinel.announce_ip = sdsnew(val->ptr);\n    } else if (!strcasecmp(o->ptr, \"announce-port\")) {\n        if (getLongLongFromObject(val, &numval) == -1 || numval < 0 || numval > 65535)\n            goto badfmt;\n        sentinel.announce_port = numval;\n    } else if (!strcasecmp(o->ptr, \"sentinel-user\")) {\n        sdsfree(sentinel.sentinel_auth_user);\n        drop_conns = 1;\n    } else if (!strcasecmp(o->ptr, \"sentinel-pass\")) {\n        sdsfree(sentinel.sentinel_auth_pass);\n        drop_conns = 1;\n    } else {\n        addReplyErrorFormat(c, \"Invalid argument '%s' to SENTINEL CONFIG SET\", (char *)o->ptr);\n        return;\n    }\n    sentinelFlushConfigAndReply(c);\n    if (drop_conns)\n        sentinelDropConnections();\n    return;\n  badfmt:\n    addReplyErrorFormat(c, \"Invalid value '%s' to SENTINEL CONFIG SET '%s'\", (char *)val->ptr, (char *)o->ptr);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/sentinel.c#2284:1#sentinelFlushConfig",
            "gotos": 4,
            "labels": 1,
            "body": "{\n    int fd = -1;\n    int saved_hz = server.hz;\n    int rewrite_status;\n    server.hz = 10;\n    rewrite_status = rewriteConfig(server.configfile, 0);\n    server.hz = saved_hz;\n    if (rewrite_status == -1)\n        goto werr;\n    if (<recovery-expr>())\n        goto werr;\n    if (fsync(fd) == -1)\n        goto werr;\n    if (<recovery-expr>())\n        goto werr;\n    do {\n        if (((2) & 255) < server.verbosity)\n            break;\n        _serverLog(2, \"Sentinel new configuration saved on disk\");\n    } while (0);\n    return 0;\n  werr:\n    do {\n        if (((3) & 255) < server.verbosity)\n            break;\n    } while (0);\n    if (fd != -1)\n        close(fd);\n    return -1;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/sentinel.c#1816:1#loadSentinelConfigFromQueue",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    const char *err;\n    listIter li;\n    listNode *ln;\n    int linenum = 0;\n    sds line;\n    unsigned int j;\n    if (<recovery-expr>())\n        return;\n    list *sentinel_configs[3] = {server.sentinel_config->pre_monitor_cfg, server.sentinel_config->monitor_cfg, server.sentinel_config->post_monitor_cfg};\n    for (j = 0; j < sizeof (sentinel_configs) / sizeof (sentinel_configs[0]); j++) {\n        listRewind(sentinel_configs[j], &li);\n        while ((ln = listNext(&li)))\n            {\n                struct sentinelLoadQueueEntry *entry = ln->value;\n                err = sentinelHandleConfiguration(entry->argv, entry->argc);\n                if (err) {\n                    linenum = entry->linenum;\n                    line = entry->line;\n                    goto loaderr;\n                }\n            }\n    }\n    freeSentinelConfig();\n    return;\n  loaderr:\n    ;\n    exit(1);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/sentinel.c#4236:1#sentinelSetCommand",
            "gotos": 11,
            "labels": 2,
            "body": "{\n    sentinelRedisInstance *ri;\n    int j, changes = 0;\n    int badarg = 0;\n    char *option;\n    int redacted;\n    if (<recovery-expr>())\n        return;\n    for (j = 3; j < c->argc; j++) {\n        int moreargs = (c->argc - 1) - j;\n        option = c->argv[j]->ptr;\n        long long ll;\n        int old_j = j;\n        redacted = 0;\n        if (!strcasecmp(option, \"down-after-milliseconds\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            ri->down_after_period = ll;\n            sentinelPropagateDownAfterPeriod(ri);\n            changes++;\n        } else if (!strcasecmp(option, \"failover-timeout\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            ri->failover_timeout = ll;\n            changes++;\n        } else if (!strcasecmp(option, \"parallel-syncs\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            ri->parallel_syncs = ll;\n            changes++;\n        } else if (!strcasecmp(option, \"notification-script\") && moreargs > 0) {\n            char *value = c->argv[++j]->ptr;\n            if (sentinel.deny_scripts_reconfig) {\n                addReplyError(c, \"Reconfiguration of scripts path is denied for security reasons. Check the deny-scripts-reconfig configuration directive in your Sentinel configuration\");\n                goto seterr;\n            }\n            if (<recovery-expr>()) {\n                addReplyError(c, \"Notification script seems non existing or non executable\");\n                goto seterr;\n            }\n            sdsfree(ri->notification_script);\n            changes++;\n        } else if (!strcasecmp(option, \"client-reconfig-script\") && moreargs > 0) {\n            char *value = c->argv[++j]->ptr;\n            if (sentinel.deny_scripts_reconfig) {\n                addReplyError(c, \"Reconfiguration of scripts path is denied for security reasons. Check the deny-scripts-reconfig configuration directive in your Sentinel configuration\");\n                goto seterr;\n            }\n            if (<recovery-expr>()) {\n                addReplyError(c, \"Client reconfiguration script seems non existing or non executable\");\n                goto seterr;\n            }\n            sdsfree(ri->client_reconfig_script);\n            changes++;\n        } else if (!strcasecmp(option, \"auth-pass\") && moreargs > 0) {\n            char *value = c->argv[++j]->ptr;\n            sdsfree(ri->auth_pass);\n            dropInstanceConnections(ri);\n            changes++;\n            redacted = 1;\n        } else if (!strcasecmp(option, \"auth-user\") && moreargs > 0) {\n            char *value = c->argv[++j]->ptr;\n            sdsfree(ri->auth_user);\n            dropInstanceConnections(ri);\n            changes++;\n        } else if (!strcasecmp(option, \"quorum\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll <= 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            ri->quorum = ll;\n            changes++;\n        } else if (!strcasecmp(option, \"rename-command\") && moreargs > 1) {\n            sds oldname = c->argv[++j]->ptr;\n            sds newname = c->argv[++j]->ptr;\n            if ((<recovery-expr>()(oldname) == 0) || (<recovery-expr>()(newname) == 0)) {\n                badarg = <recovery-expr>()(newname) ? j - 1 : j;\n                goto badfmt;\n            }\n            dictDelete(ri->renamed_commands, oldname);\n            if (!dictSdsKeyCaseCompare(ri->renamed_commands, oldname, newname)) {\n                oldname = sdsdup(oldname);\n                newname = sdsdup(newname);\n                dictAdd(ri->renamed_commands, oldname, newname);\n            }\n            changes++;\n        } else if (!strcasecmp(option, \"master-reboot-down-after-period\") && moreargs > 0) {\n            robj *o = c->argv[++j];\n            if (getLongLongFromObject(o, &ll) == -1 || ll < 0) {\n                badarg = j;\n                goto badfmt;\n            }\n            ri->master_reboot_down_after_period = ll;\n            changes++;\n        } else {\n            addReplyErrorFormat(c, \"Unknown option or number of arguments for SENTINEL SET '%s'\", option);\n            goto seterr;\n        }\n        int numargs = j - old_j + 1;\n        switch (numargs) {\n          case 2:\n            sentinelEvent(3, \"+set\", ri, \"%@ %s %s\", (char *)c->argv[old_j]->ptr, redacted ? \"******\" : (char *)c->argv[old_j + 1]->ptr);\n            break;\n          case 3:\n            sentinelEvent(3, \"+set\", ri, \"%@ %s %s %s\", (char *)c->argv[old_j]->ptr, (char *)c->argv[old_j + 1]->ptr, (char *)c->argv[old_j + 2]->ptr);\n            break;\n          default:\n            sentinelEvent(3, \"+set\", ri, \"%@ %s\", (char *)c->argv[old_j]->ptr);\n            break;\n        }\n    }\n    if (changes)\n        sentinelFlushConfigAndReply(c);\n    return;\n  badfmt:\n    addReplyErrorFormat(c, \"Invalid argument '%s' for SENTINEL SET '%s'\", (char *)c->argv[badarg]->ptr, option);\n  seterr:\n    if (changes)\n        sentinelFlushConfig();\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/sentinel.c#2864:1#sentinelProcessHelloMessage",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    int numtokens, port, removed, master_port;\n    char **token = <recovery-expr>()(hello, hello_len, \",\", 1, &numtokens);\n    sentinelRedisInstance *si, *master;\n    if (numtokens == 8) {\n        master = sentinelGetMasterByName(token[4]);\n        if (!master)\n            goto cleanup;\n        port = atoi(token[1]);\n        master_port = atoi(token[6]);\n        si = getSentinelRedisInstanceByAddrAndRunID(master->sentinels, token[0], port, token[2]);\n        if (!si) {\n            removed = removeMatchingSentinelFromMaster(master, token[2]);\n            if (removed) {\n                sentinelEvent(2, \"+sentinel-address-switch\", master, \"%@ ip %s port %d for %s\", token[0], port, token[2]);\n            } else {\n                sentinelRedisInstance *other;\n                if (other) {\n                    sentinelEvent(2, \"+sentinel-invalid-addr\", other, \"%@\");\n                    dictIterator *di;\n                    dictEntry *de;\n                    sds runid_obsolete = sdsnew(other->runid);\n                    di = dictGetIterator(sentinel.masters);\n                    while (<recovery-expr>())\n                        {\n                            sentinelRedisInstance *master = (<recovery-expr>((de)).val);\n                            removeMatchingSentinelFromMaster(master, runid_obsolete);\n                        }\n                    dictReleaseIterator(di);\n                    sdsfree(runid_obsolete);\n                }\n            }\n            si = createSentinelRedisInstance(token[2], (1 << 2), token[0], port, master->quorum, master);\n            if (si) {\n                if (!removed)\n                    sentinelEvent(2, \"+sentinel\", si, \"%@\");\n                si->runid = sdsnew(token[2]);\n                sentinelTryConnectionSharing(si);\n                if (removed)\n                    sentinelUpdateSentinelAddressInAllMasters(si);\n                sentinelFlushConfig();\n            }\n        }\n        if (<recovery-expr>()) {\n            sentinelFlushConfig();\n            sentinelEvent(3, \"+new-epoch\", master, \"%llu\", (unsigned long long)<recovery-expr>(sentinel));\n        }\n        if (<recovery-expr>()) {\n            if (master_port != master->addr->port || !sentinelAddrEqualsHostname(master->addr, token[5])) {\n                sentinelAddr *old_addr;\n                sentinelEvent(3, \"+config-update-from\", si, \"%@\");\n                sentinelEvent(3, \"+switch-master\", master, \"%s %s %d %s %d\", master->name, announceSentinelAddr(master->addr), master->addr->port, token[5], master_port);\n                old_addr = dupSentinelAddr(master->addr);\n                sentinelResetMasterAndChangeAddress(master, token[5], master_port);\n                sentinelCallClientReconfScript(master, (1 << 18), \"start\", old_addr, master->addr);\n                releaseSentinelAddr(old_addr);\n            }\n        }\n        if (si)\n            si->last_hello_time = mstime();\n    }\n  cleanup:\n    sdsfreesplitres(token, numtokens);\n}\n"
        }
    ],
    "total": 174,
    "visited": 7
}
