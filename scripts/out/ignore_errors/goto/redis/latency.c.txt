{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/latency.c#642:1#latencyCommand",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    struct latencyTimeSeries *ts;\n    if (!strcasecmp(c->argv[1]->ptr, \"history\") && c->argc == 3) {\n        ts = dictFetchValue(server.latency_events, c->argv[2]->ptr);\n        if (<recovery-expr>()) {\n            addReplyArrayLen(c, 0);\n        } else {\n            latencyCommandReplyWithSamples(c, ts);\n        }\n    } else if (!strcasecmp(c->argv[1]->ptr, \"graph\") && c->argc == 3) {\n        sds graph;\n        dictEntry *de;\n        char *event;\n        de = dictFind(server.latency_events, c->argv[2]->ptr);\n        if (<recovery-expr>())\n            goto nodataerr;\n        ts = (<recovery-expr>((de)).val);\n        event = ((de)->key);\n        graph = latencyCommandGenSparkeline(event, ts);\n        addReplyVerbatim(c, graph, <recovery-expr>()(graph), \"txt\");\n        sdsfree(graph);\n    } else if (!strcasecmp(c->argv[1]->ptr, \"latest\") && c->argc == 2) {\n        latencyCommandReplyWithLatestEvents(c);\n    } else if (!strcasecmp(c->argv[1]->ptr, \"doctor\") && c->argc == 2) {\n        sds report = createLatencyReport();\n        addReplyVerbatim(c, report, <recovery-expr>()(report), \"txt\");\n        sdsfree(report);\n    } else if (!strcasecmp(c->argv[1]->ptr, \"reset\") && c->argc >= 2) {\n        if (c->argc == 2) {\n        } else {\n            int j, resets = 0;\n            for (j = 2; j < c->argc; j++)\n                resets += latencyResetEvent(c->argv[j]->ptr);\n            addReplyLongLong(c, resets);\n        }\n    } else if (!strcasecmp(c->argv[1]->ptr, \"histogram\") && c->argc >= 2) {\n        if (c->argc == 2) {\n            int command_with_data = 0;\n            void *replylen = addReplyDeferredLen(c);\n            latencyAllCommandsFillCDF(c, server.commands, &command_with_data);\n            setDeferredMapLen(c, replylen, command_with_data);\n        } else {\n            latencySpecificCommandsFillCDF(c);\n        }\n    } else if (!strcasecmp(c->argv[1]->ptr, \"help\") && c->argc == 2) {\n        const char *help[];\n        addReplyHelp(c, help);\n    } else {\n        addReplySubcommandSyntaxError(c);\n    }\n    return;\n  nodataerr:\n    addReplyErrorFormat(c, \"No samples available for event '%s'\", (char *)c->argv[2]->ptr);\n}\n"
        }
    ],
    "total": 65,
    "visited": 1
}
