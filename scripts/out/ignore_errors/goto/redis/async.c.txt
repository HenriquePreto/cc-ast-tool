{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/deps/hiredis/async.c#756:1#__redisAsyncCommand",
            "gotos": 4,
            "labels": 1,
            "body": "{\n    redisContext *c = &(<recovery-expr>(ac));\n    redisCallback cb;\n    struct dict *cbdict;\n    dictEntry *de;\n    redisCallback *existcb;\n    int pvariant, hasnext;\n    const char *cstr, *astr;\n    const char *p;\n    hisds sname;\n    int ret;\n    if (c->flags & (4 | 8))\n        return -1;\n    cb.fn = fn;\n    cb.privdata = privdata;\n    cb.pending_subs = 1;\n    hasnext = (p[0] == '$');\n    pvariant = (tolower(cstr[0]) == 'p') ? 1 : 0;\n    cstr += pvariant;\n    if (hasnext && strncasecmp(cstr, \"subscribe\\r\\n\", 11) == 0) {\n        c->flags |= 32;\n        while (<recovery-expr>())\n            {\n                if (<recovery-expr>())\n                    goto oom;\n                if (pvariant)\n                    cbdict = ac->sub.patterns;\n                else\n                    cbdict = ac->sub.channels;\n                de = dictFind(cbdict, sname);\n                if (<recovery-expr>()) {\n                    existcb = ((de)->val);\n                    cb.pending_subs = existcb->pending_subs + 1;\n                }\n                ret = dictReplace(cbdict, sname, &cb);\n                if (ret == 0)\n                    hi_sdsfree(sname);\n            }\n    } else if (strncasecmp(cstr, \"unsubscribe\\r\\n\", 13) == 0) {\n        if (!(c->flags & 32))\n            return -1;\n    } else if (strncasecmp(cstr, \"monitor\\r\\n\", 9) == 0) {\n        c->flags |= 64;\n        if (__redisPushCallback(&ac->replies, &cb) != 0)\n            goto oom;\n    } else {\n        if (c->flags & 32) {\n            if (__redisPushCallback(&ac->sub.replies, &cb) != 0)\n                goto oom;\n        } else {\n            if (__redisPushCallback(&ac->replies, &cb) != 0)\n                goto oom;\n        }\n    }\n    <recovery-expr>()(c, cmd, <recovery-expr>());\n    do {\n        refreshTimeout(ac);\n        if ((ac)->ev.addWrite)\n            (ac)->ev.addWrite((ac)->ev.data);\n    } while (0);\n    return 0;\n  oom:\n    __redisSetError(&(<recovery-expr>(ac)), 5, \"Out of memory\");\n    __redisAsyncCopyError(ac);\n    return -1;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/deps/hiredis/async.c#106:1#redisAsyncInitialize",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    redisAsyncContext *ac;\n    dict *channels, *patterns;\n    if (<recovery-expr>())\n        goto oom;\n    if (<recovery-expr>())\n        goto oom;\n    ac = <recovery-expr>()(c, sizeof(redisAsyncContext));\n    if (<recovery-expr>())\n        goto oom;\n    c = &(<recovery-expr>(ac));\n    c->flags &= ~2;\n    ac->err = 0;\n    ac->sub.channels = channels;\n    ac->sub.patterns = patterns;\n    return ac;\n  oom:\n    if (channels)\n        dictRelease(channels);\n    if (patterns)\n        dictRelease(patterns);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/deps/hiredis/async.c#411:1#__redisGetSubscribeCallback",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    redisContext *c = &(<recovery-expr>(ac));\n    dict *callbacks;\n    redisCallback *cb;\n    dictEntry *de;\n    int pvariant;\n    char *stype;\n    hisds sname;\n    if ((reply->type == 2 && !(c->flags & 256) && <recovery-expr>(reply) >= 3) || reply->type == 12) {\n        assert(reply->element[0]->type == 1);\n        stype = reply->element[0]->str;\n        pvariant = (tolower(stype[0]) == 'p') ? 1 : 0;\n        if (pvariant)\n            callbacks = ac->sub.patterns;\n        else\n            callbacks = ac->sub.channels;\n        assert(reply->element[1]->type == 1);\n        sname = <recovery-expr>()(reply->element[1]->str, <recovery-expr>(reply->element[1]));\n        if (<recovery-expr>())\n            goto oom;\n        de = dictFind(callbacks, sname);\n        if (<recovery-expr>()) {\n            cb = ((de)->val);\n            if (strcasecmp(stype + pvariant, \"subscribe\") == 0) {\n                cb->pending_subs -= 1;\n            }\n            memcpy(dstcb, cb, sizeof (*dstcb));\n            if (strcasecmp(stype + pvariant, \"unsubscribe\") == 0) {\n                if (cb->pending_subs == 0)\n                    dictDelete(callbacks, sname);\n                assert(reply->element[2]->type == 3);\n                if (reply->element[2]->integer == 0 && ((ac->sub.channels)->used) == 0 && ((ac->sub.patterns)->used) == 0) {\n                    c->flags &= ~32;\n                    redisCallback cb;\n                    while (__redisShiftCallback(&ac->sub.replies, &cb) == 0)\n                        {\n                            __redisPushCallback(&ac->replies, &cb);\n                        }\n                }\n            }\n        }\n        hi_sdsfree(sname);\n    } else {\n        __redisShiftCallback(&ac->sub.replies, dstcb);\n    }\n    return 0;\n  oom:\n    __redisSetError(&(<recovery-expr>(ac)), 5, \"Out of memory\");\n    return -1;\n}\n"
        }
    ],
    "total": 68,
    "visited": 3
}
