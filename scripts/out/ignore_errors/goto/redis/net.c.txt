{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/deps/hiredis/net.c#363:1#_redisContextConnectTcp",
            "gotos": 4,
            "labels": 3,
            "body": "{\n    redisFD s;\n    int rv, n;\n    char _port[6];\n    struct addrinfo hints, *servinfo, *bservinfo, *p, *b;\n    int blocking = (c->flags & 1);\n    int reuseaddr = (c->flags & 128);\n    int reuses = 0;\n    long timeout_msec = -1;\n    c->connection_type = REDIS_CONN_TCP;\n    c->tcp.port = port;\n    if (c->tcp.host != addr) {\n        hi_free(c->tcp.host);\n        c->tcp.host = hi_strdup(addr);\n        if (<recovery-expr>())\n            goto oom;\n    }\n    if (timeout) {\n        if (redisContextUpdateConnectTimeout(c, timeout) == -1)\n            goto oom;\n    } else {\n        hi_free(c->connect_timeout);\n    }\n    if (redisContextTimeoutMsec(c, &timeout_msec) != 0) {\n        __redisSetError(c, 1, \"Invalid timeout specified\");\n        goto error;\n    }\n    if (<recovery-expr>()) {\n        hi_free(c->tcp.source_addr);\n    } else if (c->tcp.source_addr != source_addr) {\n        hi_free(c->tcp.source_addr);\n        c->tcp.source_addr = hi_strdup(source_addr);\n    }\n    snprintf(_port, 6, \"%d\", port);\n    memset(&<recovery-expr>(), 0, sizeof (<recovery-expr>()));\n    if ((rv = getaddrinfo(c->tcp.host, _port, &<recovery-expr>(), &servinfo)) != 0) {\n        if ((rv = getaddrinfo(addr, _port, &<recovery-expr>(), &servinfo)) != 0) {\n            __redisSetError(c, 2, gai_strerror(rv));\n            return -1;\n        }\n    }\n    if (<recovery-expr>()) {\n        char buf[128];\n        __redisSetError(c, 2, buf);\n        goto error;\n    }\n  oom:\n    __redisSetError(c, 5, \"Out of memory\");\n  error:\n    rv = -1;\n  end:\n    if (servinfo) {\n        freeaddrinfo(servinfo);\n    }\n    return rv;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/deps/hiredis/net.c#547:1#redisContextConnectUnix",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    int blocking = (c->flags & 1);\n    struct sockaddr_un *sa;\n    long timeout_msec = -1;\n    if (<recovery-expr>())\n        return -1;\n    if (redisSetBlocking(c, 0) != 0)\n        return -1;\n    c->connection_type = REDIS_CONN_UNIX;\n    if (c->unix_sock.path != path) {\n        hi_free(c->unix_sock.path);\n        c->unix_sock.path = hi_strdup(path);\n        if (<recovery-expr>())\n            goto oom;\n    }\n    if (timeout) {\n        if (redisContextUpdateConnectTimeout(c, timeout) == -1)\n            goto oom;\n    } else {\n        hi_free(c->connect_timeout);\n    }\n    if (redisContextTimeoutMsec(c, &timeout_msec) != 0)\n        return -1;\n    if (c->saddr)\n        hi_free(c->saddr);\n    if (<recovery-expr>())\n        goto oom;\n    strncpy(<recovery-expr>(sa), path, sizeof (<recovery-expr>(sa)) - 1);\n    if (<recovery-expr>()) {\n        if (<recovery-expr>()) {\n        } else {\n            if (redisContextWaitReady(c, timeout_msec) != 0)\n                return -1;\n        }\n    }\n    if (blocking && redisSetBlocking(c, 1) != 0)\n        return -1;\n    c->flags |= 2;\n    return 0;\n  oom:\n    __redisSetError(c, 5, \"Out of memory\");\n    return -1;\n}\n"
        }
    ],
    "total": 31,
    "visited": 2
}
