{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/config.c#2905:1#setConfigLatencyTrackingInfoPercentilesOutputOption",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    ((void)config);\n    zfree(server.latency_tracking_info_percentiles);\n    server.latency_tracking_info_percentiles_len = argc;\n    if (argc == 1 && <recovery-expr>()(argv[0]) == 0)\n        server.latency_tracking_info_percentiles_len = 0;\n    else\n        server.latency_tracking_info_percentiles = <recovery-expr>()(sizeof(double) * argc);\n    for (int j = 0; j < server.latency_tracking_info_percentiles_len; j++) {\n        double percentile;\n        if (!<recovery-expr>()(argv[j], <recovery-expr>()(argv[j]), &percentile)) {\n            *err = \"Invalid latency-tracking-info-percentiles parameters\";\n            goto configerr;\n        }\n        if (percentile > 100. || percentile < 0.) {\n            *err = \"latency-tracking-info-percentiles parameters should sit between [0.0,100.0]\";\n            goto configerr;\n        }\n        server.latency_tracking_info_percentiles[j] = percentile;\n    }\n    return 1;\n  configerr:\n    zfree(server.latency_tracking_info_percentiles);\n    server.latency_tracking_info_percentiles_len = 0;\n    return 0;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/config.c#790:1#configSetCommand",
            "gotos": 4,
            "labels": 2,
            "body": "{\n    const char *errstr;\n    const char *invalid_arg_name;\n    const char *err_arg_name;\n    standardConfig **set_configs;\n    list *module_configs_apply;\n    const char **config_names;\n    sds *new_values;\n    sds *old_values;\n    apply_fn *apply_fns;\n    int config_count, i, j;\n    int invalid_args = 0, deny_loading_error = 0;\n    int *config_map_fns;\n    if (c->argc & 1) {\n        addReplyErrorObject(c, shared.syntaxerr);\n        return;\n    }\n    config_count = (c->argc - 2) / 2;\n    module_configs_apply = listCreate();\n    set_configs = <recovery-expr>()(sizeof(standardConfig *) * config_count);\n    config_names = <recovery-expr>()(sizeof(char *) * config_count);\n    new_values = <recovery-expr>()(sizeof(sds *) * config_count);\n    old_values = <recovery-expr>()(sizeof(sds *) * config_count);\n    apply_fns = <recovery-expr>()(sizeof(apply_fn) * config_count);\n    config_map_fns = <recovery-expr>()(sizeof(int) * config_count);\n    for (i = 0; i < config_count; i++) {\n        standardConfig *config = lookupConfig(c->argv[2 + i * 2]->ptr);\n        if (!config) {\n            if (!invalid_args) {\n                invalid_arg_name = c->argv[2 + i * 2]->ptr;\n                invalid_args = 1;\n            }\n            continue;\n        }\n        if (config->flags & (1ULL << 1)) {\n            redactClientCommandArgument(c, 2 + i * 2 + 1);\n        }\n        if (invalid_args)\n            continue;\n        if (config->flags & (1ULL << 0) || (config->flags & (1ULL << 5) && !allowProtectedAction(server.enable_protected_configs, c))) {\n            errstr = (config->flags & (1ULL << 0)) ? \"can't set immutable config\" : \"can't set protected config\";\n            err_arg_name = c->argv[2 + i * 2]->ptr;\n            invalid_args = 1;\n            continue;\n        }\n        if (<recovery-expr>(server) && config->flags & (1ULL << 6)) {\n            deny_loading_error = 1;\n            invalid_args = 1;\n            continue;\n        }\n        for (j = 0; j < i; j++) {\n            if (set_configs[j] == config) {\n                errstr = \"duplicate parameter\";\n                err_arg_name = c->argv[2 + i * 2]->ptr;\n                invalid_args = 1;\n                break;\n            }\n        }\n        set_configs[i] = config;\n        config_names[i] = config->name;\n        new_values[i] = c->argv[2 + i * 2 + 1]->ptr;\n    }\n    if (invalid_args)\n        goto err;\n    for (i = 0; i < config_count; i++)\n        old_values[i] = set_configs[i]->interface.get(set_configs[i]);\n    for (i = 0; i < config_count; i++) {\n        int res = performInterfaceSet(set_configs[i], new_values[i], &errstr);\n        if (!res) {\n            err_arg_name = set_configs[i]->name;\n            goto err;\n        } else if (res == 1) {\n            if (set_configs[i]->flags & (1ULL << 8)) {\n                addModuleConfigApply(module_configs_apply, set_configs[i]->privdata);\n            } else if (set_configs[i]->interface.apply) {\n                int exists = 0;\n                if (!exists) {\n                    apply_fns[j] = set_configs[i]->interface.apply;\n                    config_map_fns[j] = i;\n                }\n            }\n        }\n    }\n    if (!moduleConfigApplyConfig(module_configs_apply, &errstr, &err_arg_name)) {\n        serverLogRaw(3, \"Failed applying new module configuration. Restoring previous settings.\");\n        restoreBackupConfig(set_configs, old_values, config_count, apply_fns, module_configs_apply);\n        goto err;\n    }\n    RedisModuleConfigChangeV1 cc = <recovery-expr>({.num_changes = config_count, .config_names = config_names});\n    <recovery-expr>()(16, 0, &cc);\n    addReply(c, shared.ok);\n    goto end;\n  err:\n    if (deny_loading_error) {\n        addReplyErrorObject(c, shared.loadingerr);\n    } else if (invalid_arg_name) {\n        addReplyErrorFormat(c, \"Unknown option or number of arguments for CONFIG SET - '%s'\", invalid_arg_name);\n    } else if (errstr) {\n        addReplyErrorFormat(c, \"CONFIG SET failed (possibly related to argument '%s') - %s\", err_arg_name, errstr);\n    } else {\n        addReplyErrorFormat(c, \"CONFIG SET failed (possibly related to argument '%s')\", err_arg_name);\n    }\n  end:\n    zfree(set_configs);\n    zfree(config_names);\n    zfree(new_values);\n    for (i = 0; i < config_count; i++)\n        sdsfree(old_values[i]);\n    zfree(old_values);\n    zfree(apply_fns);\n    zfree(config_map_fns);\n    listRelease(module_configs_apply);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/config.c#444:1#loadServerConfigFromString",
            "gotos": 12,
            "labels": 1,
            "body": "{\n    deprecatedConfig deprecated_configs[];\n    char buf[1024];\n    const char *err;\n    int linenum = 0, totlines, i;\n    sds *lines;\n    reading_config_file = 1;\n    lines = <recovery-expr>()(config, strlen(config), \"\\n\", 1, &totlines);\n    for (i = 0; i < totlines; i++) {\n        sds *argv;\n        int argc;\n        linenum = i + 1;\n        lines[i] = sdstrim(lines[i], \" \\t\\r\\n\");\n        if (lines[i][0] == '#' || lines[i][0] == '\\x00')\n            continue;\n        argv = sdssplitargs(lines[i], &argc);\n        if (<recovery-expr>()) {\n            err = \"Unbalanced quotes in configuration line\";\n            goto loaderr;\n        }\n        if (argc == 0) {\n            sdsfreesplitres(argv, argc);\n            continue;\n        }\n        sdstolower(argv[0]);\n        standardConfig *config = lookupConfig(argv[0]);\n        if (config) {\n            if (!(config->flags & (1ULL << 3)) && argc != 2) {\n                err = \"wrong number of arguments\";\n                goto loaderr;\n            }\n            if ((config->flags & (1ULL << 3)) && argc == 2 && <recovery-expr>()(argv[1])) {\n                sds *new_argv;\n                int new_argc;\n                new_argv = sdssplitargs(argv[1], &new_argc);\n                if (!config->interface.set(config, new_argv, new_argc, &err)) {\n                    goto loaderr;\n                }\n                sdsfreesplitres(new_argv, new_argc);\n            } else {\n                if (!config->interface.set(config, &argv[1], argc - 1, &err)) {\n                    goto loaderr;\n                }\n            }\n            sdsfreesplitres(argv, argc);\n            continue;\n        } else {\n            int match = 0;\n            if (match) {\n                sdsfreesplitres(argv, argc);\n                continue;\n            }\n        }\n        if (!strcasecmp(argv[0], \"include\") && argc == 2) {\n        } else if (!strcasecmp(argv[0], \"rename-command\") && argc == 3) {\n            struct redisCommand *cmd = lookupCommandBySds(argv[1]);\n            int retval;\n            if (!cmd) {\n                err = \"No such command in rename-command\";\n                goto loaderr;\n            }\n            retval = dictDelete(server.commands, argv[1]);\n            ((retval == 0) ? (void)0 : (_serverAssert(\"retval == DICT_OK\", \"/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/config.c\", 545) , __builtin_unreachable()));\n            if (<recovery-expr>()(argv[2]) != 0) {\n                sds copy = sdsdup(argv[2]);\n                retval = dictAdd(server.commands, copy, cmd);\n                if (retval != 0) {\n                    sdsfree(copy);\n                    err = \"Target command name already exists\";\n                    goto loaderr;\n                }\n            }\n        } else if (!strcasecmp(argv[0], \"user\") && argc >= 2) {\n            int argc_err;\n            if (ACLAppendUserForLoading(argv, argc, &argc_err) == -1) {\n                const char *errmsg = ACLSetUserStringError();\n                snprintf(buf, sizeof (buf), \"Error in user declaration '%s': %s\", argv[argc_err], errmsg);\n                err = buf;\n                goto loaderr;\n            }\n        } else if (!strcasecmp(argv[0], \"loadmodule\") && argc >= 2) {\n            queueLoadModule(argv[1], &argv[2], argc - 2);\n        } else if (strchr(argv[0], '.')) {\n            if (argc < 2) {\n                err = \"Module config specified without value\";\n                goto loaderr;\n            }\n            sds name = sdsdup(argv[0]);\n            sds val = sdsdup(argv[1]);\n            for (int i = 2; i < argc; i++)\n                val = sdscatfmt(val, \" %S\", argv[i]);\n            if (!dictReplace(server.module_configs_queue, name, val))\n                sdsfree(name);\n        } else if (!strcasecmp(argv[0], \"sentinel\")) {\n            if (argc != 1) {\n                if (!server.sentinel_mode) {\n                    err = \"sentinel directive while not in sentinel mode\";\n                    goto loaderr;\n                }\n                queueSentinelConfig(argv + 1, argc - 1, linenum, lines[i]);\n            }\n        } else {\n            err = \"Bad directive or wrong number of arguments\";\n            goto loaderr;\n        }\n        sdsfreesplitres(argv, argc);\n    }\n    if (server.logfile[0] != '\\x00') {\n        if (<recovery-expr>()) {\n            goto loaderr;\n        }\n    }\n    if (server.cluster_enabled && server.masterhost) {\n        err = \"replicaof directive not allowed in cluster mode\";\n        goto loaderr;\n    }\n    if (server.config_hz < 1)\n        server.config_hz = 1;\n    if (server.config_hz > 500)\n        server.config_hz = 500;\n    sdsfreesplitres(lines, totlines);\n    reading_config_file = 0;\n    return;\n  loaderr:\n    ;\n    if (i < totlines) {\n    }\n    exit(1);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/config.c#1663:1#rewriteConfigOverwriteFile",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    int fd = -1;\n    int retval = -1;\n    char tmp_conffile;\n    const char *tmp_suffix = \".XXXXXX\";\n    int offset(int *);\n    int old_errno;\n    int tmp_path_len = snprintf(<recovery-expr>(), sizeof (<recovery-expr>()), \"%s%s\", configfile, tmp_suffix);\n    if (tmp_path_len <= 0 || (unsigned int)tmp_path_len >= sizeof (<recovery-expr>())) {\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n            _serverLog(3, \"Config file full path is too long\");\n        } while (0);\n        return retval;\n    }\n    fd = mkstemp(<recovery-expr>());\n    if (fd == -1) {\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n        } while (0);\n        return retval;\n    }\n    while (<recovery-expr>() < <recovery-expr>()(content))\n        {\n            if (<recovery-expr>()) {\n                if (<recovery-expr>())\n                    continue;\n                do {\n                    if (((3) & 255) < server.verbosity)\n                        break;\n                } while (0);\n                goto cleanup;\n            }\n        }\n    if (fsync(fd))\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n        } while (0);\n    else if (fchmod(fd, 420 & ~<recovery-expr>(server)) == -1)\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n        } while (0);\n    else if (rename(<recovery-expr>(), configfile) == -1)\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n        } while (0);\n    else if (fsyncFileDir(configfile) == -1)\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n        } while (0);\n    else {\n        retval = 0;\n        do {\n            if (((0) & 255) < server.verbosity)\n                break;\n            _serverLog(0, \"Rewritten config file (%s) successfully\", configfile);\n        } while (0);\n    }\n  cleanup:\n    ;\n    close(fd);\n    if (retval)\n        unlink(<recovery-expr>());\n    return retval;\n}\n"
        }
    ],
    "total": 176,
    "visited": 4
}
