{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/hyperloglog.c#655:1#hllSparseSet",
            "gotos": 4,
            "labels": 2,
            "body": "{\n    struct hllhdr *hdr;\n    long first, span;\n    long is_zero = 0, is_xzero = 0, is_val = 0, runlen = 0;\n    if (<recovery-expr>() > 32)\n        goto promote;\n    o->ptr = <recovery-expr>()(o->ptr, 3);\n    first = 0;\n    span = 0;\n    while (<recovery-expr>())\n        {\n            long oplen;\n            oplen = 1;\n            if (<recovery-expr>()) {\n            } else if (<recovery-expr>()) {\n            } else {\n                oplen = 2;\n            }\n            if (index <= first + span - 1)\n                break;\n            first += span;\n        }\n    if (<recovery-expr>())\n        return -1;\n    if (<recovery-expr>()) {\n        is_zero = 1;\n    } else if (<recovery-expr>()) {\n        is_xzero = 1;\n    } else {\n        is_val = 1;\n    }\n    if (is_val) {\n        if (<recovery-expr>())\n            return 0;\n        if (runlen == 1) {\n            do {\n            } while (0);\n            goto updated;\n        }\n    }\n    if (is_zero && runlen == 1) {\n        do {\n        } while (0);\n        goto updated;\n    }\n    int last = first + span - 1;\n    int len;\n    if (is_zero || is_xzero) {\n        if (index != first) {\n            len = index - first;\n            if (len > 64) {\n                do {\n                    int _l = (len) - 1;\n                } while (0);\n            } else {\n                do {\n                } while (0);\n            }\n        }\n        do {\n        } while (0);\n        if (index != last) {\n            len = last - index;\n            if (len > 64) {\n                do {\n                    int _l = (len) - 1;\n                } while (0);\n            } else {\n                do {\n                } while (0);\n            }\n        }\n    } else {\n        int curval;\n        if (index != first) {\n            len = index - first;\n            do {\n            } while (0);\n        }\n        do {\n        } while (0);\n        if (index != last) {\n            len = last - index;\n            do {\n            } while (0);\n        }\n    }\n    int seqlen;\n    int oldlen = is_xzero ? 2 : 1;\n    int deltalen = seqlen - oldlen;\n    if (deltalen > 0 && <recovery-expr>()(o->ptr) + deltalen > <recovery-expr>(server))\n        goto promote;\n    <recovery-expr>()(o->ptr, deltalen);\n  updated:\n    ;\n    int scanlen = 5;\n    while (<recovery-expr>())\n        {\n            if (<recovery-expr>()) {\n                continue;\n            } else if (<recovery-expr>()) {\n                continue;\n            }\n            if (<recovery-expr>()) {\n                int v1;\n                int v2;\n                if (v1 == v2) {\n                    int len;\n                    if (len <= 4) {\n                        do {\n                        } while (0);\n                        <recovery-expr>()(o->ptr, -1);\n                        continue;\n                    }\n                }\n            }\n        }\n    hdr = o->ptr;\n    <recovery-expr>((hdr))[7] |= (1 << 7);\n    return 1;\n  promote:\n    if (hllSparseToDense(o) == -1)\n        return -1;\n    hdr = o->ptr;\n    int dense_retval = <recovery-expr>()(<recovery-expr>(hdr), index, <recovery-expr>());\n    ((dense_retval == 1) ? (void)0 : (_serverAssert(\"dense_retval == 1\", \"/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/hyperloglog.c\", 894) , __builtin_unreachable()));\n    return dense_retval;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/hyperloglog.c#1396:1#pfselftestCommand",
            "gotos": 4,
            "labels": 1,
            "body": "{\n    unsigned int j, i;\n    sds bitcounters;\n    struct hllhdr *hdr = (struct hllhdr *)bitcounters, *hdr2;\n    robj *o;\n    for (j = 0; j < 1000; j++) {\n        for (i = 0; i < (1 << 14); i++) {\n            unsigned int r = rand() & ((1 << 6) - 1);\n            do {\n                unsigned long _byte = (i) * 6 / 8;\n                unsigned long _fb = (i) * 6 & 7;\n                unsigned long _fb8 = 8 - _fb;\n                unsigned long _v = (r);\n            } while (0);\n        }\n        for (i = 0; i < (1 << 14); i++) {\n            unsigned int val;\n            do {\n                unsigned long _byte = i * 6 / 8;\n                unsigned long _fb = i * 6 & 7;\n                unsigned long _fb8 = 8 - _fb;\n                unsigned long b0;\n                unsigned long b1;\n                val = ((b0 >> _fb) | (b1 << _fb8)) & ((1 << 6) - 1);\n            } while (0);\n            if (<recovery-expr>()) {\n                goto cleanup;\n            }\n        }\n    }\n    memset(<recovery-expr>(hdr), 0, (sizeof(struct hllhdr) + (((1 << 14) * 6 + 7) / 8)) - sizeof(struct hllhdr));\n    o = createHLLObject();\n    double relerr = 1.04 / sqrt((1 << 14));\n    for (j = 1; j <= 10000000; j++) {\n        if (<recovery-expr>()) {\n            hdr2 = o->ptr;\n            if (<recovery-expr>(hdr2) != 1) {\n                addReplyError(c, \"TESTFAILED sparse encoding not used\");\n                goto cleanup;\n            }\n        }\n        if (<recovery-expr>()) {\n            addReplyError(c, \"TESTFAILED dense/sparse disagree\");\n            goto cleanup;\n        }\n        if (<recovery-expr>()) {\n            if (<recovery-expr>()) {\n                goto cleanup;\n            }\n        }\n    }\n    addReply(c, shared.ok);\n  cleanup:\n    sdsfree(bitcounters);\n    if (o)\n        decrRefCount(o);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/hyperloglog.c#1150:1#isHLLObjectOrReply",
            "gotos": 5,
            "labels": 1,
            "body": "{\n    struct hllhdr *hdr;\n    if (checkType(c, o, 0))\n        return -1;\n    if (!(o->encoding == 0 || o->encoding == 8))\n        goto invalid;\n    if (<recovery-expr>()(o) < sizeof (*hdr))\n        goto invalid;\n    hdr = o->ptr;\n    if (hdr->magic[0] != 'H' || hdr->magic[1] != 'Y' || hdr->magic[2] != 'L' || hdr->magic[3] != 'L')\n        goto invalid;\n    if (<recovery-expr>(hdr) > 1)\n        goto invalid;\n    if (<recovery-expr>(hdr) == 0 && <recovery-expr>()(o) != (sizeof(struct hllhdr) + (((1 << 14) * 6 + 7) / 8)))\n        goto invalid;\n    return 0;\n  invalid:\n    addReplyError(c, \"-WRONGTYPE Key is not a valid HyperLogLog string value.\");\n    return -1;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/hyperloglog.c#1505:1#pfdebugCommand",
            "gotos": 4,
            "labels": 1,
            "body": "{\n    char *cmd = c->argv[1]->ptr;\n    struct hllhdr *hdr;\n    robj *o;\n    int j;\n    o = lookupKeyWrite(c->db, c->argv[2]);\n    if (<recovery-expr>()) {\n        addReplyError(c, \"The specified key does not exist\");\n        return;\n    }\n    if (isHLLObjectOrReply(c, o) != 0)\n        return;\n    o = dbUnshareStringValue(c->db, c->argv[2], o);\n    hdr = o->ptr;\n    if (!strcasecmp(cmd, \"getreg\")) {\n        if (c->argc != 3)\n            goto arityerr;\n        if (<recovery-expr>(hdr) == 1) {\n            if (hllSparseToDense(o) == -1) {\n                addReplyError(c, invalid_hll_err);\n                return;\n            }\n            server.dirty++;\n        }\n        hdr = o->ptr;\n        addReplyArrayLen(c, (1 << 14));\n        for (j = 0; j < (1 << 14); j++) {\n            do {\n                unsigned long _byte = j * 6 / 8;\n                unsigned long _fb = j * 6 & 7;\n                unsigned long _fb8 = 8 - _fb;\n                unsigned long b0;\n                unsigned long b1;\n            } while (0);\n        }\n    } else if (!strcasecmp(cmd, \"decode\")) {\n        if (c->argc != 3)\n            goto arityerr;\n        sds decoded = sdsempty();\n        if (<recovery-expr>(hdr) != 1) {\n            sdsfree(decoded);\n            addReplyError(c, \"HLL encoding is not sparse\");\n            return;\n        }\n        while (<recovery-expr>())\n            {\n                int runlen, regval;\n                if (<recovery-expr>()) {\n                    decoded = sdscatprintf(decoded, \"z:%d \", runlen);\n                } else if (<recovery-expr>()) {\n                    decoded = sdscatprintf(decoded, \"Z:%d \", runlen);\n                } else {\n                    decoded = sdscatprintf(decoded, \"v:%d,%d \", regval, runlen);\n                }\n            }\n        decoded = sdstrim(decoded, \" \");\n        addReplyBulkCBuffer(c, decoded, <recovery-expr>()(decoded));\n        sdsfree(decoded);\n    } else if (!strcasecmp(cmd, \"encoding\")) {\n        char *encodingstr[2] = {\"dense\", \"sparse\"};\n        if (c->argc != 3)\n            goto arityerr;\n        addReplyStatus(c, encodingstr[<recovery-expr>(hdr)]);\n    } else if (!strcasecmp(cmd, \"todense\")) {\n        int conv = 0;\n        if (c->argc != 3)\n            goto arityerr;\n        if (<recovery-expr>(hdr) == 1) {\n            if (hllSparseToDense(o) == -1) {\n                addReplyError(c, invalid_hll_err);\n                return;\n            }\n            conv = 1;\n            server.dirty++;\n        }\n        addReply(c, conv ? shared.cone : shared.czero);\n    } else {\n        addReplyErrorFormat(c, \"Unknown PFDEBUG subcommand '%s'\", cmd);\n    }\n    return;\n  arityerr:\n    addReplyErrorFormat(c, \"Wrong number of arguments for the '%s' subcommand\", cmd);\n}\n"
        }
    ],
    "total": 72,
    "visited": 4
}
