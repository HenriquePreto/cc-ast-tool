{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/deps/hiredis/hiredis.c#970:1#redisBufferWrite",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    if (c->err)\n        return -1;\n    if (<recovery-expr>()(c->obuf) > 0) {\n        if (<recovery-expr>()) {\n            return -1;\n        } else if (<recovery-expr>()) {\n            if (<recovery-expr>()) {\n                hi_sdsfree(c->obuf);\n                c->obuf = hi_sdsempty();\n                if (<recovery-expr>())\n                    goto oom;\n            } else {\n                if (<recovery-expr>())\n                    goto oom;\n            }\n        }\n    }\n    if (<recovery-expr>())\n        *done = (<recovery-expr>()(c->obuf) == 0);\n    return 0;\n  oom:\n    __redisSetError(c, 5, \"Out of memory\");\n    return -1;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/deps/hiredis/hiredis.c#312:1#redisvFormatCommand",
            "gotos": 19,
            "labels": 5,
            "body": "{\n    const char *c = format;\n    char *cmd;\n    int pos;\n    hisds curarg, newarg;\n    int touched = 0;\n    char **curargv, **newargv;\n    int argc = 0;\n    int totlen = 0;\n    int error_type = 0;\n    int j;\n    if (<recovery-expr>())\n        return -1;\n    curarg = hi_sdsempty();\n    if (<recovery-expr>())\n        return -1;\n    while (*c != '\\x00')\n        {\n            if (*c != '%' || c[1] == '\\x00') {\n                if (*c == ' ') {\n                    if (touched) {\n                        newargv = <recovery-expr>()(curargv, sizeof(char *) * (argc + 1));\n                        if (<recovery-expr>())\n                            goto memory_err;\n                        curargv = newargv;\n                        curargv[argc++] = curarg;\n                        totlen += <recovery-expr>()(<recovery-expr>()(curarg));\n                        curarg = hi_sdsempty();\n                        if (<recovery-expr>())\n                            goto memory_err;\n                        touched = 0;\n                    }\n                } else {\n                    newarg = <recovery-expr>()(curarg, c, 1);\n                    if (<recovery-expr>())\n                        goto memory_err;\n                    curarg = newarg;\n                    touched = 1;\n                }\n            } else {\n                char *arg;\n                newarg = curarg;\n                switch (c[1]) {\n                  case 's':\n                    ;\n                    break;\n                  case 'b':\n                    ;\n                    break;\n                  case '%':\n                    newarg = hi_sdscat(curarg, \"%\");\n                    break;\n                  default:\n                    {\n                        static const char intfmts[] = \"diouxX\";\n                        static const char flags[] = \"#0-+ \";\n                        char _format[16];\n                        const char *_p = c + 1;\n                        while (<recovery-expr>())\n                            _p++;\n                        while (*_p != '\\x00' && isdigit(*_p))\n                            _p++;\n                        if (*_p == '.') {\n                            _p++;\n                            while (*_p != '\\x00' && isdigit(*_p))\n                                _p++;\n                        }\n                        if (<recovery-expr>()) {\n                            goto fmt_valid;\n                        }\n                        if (<recovery-expr>()) {\n                            goto fmt_valid;\n                        }\n                        if (_p[0] == 'h' && _p[1] == 'h') {\n                            _p += 2;\n                            if (<recovery-expr>()) {\n                                goto fmt_valid;\n                            }\n                            goto fmt_invalid;\n                        }\n                        if (_p[0] == 'h') {\n                            _p += 1;\n                            if (<recovery-expr>()) {\n                                goto fmt_valid;\n                            }\n                            goto fmt_invalid;\n                        }\n                        if (_p[0] == 'l' && _p[1] == 'l') {\n                            _p += 2;\n                            if (<recovery-expr>()) {\n                                goto fmt_valid;\n                            }\n                            goto fmt_invalid;\n                        }\n                        if (_p[0] == 'l') {\n                            _p += 1;\n                            if (<recovery-expr>()) {\n                                goto fmt_valid;\n                            }\n                            goto fmt_invalid;\n                        }\n                      fmt_invalid:\n                        ;\n                        goto format_err;\n                      fmt_valid:\n                        ;\n                        if (<recovery-expr>()) {\n                            c = _p - 1;\n                        }\n                        break;\n                    }\n                }\n                if (<recovery-expr>())\n                    goto memory_err;\n                curarg = newarg;\n                touched = 1;\n                c++;\n            }\n            c++;\n        }\n    if (touched) {\n        newargv = <recovery-expr>()(curargv, sizeof(char *) * (argc + 1));\n        if (<recovery-expr>())\n            goto memory_err;\n        curargv = newargv;\n        curargv[argc++] = curarg;\n        totlen += <recovery-expr>()(<recovery-expr>()(curarg));\n    } else {\n        hi_sdsfree(curarg);\n    }\n    totlen += 1 + <recovery-expr>()(argc) + 2;\n    cmd = <recovery-expr>()(totlen + 1);\n    if (<recovery-expr>())\n        goto memory_err;\n    pos = sprintf(cmd, \"*%d\\r\\n\", argc);\n    for (j = 0; j < argc; j++) {\n        pos += sprintf(cmd + pos, \"$%zu\\r\\n\", <recovery-expr>()(curargv[j]));\n        memcpy(cmd + pos, curargv[j], <recovery-expr>()(curargv[j]));\n        pos += <recovery-expr>()(curargv[j]);\n        hi_sdsfree(curargv[j]);\n        cmd[pos++] = '\\r';\n        cmd[pos++] = '\\n';\n    }\n    assert(pos == totlen);\n    cmd[pos] = '\\x00';\n    hi_free(curargv);\n    *target = cmd;\n    return totlen;\n  format_err:\n    error_type = -2;\n    goto cleanup;\n  memory_err:\n    error_type = -1;\n    goto cleanup;\n  cleanup:\n    if (curargv) {\n        while (argc--)\n            hi_sdsfree(curargv[argc]);\n        hi_free(curargv);\n    }\n    hi_sdsfree(curarg);\n    hi_free(cmd);\n    return error_type;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/deps/hiredis/hiredis.c#124:1#createStringObject",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    redisReply *r, *parent;\n    char *buf;\n    r = createReplyObject(task->type);\n    assert(task->type == 6 || task->type == 5 || task->type == 1 || task->type == 14 || task->type == 13);\n    if (task->type == 14) {\n        buf = <recovery-expr>()(<recovery-expr>() - 4 + 1);\n        if (<recovery-expr>())\n            goto oom;\n        memcpy(r->vtype, str, 3);\n        r->vtype[3] = '\\x00';\n        memcpy(buf, str + 4, <recovery-expr>() - 4);\n        buf[<recovery-expr>() - 4] = '\\x00';\n        <recovery-expr>(r) = <recovery-expr>() - 4;\n    } else {\n        buf = <recovery-expr>()(<recovery-expr>() + 1);\n        if (<recovery-expr>())\n            goto oom;\n        memcpy(buf, str, <recovery-expr>());\n        buf[<recovery-expr>()] = '\\x00';\n        <recovery-expr>(r) = <recovery-expr>();\n    }\n    r->str = buf;\n    if (task->parent) {\n        parent = task->parent->obj;\n        assert(parent->type == 2 || parent->type == 9 || parent->type == 10 || parent->type == 12);\n        parent->element[task->idx] = r;\n    }\n    return r;\n  oom:\n    freeReplyObject(r);\n}\n"
        }
    ],
    "total": 62,
    "visited": 3
}
