{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/deps/lua/src/lstrlib.c#365:1#match",
            "gotos": 7,
            "labels": 2,
            "body": "{\n  init:\n    switch (*p) {\n      case '(':\n        {\n            if (*(p + 1) == ')')\n                return start_capture(ms, s, p + 2, (-2));\n            else\n                return start_capture(ms, s, p + 1, (-1));\n        }\n      case ')':\n        {\n            return end_capture(ms, s, p + 1);\n        }\n      case '%':\n        {\n            switch (*(p + 1)) {\n              case 'b':\n                {\n                    s = matchbalance(ms, s, p + 2);\n                    p += 4;\n                    goto init;\n                }\n              case 'f':\n                {\n                    const char *ep;\n                    char previous;\n                    p += 2;\n                    if (*p != '[')\n                        luaL_error(ms->L, \"missing '[' after '%%f' in pattern\");\n                    ep = classend(ms, p);\n                    previous = (s == ms->src_init) ? '\\x00' : *(s - 1);\n                    p = ep;\n                    goto init;\n                }\n              default:\n                {\n                    if (isdigit(((unsigned char)(*(p + 1))))) {\n                        s = match_capture(ms, s, ((unsigned char)(*(p + 1))));\n                        p += 2;\n                        goto init;\n                    }\n                    goto dflt;\n                }\n            }\n        }\n      case '\\x00':\n        {\n            return s;\n        }\n      case '$':\n        {\n            if (*(p + 1) == '\\x00')\n                ;\n            else\n                goto dflt;\n        }\n      default:\n      dflt:\n        {\n            const char *ep = classend(ms, p);\n            int m = s < ms->src_end && singlematch(((unsigned char)(*s)), p, ep);\n            switch (*ep) {\n              case '?':\n                {\n                    const char *res;\n                    if (<recovery-expr>())\n                        return res;\n                    p = ep + 1;\n                    goto init;\n                }\n              case '*':\n                {\n                    return max_expand(ms, s, p, ep);\n                }\n              case '+':\n                {\n                }\n              case '-':\n                {\n                    return min_expand(ms, s, p, ep);\n                }\n              default:\n                {\n                    s++;\n                    p = ep;\n                    goto init;\n                }\n            }\n        }\n    }\n}\n"
        }
    ],
    "total": 42,
    "visited": 1
}
