{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/functions.c#715:1#functionRestoreCommand",
            "gotos": 5,
            "labels": 1,
            "body": "{\n    if (c->argc > 4) {\n        addReplySubcommandSyntaxError(c);\n        return;\n    }\n    restorePolicy restore_replicy = restorePolicy_Append;\n    sds data = c->argv[2]->ptr;\n    int data_len(int *);\n    rio payload;\n    sds err;\n    if (c->argc == 4) {\n        const char *restore_policy_str = c->argv[3]->ptr;\n        if (!strcasecmp(restore_policy_str, \"append\")) {\n            restore_replicy = restorePolicy_Append;\n        } else if (!strcasecmp(restore_policy_str, \"replace\")) {\n            restore_replicy = restorePolicy_Replace;\n        } else if (!strcasecmp(restore_policy_str, \"flush\")) {\n            restore_replicy = restorePolicy_Flush;\n        } else {\n            addReplyError(c, \"Wrong restore policy given, value should be either FLUSH, APPEND or REPLACE.\");\n            return;\n        }\n    }\n    if (<recovery-expr>()) {\n        addReplyError(c, \"DUMP payload version or checksum are wrong\");\n        return;\n    }\n    functionsLibCtx *functions_lib_ctx = functionsLibCtxCreate();\n    rioInitWithBuffer(&payload, data);\n    while (<recovery-expr>() - <recovery-expr>(payload).buffer.pos > 10)\n        {\n            int type;\n            if ((type = rdbLoadType(&payload)) == -1) {\n                err = sdsnew(\"can not read data type\");\n                goto load_error;\n            }\n            if (type == 246) {\n                err = sdsnew(\"Pre-GA function format not supported\");\n                goto load_error;\n            }\n            if (type != 245) {\n                err = sdsnew(\"given type is not a function\");\n                goto load_error;\n            }\n            if (<recovery-expr>()) {\n                if (!err) {\n                    err = sdsnew(\"failed loading the given functions payload\");\n                }\n                goto load_error;\n            }\n        }\n    if (restore_replicy == restorePolicy_Flush) {\n        functionsLibCtxSwapWithCurrent(functions_lib_ctx);\n    } else {\n        if (libraryJoin(curr_functions_lib_ctx, functions_lib_ctx, restore_replicy == restorePolicy_Replace, &err) != 0) {\n            goto load_error;\n        }\n    }\n    server.dirty++;\n  load_error:\n    if (err) {\n        addReplyErrorSds(c, err);\n    } else {\n        addReply(c, shared.ok);\n    }\n    if (functions_lib_ctx) {\n        functionsLibCtxFree(functions_lib_ctx);\n    }\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/functions.c#331:1#libraryJoin",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    int ret = -1;\n    dictIterator *iter;\n    list *old_libraries_list;\n    dictEntry *entry;\n    iter = dictGetIterator(functions_lib_ctx_src->libraries);\n    while ((entry = dictNext(iter)))\n        {\n            functionLibInfo *li = (<recovery-expr>((entry)).val);\n            functionLibInfo *old_li = dictFetchValue(functions_lib_ctx_dst->libraries, li->name);\n            if (old_li) {\n                if (!replace) {\n                    *err = sdscatfmt(sdsempty(), \"Library %s already exists\", li->name);\n                    goto done;\n                } else {\n                    if (!old_libraries_list) {\n                        old_libraries_list = listCreate();\n                        ((old_libraries_list)->free = ((void (*)(void *))engineLibraryFree));\n                    }\n                    libraryUnlink(functions_lib_ctx_dst, old_li);\n                    listAddNodeTail(old_libraries_list, old_li);\n                }\n            }\n        }\n    dictReleaseIterator(iter);\n    iter = dictGetIterator(functions_lib_ctx_src->functions);\n    while ((entry = dictNext(iter)))\n        {\n            functionInfo *fi = (<recovery-expr>((entry)).val);\n            if (dictFetchValue(functions_lib_ctx_dst->functions, fi->name)) {\n                *err = sdscatfmt(sdsempty(), \"Function %s already exists\", fi->name);\n                goto done;\n            }\n        }\n    dictReleaseIterator(iter);\n    iter = dictGetIterator(functions_lib_ctx_src->libraries);\n    while ((entry = dictNext(iter)))\n        {\n            functionLibInfo *li = (<recovery-expr>((entry)).val);\n            libraryLink(functions_lib_ctx_dst, li);\n            do {\n            } while (0);\n        }\n    dictReleaseIterator(iter);\n    functionsLibCtxClear(functions_lib_ctx_src);\n    if (old_libraries_list) {\n        listRelease(old_libraries_list);\n    }\n    ret = 0;\n  done:\n    if (iter)\n        dictReleaseIterator(iter);\n    if (old_libraries_list) {\n        while (((old_libraries_list)->len) > 0)\n            {\n                listNode *head = ((old_libraries_list)->head);\n                functionLibInfo *li = ((head)->value);\n                libraryLink(functions_lib_ctx_dst, li);\n                listDelNode(old_libraries_list, head);\n            }\n        listRelease(old_libraries_list);\n    }\n    return ret;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/functions.c#957:1#functionsCreateWithLibraryCtx",
            "gotos": 6,
            "labels": 1,
            "body": "{\n    dictIterator *iter;\n    dictEntry *entry;\n    functionLibInfo *new_li;\n    functionLibInfo *old_li;\n    functionsLibMataData md = {0};\n    if (functionExtractLibMetaData(code, &md, err) != 0) {\n    }\n    if (functionsVerifyName(md.name)) {\n        *err = sdsnew(\"Library names can only contain letters, numbers, or underscores(_) and must be at least one character long\");\n        goto error;\n    }\n    engineInfo *ei = dictFetchValue(engines, md.engine);\n    if (!ei) {\n        *err = sdscatfmt(sdsempty(), \"Engine '%S' not found\", md.engine);\n        goto error;\n    }\n    engine *engine = ei->engine;\n    old_li = dictFetchValue(lib_ctx->libraries, md.name);\n    if (old_li && !replace) {\n        *err = sdscatfmt(sdsempty(), \"Library '%S' already exists\", md.name);\n        goto error;\n    }\n    if (old_li) {\n        libraryUnlink(lib_ctx, old_li);\n    }\n    new_li = engineLibraryCreate(md.name, ei, code);\n    if (engine->create(engine->engine_ctx, new_li, md.code, err) != 0) {\n        goto error;\n    }\n    if (((new_li->functions)->ht_used[0] + (new_li->functions)->ht_used[1]) == 0) {\n        *err = sdsnew(\"No functions registered\");\n        goto error;\n    }\n    iter = dictGetIterator(new_li->functions);\n    while ((entry = dictNext(iter)))\n        {\n            functionInfo *fi = (<recovery-expr>((entry)).val);\n            if (dictFetchValue(lib_ctx->functions, fi->name)) {\n                *err = sdscatfmt(sdsempty(), \"Function %s already exists\", fi->name);\n                goto error;\n            }\n        }\n    dictReleaseIterator(iter);\n    libraryLink(lib_ctx, new_li);\n    if (old_li) {\n        engineLibraryFree(old_li);\n    }\n    sds loaded_lib_name = md.name;\n    functionFreeLibMetaData(&md);\n    return loaded_lib_name;\n  error:\n    if (iter)\n        dictReleaseIterator(iter);\n    if (new_li)\n        engineLibraryFree(new_li);\n    if (old_li)\n        libraryLink(lib_ctx, old_li);\n    functionFreeLibMetaData(&md);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/functions.c#886:1#functionExtractLibMetaData",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    sds name;\n    sds desc;\n    sds engine;\n    sds code;\n    if (strncmp(payload, \"#!\", 2) != 0) {\n        *err = sdsnew(\"Missing library metadata\");\n        return -1;\n    }\n    char *shebang_end = strchr(payload, '\\n');\n    if (<recovery-expr>()) {\n        *err = sdsnew(\"Invalid library metadata\");\n        return -1;\n    }\n    int shebang_len(int *);\n    sds shebang = <recovery-expr>()(payload, <recovery-expr>());\n    int numparts;\n    sds *parts = sdssplitargs(shebang, &numparts);\n    sdsfree(shebang);\n    if (!parts || numparts == 0) {\n        *err = sdsnew(\"Invalid library metadata\");\n        sdsfreesplitres(parts, numparts);\n        return -1;\n    }\n    engine = sdsdup(parts[0]);\n    <recovery-expr>()(engine, 2, -1);\n    for (int i = 1; i < numparts; ++i) {\n        sds part = parts[i];\n        if (strncasecmp(part, \"name=\", 5) == 0) {\n            if (name) {\n                *err = sdscatfmt(sdsempty(), \"Invalid metadata value, name argument was given multiple times\");\n                goto error;\n            }\n            name = sdsdup(part);\n            <recovery-expr>()(name, 5, -1);\n            continue;\n        }\n        *err = sdscatfmt(sdsempty(), \"Invalid metadata value given: %s\", part);\n        goto error;\n    }\n    if (!name) {\n        *err = sdsnew(\"Library name was not given\");\n        goto error;\n    }\n    sdsfreesplitres(parts, numparts);\n    md->name = name;\n    md->code = <recovery-expr>()(shebang_end, <recovery-expr>()(payload) - <recovery-expr>());\n    md->engine = engine;\n    return 0;\n  error:\n    if (name)\n        sdsfree(name);\n    if (desc)\n        sdsfree(desc);\n    if (engine)\n        sdsfree(engine);\n    if (code)\n        sdsfree(code);\n    sdsfreesplitres(parts, numparts);\n    return -1;\n}\n"
        }
    ],
    "total": 93,
    "visited": 4
}
