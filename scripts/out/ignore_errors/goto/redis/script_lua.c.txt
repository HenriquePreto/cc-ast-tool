{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/script_lua.c#840:1#luaRedisGenericCommand",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    int j;\n    scriptRunCtx *rctx = <recovery-expr>()(<recovery-expr>(), \"__RUN_CTX__\");\n    ((rctx) ? (void)0 : (_serverAssert(\"rctx\", \"/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/script_lua.c\", 843) , __builtin_unreachable()));\n    sds err;\n    client *c = rctx->c;\n    sds reply;\n    int argc;\n    robj **argv = <recovery-expr>()(<recovery-expr>(), &argc);\n    if (<recovery-expr>()) {\n        return raise_error ? <recovery-expr>()(<recovery-expr>()) : 1;\n    }\n    static int inuse = 0;\n    if (inuse) {\n        char *recursion_warning = \"luaRedisGenericCommand() recursive call detected. Are you doing funny stuff with Lua debug hooks?\";\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n            _serverLog(3, \"%s\", recursion_warning);\n        } while (0);\n        <recovery-expr>()(<recovery-expr>(), recursion_warning);\n        return 1;\n    }\n    inuse++;\n    if (ldbIsEnabled()) {\n        sds cmdlog = sdsnew(\"<redis>\");\n        for (j = 0; j < c->argc; j++) {\n            if (j == 10) {\n                cmdlog = sdscatprintf(cmdlog, \" ... (%d more)\", c->argc - j - 1);\n                break;\n            } else {\n                cmdlog = <recovery-expr>()(cmdlog, \" \", 1);\n                cmdlog = sdscatsds(cmdlog, c->argv[j]->ptr);\n            }\n        }\n        ldbLog(cmdlog);\n    }\n    scriptCall(rctx, argv, argc, &err);\n    if (err) {\n        <recovery-expr>()(<recovery-expr>(), err);\n        sdsfree(err);\n        lua_pushstring(<recovery-expr>(), \"ignore_error_stats_update\");\n        lua_pushboolean(<recovery-expr>(), 1);\n        lua_settable(<recovery-expr>(), -3);\n        goto cleanup;\n    }\n    if (<recovery-expr>()) {\n        c->buf[c->bufpos] = '\\x00';\n        reply = c->buf;\n        c->bufpos = 0;\n    } else {\n        reply = <recovery-expr>()(c->buf, c->bufpos);\n        c->bufpos = 0;\n        while (((c->reply)->len))\n            {\n                clientReplyBlock *o = ((((c->reply)->head))->value);\n                reply = <recovery-expr>()(reply, o->buf, <recovery-expr>(o));\n                listDelNode(c->reply, ((c->reply)->head));\n            }\n    }\n    if (raise_error && reply[0] != '-')\n        raise_error = 0;\n    <recovery-expr>()(<recovery-expr>(), reply);\n    if (ldbIsEnabled())\n        ldbLogRedisReply(reply);\n    if (reply != c->buf)\n        sdsfree(reply);\n    c->reply_bytes = 0;\n  cleanup:\n    freeClientArgv(c);\n    inuse--;\n    if (raise_error) {\n        return <recovery-expr>()(<recovery-expr>());\n    }\n    return 1;\n}\n"
        }
    ],
    "total": 104,
    "visited": 1
}
