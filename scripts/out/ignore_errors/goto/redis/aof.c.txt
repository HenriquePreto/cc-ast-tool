{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/aof.c#2353:1#rewriteAppendOnlyFile",
            "gotos": 5,
            "labels": 1,
            "body": "{\n    rio aof;\n    char tmpfile[256];\n    snprintf(tmpfile, 256, \"temp-rewriteaof-%d.aof\", (int)getpid());\n    if (<recovery-expr>()) {\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n        } while (0);\n        return -1;\n    }\n    if (server.aof_rewrite_incremental_fsync)\n        <recovery-expr>()(&aof, (1024 * 1024 * 4));\n    startSaving((1 << 0));\n    if (server.aof_use_rdb_preamble) {\n        int error;\n        if (<recovery-expr>()) {\n            goto werr;\n        }\n    } else {\n        if (rewriteAppendOnlyFileRio(&aof) == -1)\n            goto werr;\n    }\n    if (<recovery-expr>())\n        goto werr;\n    if (<recovery-expr>())\n        goto werr;\n    if (<recovery-expr>()) {\n        goto werr;\n    }\n    if (rename(tmpfile, filename) == -1) {\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n        } while (0);\n        unlink(tmpfile);\n        stopSaving(0);\n        return -1;\n    }\n    stopSaving(1);\n    return 0;\n  werr:\n    do {\n        if (((3) & 255) < server.verbosity)\n            break;\n    } while (0);\n    unlink(tmpfile);\n    stopSaving(0);\n    return -1;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/aof.c#2224:1#rewriteFunctions",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    dict *functions = functionsLibGet();\n    dictIterator *iter = dictGetIterator(functions);\n    dictEntry *entry;\n    while ((entry = dictNext(iter)))\n        {\n            functionLibInfo *li = (<recovery-expr>((entry)).val);\n            if (<recovery-expr>()(aof, \"*3\\r\\n\", 4) == 0)\n                goto werr;\n            char function_load[] = \"$8\\r\\nFUNCTION\\r\\n$4\\r\\nLOAD\\r\\n\";\n            if (<recovery-expr>()(aof, function_load, sizeof (function_load) - 1) == 0)\n                goto werr;\n            if (<recovery-expr>()(aof, li->code, <recovery-expr>()(li->code)) == 0)\n                goto werr;\n        }\n    dictReleaseIterator(iter);\n    return 1;\n  werr:\n    dictReleaseIterator(iter);\n    return 0;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/aof.c#1381:1#loadSingleAppendOnlyFile",
            "gotos": 18,
            "labels": 5,
            "body": "{\n    struct client *fakeClient;\n    struct stat64 sb;\n    int old_aof_state = server.aof_state;\n    long loops = 0;\n    int ret = 0;\n    sds aof_filepath = makePath(server.aof_dirname, filename);\n    if (<recovery-expr>()) {\n        int en;\n        if (<recovery-expr>()) {\n            do {\n                if (((3) & 255) < server.verbosity)\n                    break;\n                _serverLog(3, \"Fatal error: can't open the append log file %s for reading: %s\", filename, strerror(en));\n            } while (0);\n            sdsfree(aof_filepath);\n            return 3;\n        } else {\n            do {\n                if (((3) & 255) < server.verbosity)\n                    break;\n            } while (0);\n            sdsfree(aof_filepath);\n            return 1;\n        }\n    }\n    if (<recovery-expr>()) {\n        sdsfree(aof_filepath);\n        return 2;\n    }\n    server.aof_state = 0;\n    client *old_client = server.current_client;\n    fakeClient = server.current_client = createAOFClient();\n    char sig[5];\n    if (<recovery-expr>()) {\n        if (<recovery-expr>())\n            goto readerr;\n    } else {\n        rio rdb;\n        int old_style = !strcmp(filename, server.aof_filename);\n        if (old_style)\n            do {\n                if (((2) & 255) < server.verbosity)\n                    break;\n                _serverLog(2, \"Reading RDB preamble from AOF file...\");\n            } while (0);\n        else\n            do {\n                if (((2) & 255) < server.verbosity)\n                    break;\n                _serverLog(2, \"Reading RDB base file on AOF loading...\");\n            } while (0);\n        if (<recovery-expr>())\n            goto readerr;\n        if (<recovery-expr>()) {\n            if (old_style)\n                do {\n                    if (((3) & 255) < server.verbosity)\n                        break;\n                    _serverLog(3, \"Error reading the RDB preamble of the AOF file %s, AOF loading aborted\", filename);\n                } while (0);\n            else\n                do {\n                    if (((3) & 255) < server.verbosity)\n                        break;\n                    _serverLog(3, \"Error reading the RDB base file %s, AOF loading aborted\", filename);\n                } while (0);\n            ret = 4;\n            goto cleanup;\n        } else {\n            if (old_style)\n                do {\n                    if (((2) & 255) < server.verbosity)\n                        break;\n                    _serverLog(2, \"Reading the remaining AOF tail...\");\n                } while (0);\n        }\n    }\n    while (1)\n        {\n            int argc, j;\n            unsigned long len;\n            robj **argv;\n            char buf[1024];\n            sds argsds;\n            struct redisCommand *cmd;\n            if (!(loops++ % 1024)) {\n                processEventsWhileBlocked();\n                processModuleLoadingProgressEvent(1);\n            }\n            if (<recovery-expr>()) {\n                if (<recovery-expr>()) {\n                    break;\n                } else {\n                    goto readerr;\n                }\n            }\n            if (buf[0] == '#')\n                continue;\n            if (buf[0] != '*')\n                goto fmterr;\n            if (buf[1] == '\\x00')\n                goto readerr;\n            argc = atoi(buf + 1);\n            if (argc < 1)\n                goto fmterr;\n            if (<recovery-expr>())\n                goto fmterr;\n            argv = <recovery-expr>()(sizeof(robj *) * argc);\n            fakeClient->argc = argc;\n            fakeClient->argv = argv;\n            fakeClient->argv_len = argc;\n            for (j = 0; j < argc; j++) {\n                char *readres;\n                if (<recovery-expr>()) {\n                    fakeClient->argc = j;\n                    freeClientArgv(fakeClient);\n                    if (<recovery-expr>())\n                        goto readerr;\n                    else\n                        goto fmterr;\n                }\n                argsds = <recovery-expr>()(SDS_NOINIT, len);\n                if (<recovery-expr>()) {\n                    sdsfree(argsds);\n                    fakeClient->argc = j;\n                    freeClientArgv(fakeClient);\n                    goto readerr;\n                }\n                argv[j] = createObject(0, argsds);\n                if (<recovery-expr>()) {\n                    fakeClient->argc = j + 1;\n                    freeClientArgv(fakeClient);\n                    goto readerr;\n                }\n            }\n            cmd = lookupCommand(argv, argc);\n            if (!cmd) {\n                do {\n                    if (((3) & 255) < server.verbosity)\n                        break;\n                    _serverLog(3, \"Unknown command '%s' reading the append only file %s\", (char *)argv[0]->ptr, filename);\n                } while (0);\n                freeClientArgv(fakeClient);\n                ret = 4;\n                goto cleanup;\n            }\n            fakeClient->cmd = fakeClient->lastcmd = cmd;\n            if (<recovery-expr>(fakeClient) & (1 << 3) && fakeClient->cmd->proc != execCommand) {\n                <recovery-expr>()(fakeClient, <recovery-expr>(cmd));\n            } else {\n                cmd->proc(fakeClient);\n            }\n            ((fakeClient->bufpos == 0 && ((fakeClient->reply)->len) == 0) ? (void)0 : (_serverAssert(\"fakeClient->bufpos == 0 && listLength(fakeClient->reply) == 0\", \"/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/aof.c\", 1549) , __builtin_unreachable()));\n            (((<recovery-expr>(fakeClient) & (1 << 4)) == 0) ? (void)0 : (_serverAssert(\"(fakeClient->flags & CLIENT_BLOCKED) == 0\", \"/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/aof.c\", 1552) , __builtin_unreachable()));\n            freeClientArgv(fakeClient);\n            if (server.key_load_delay)\n                debugDelay(server.key_load_delay);\n        }\n    if (<recovery-expr>(fakeClient) & (1 << 3)) {\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n            _serverLog(3, \"Revert incomplete MULTI/EXEC transaction in AOF file %s\", filename);\n        } while (0);\n        goto uxeof;\n    }\n  loaded_ok:\n    ;\n    server.aof_state = old_aof_state;\n    goto cleanup;\n  readerr:\n    if (<recovery-expr>()) {\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n        } while (0);\n        ret = 4;\n        goto cleanup;\n    }\n  uxeof:\n    if (server.aof_load_truncated) {\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n            _serverLog(3, \"!!! Warning: short read while loading the AOF file %s!!!\", filename);\n        } while (0);\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n        } while (0);\n        if (<recovery-expr>()) {\n            if (<recovery-expr>()) {\n                do {\n                    if (((3) & 255) < server.verbosity)\n                        break;\n                    _serverLog(3, \"Last valid command offset is invalid\");\n                } while (0);\n            } else {\n                do {\n                    if (((3) & 255) < server.verbosity)\n                        break;\n                } while (0);\n            }\n        } else {\n            if (<recovery-expr>()) {\n                do {\n                    if (((3) & 255) < server.verbosity)\n                        break;\n                } while (0);\n            } else {\n                do {\n                    if (((3) & 255) < server.verbosity)\n                        break;\n                    _serverLog(3, \"AOF %s loaded anyway because aof-load-truncated is enabled\", filename);\n                } while (0);\n                ret = 5;\n                goto loaded_ok;\n            }\n        }\n    }\n    do {\n        if (((3) & 255) < server.verbosity)\n            break;\n        _serverLog(3, \"Unexpected end of file reading the append only file %s. You can: 1) Make a backup of your AOF file, then use ./redis-check-aof --fix <filename.manifest>. 2) Alternatively you can set the 'aof-load-truncated' configuration option to yes and restart the server.\", filename);\n    } while (0);\n    ret = 4;\n    goto cleanup;\n  fmterr:\n    do {\n        if (((3) & 255) < server.verbosity)\n            break;\n        _serverLog(3, \"Bad file format reading the append only file %s: make a backup of your AOF file, then use ./redis-check-aof --fix <filename.manifest>\", filename);\n    } while (0);\n    ret = 4;\n  cleanup:\n    if (fakeClient)\n        freeClient(fakeClient);\n    server.current_client = old_client;\n    sdsfree(aof_filepath);\n    return ret;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/aof.c#789:1#openNewIncrAofForAppend",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    int newfd = -1;\n    aofManifest *temp_am;\n    sds new_aof_name;\n    if (server.aof_state == 0)\n        return 0;\n    if (server.aof_state == 2) {\n        new_aof_name = getTempIncrAofName();\n    } else {\n        temp_am = aofManifestDup(server.aof_manifest);\n        new_aof_name = sdsdup(getNewIncrAofName(temp_am));\n    }\n    sds new_aof_filepath = makePath(server.aof_dirname, new_aof_name);\n    sdsfree(new_aof_filepath);\n    if (newfd == -1) {\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n        } while (0);\n        goto cleanup;\n    }\n    if (temp_am) {\n        if (persistAofManifest(temp_am) == -1) {\n            goto cleanup;\n        }\n    }\n    do {\n        if (((2) & 255) < server.verbosity)\n            break;\n        _serverLog(2, \"Creating AOF incr file %s on background rewrite\", new_aof_name);\n    } while (0);\n    sdsfree(new_aof_name);\n    if (server.aof_fd != -1) {\n        aof_background_fsync_and_close(server.aof_fd);\n        <recovery-expr>(server) = <recovery-expr>(server);\n        <recovery-expr>(server) = <recovery-expr>(server);\n    }\n    server.aof_fd = newfd;\n    <recovery-expr>(server) = 0;\n    if (temp_am)\n        aofManifestFreeAndUpdate(temp_am);\n    return 0;\n  cleanup:\n    if (new_aof_name)\n        sdsfree(new_aof_name);\n    if (newfd != -1)\n        close(newfd);\n    if (temp_am)\n        aofManifestFree(temp_am);\n    return -1;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/aof.c#525:1#writeAofManifestFile",
            "gotos": 5,
            "labels": 1,
            "body": "{\n    int ret = 0;\n    int len;\n    sds am_name = getAofManifestFileName();\n    sds am_filepath = makePath(server.aof_dirname, am_name);\n    sds tmp_am_name = getTempAofManifestFileName();\n    sds tmp_am_filepath = makePath(server.aof_dirname, tmp_am_name);\n    int fd;\n    if (fd == -1) {\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n        } while (0);\n        ret = -1;\n        goto cleanup;\n    }\n    len = <recovery-expr>()(buf);\n    while (len)\n        {\n            if (<recovery-expr>()) {\n                if (<recovery-expr>())\n                    continue;\n                do {\n                    if (((3) & 255) < server.verbosity)\n                        break;\n                } while (0);\n                ret = -1;\n                goto cleanup;\n            }\n        }\n    if (<recovery-expr>()) {\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n        } while (0);\n        ret = -1;\n        goto cleanup;\n    }\n    if (rename(tmp_am_filepath, am_filepath) != 0) {\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n        } while (0);\n        ret = -1;\n        goto cleanup;\n    }\n    if (fsyncFileDir(am_filepath) == -1) {\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n        } while (0);\n        ret = -1;\n        goto cleanup;\n    }\n  cleanup:\n    if (fd != -1)\n        close(fd);\n    sdsfree(am_name);\n    sdsfree(am_filepath);\n    sdsfree(tmp_am_name);\n    sdsfree(tmp_am_filepath);\n    return ret;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/aof.c#2568:1#backgroundRewriteDoneHandler",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    if (!bysignal && exitcode == 0) {\n        char tmpfile[256];\n        long long now = ustime();\n        sds new_base_filepath;\n        sds new_incr_filepath;\n        aofManifest *temp_am;\n        mstime_t latency;\n        do {\n            if (((2) & 255) < server.verbosity)\n                break;\n            _serverLog(2, \"Background AOF rewrite terminated with success\");\n        } while (0);\n        snprintf(tmpfile, 256, \"temp-rewriteaof-bg-%d.aof\", (int)<recovery-expr>(server));\n        temp_am = aofManifestDup(server.aof_manifest);\n        sds new_base_filename = getNewBaseFileNameAndMarkPreAsHistory(temp_am);\n        new_base_filepath = makePath(server.aof_dirname, new_base_filename);\n        if (server.latency_monitor_threshold) {\n            latency = mstime();\n        } else {\n            latency = 0;\n        }\n        ;\n        if (rename(tmpfile, new_base_filepath) == -1) {\n            do {\n                if (((3) & 255) < server.verbosity)\n                    break;\n            } while (0);\n            aofManifestFree(temp_am);\n            sdsfree(new_base_filepath);\n            server.aof_lastbgrewrite_status = -1;\n            server.stat_aofrw_consecutive_failures++;\n            goto cleanup;\n        }\n        if (server.latency_monitor_threshold) {\n            latency = mstime() - latency;\n        }\n        ;\n        if (server.latency_monitor_threshold && (latency) >= server.latency_monitor_threshold)\n            latencyAddSample((\"aof-rename\"), (latency));\n        ;\n        do {\n            if (((2) & 255) < server.verbosity)\n                break;\n            _serverLog(2, \"Successfully renamed the temporary AOF base file %s into %s\", tmpfile, new_base_filename);\n        } while (0);\n        if (server.aof_state == 2) {\n            sds temp_incr_aof_name = getTempIncrAofName();\n            sds temp_incr_filepath = makePath(server.aof_dirname, temp_incr_aof_name);\n            sds new_incr_filename = getNewIncrAofName(temp_am);\n            new_incr_filepath = makePath(server.aof_dirname, new_incr_filename);\n            if (server.latency_monitor_threshold) {\n                latency = mstime();\n            } else {\n                latency = 0;\n            }\n            ;\n            if (rename(temp_incr_filepath, new_incr_filepath) == -1) {\n                do {\n                    if (((3) & 255) < server.verbosity)\n                        break;\n                } while (0);\n                bg_unlink(new_base_filepath);\n                sdsfree(new_base_filepath);\n                aofManifestFree(temp_am);\n                sdsfree(temp_incr_filepath);\n                sdsfree(new_incr_filepath);\n                sdsfree(temp_incr_aof_name);\n                server.aof_lastbgrewrite_status = -1;\n                server.stat_aofrw_consecutive_failures++;\n                goto cleanup;\n            }\n            if (server.latency_monitor_threshold) {\n                latency = mstime() - latency;\n            }\n            ;\n            if (server.latency_monitor_threshold && (latency) >= server.latency_monitor_threshold)\n                latencyAddSample((\"aof-rename\"), (latency));\n            ;\n            do {\n                if (((2) & 255) < server.verbosity)\n                    break;\n                _serverLog(2, \"Successfully renamed the temporary AOF incr file %s into %s\", temp_incr_aof_name, new_incr_filename);\n            } while (0);\n            sdsfree(temp_incr_filepath);\n            sdsfree(temp_incr_aof_name);\n        }\n        markRewrittenIncrAofAsHistory(temp_am);\n        if (persistAofManifest(temp_am) == -1) {\n            bg_unlink(new_base_filepath);\n            aofManifestFree(temp_am);\n            sdsfree(new_base_filepath);\n            if (new_incr_filepath) {\n                bg_unlink(new_incr_filepath);\n                sdsfree(new_incr_filepath);\n            }\n            server.aof_lastbgrewrite_status = -1;\n            server.stat_aofrw_consecutive_failures++;\n            goto cleanup;\n        }\n        sdsfree(new_base_filepath);\n        if (new_incr_filepath)\n            sdsfree(new_incr_filepath);\n        aofManifestFreeAndUpdate(temp_am);\n        if (server.aof_fd != -1) {\n            server.aof_selected_db = -1;\n            <recovery-expr>(server) = <recovery-expr>(server);\n            <recovery-expr>(server) = <recovery-expr>(server);\n            <recovery-expr>(server) = <recovery-expr>(server);\n        }\n        aofDelHistoryFiles();\n        server.aof_lastbgrewrite_status = 0;\n        server.stat_aofrw_consecutive_failures = 0;\n        do {\n            if (((2) & 255) < server.verbosity)\n                break;\n            _serverLog(2, \"Background AOF rewrite finished successfully\");\n        } while (0);\n        if (server.aof_state == 2)\n            server.aof_state = 1;\n        do {\n            if (((1) & 255) < server.verbosity)\n                break;\n            _serverLog(1, \"Background AOF rewrite signal handler took %lldus\", ustime() - now);\n        } while (0);\n    } else if (!bysignal && exitcode != 0) {\n        server.aof_lastbgrewrite_status = -1;\n        server.stat_aofrw_consecutive_failures++;\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n            _serverLog(3, \"Background AOF rewrite terminated with error\");\n        } while (0);\n    } else {\n        if (<recovery-expr>()) {\n            server.aof_lastbgrewrite_status = -1;\n            server.stat_aofrw_consecutive_failures++;\n        }\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n            _serverLog(3, \"Background AOF rewrite terminated by signal %d\", bysignal);\n        } while (0);\n    }\n  cleanup:\n    <recovery-expr>()(<recovery-expr>(server));\n    if (server.aof_state == 2) {\n        sdsfree(server.aof_buf);\n        server.aof_buf = sdsempty();\n        aofDelTempIncrAofFile();\n    }\n    <recovery-expr>(server) = -1;\n    if (server.aof_state == 2)\n        server.aof_rewrite_scheduled = 1;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/aof.c#256:1#aofLoadManifestFromFile",
            "gotos": 10,
            "labels": 1,
            "body": "{\n    const char *err;\n    long long maxseq = 0;\n    aofManifest *am = aofManifestCreate();\n    if (<recovery-expr>()) {\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n        } while (0);\n        exit(1);\n    }\n    char buf[1025];\n    sds *argv;\n    int argc;\n    aofInfo *ai;\n    sds line;\n    int linenum = 0;\n    while (1)\n        {\n            if (<recovery-expr>()) {\n                if (<recovery-expr>()) {\n                    if (linenum == 0) {\n                        err = \"Found an empty AOF manifest\";\n                        goto loaderr;\n                    } else {\n                        break;\n                    }\n                } else {\n                    err = \"Read AOF manifest failed\";\n                    goto loaderr;\n                }\n            }\n            linenum++;\n            if (buf[0] == '#')\n                continue;\n            if (<recovery-expr>()) {\n                err = \"The AOF manifest file contains too long line\";\n                goto loaderr;\n            }\n            line = sdstrim(sdsnew(buf), \" \\t\\r\\n\");\n            if (!<recovery-expr>()(line)) {\n                err = \"Invalid AOF manifest file format\";\n                goto loaderr;\n            }\n            argv = sdssplitargs(line, &argc);\n            if (<recovery-expr>()) {\n                err = \"Invalid AOF manifest file format\";\n                goto loaderr;\n            }\n            ai = aofInfoCreate();\n            for (int i = 0; i < argc; i += 2) {\n                if (!strcasecmp(argv[i], \"file\")) {\n                    ai->file_name = sdsnew(argv[i + 1]);\n                    if (!pathIsBaseName(ai->file_name)) {\n                        err = \"File can't be a path, just a filename\";\n                        goto loaderr;\n                    }\n                } else if (!strcasecmp(argv[i], \"seq\")) {\n                    ai->file_seq = atoll(argv[i + 1]);\n                } else if (!strcasecmp(argv[i], \"type\")) {\n                    ai->file_type = (argv[i + 1])[0];\n                }\n            }\n            if (!ai->file_name || !ai->file_seq || !ai->file_type) {\n                err = \"Invalid AOF manifest file format\";\n                goto loaderr;\n            }\n            sdsfreesplitres(argv, argc);\n            if (ai->file_type == AOF_FILE_TYPE_BASE) {\n                if (am->base_aof_info) {\n                    err = \"Found duplicate base file information\";\n                    goto loaderr;\n                }\n                am->base_aof_info = ai;\n                am->curr_base_file_seq = ai->file_seq;\n            } else if (ai->file_type == AOF_FILE_TYPE_HIST) {\n                listAddNodeTail(am->history_aof_list, ai);\n            } else if (ai->file_type == AOF_FILE_TYPE_INCR) {\n                if (ai->file_seq <= maxseq) {\n                    err = \"Found a non-monotonic sequence number\";\n                    goto loaderr;\n                }\n                listAddNodeTail(am->incr_aof_list, ai);\n                am->curr_incr_file_seq = ai->file_seq;\n                maxseq = ai->file_seq;\n            } else {\n                err = \"Unknown AOF file type\";\n                goto loaderr;\n            }\n            sdsfree(line);\n        }\n    return am;\n  loaderr:\n    if (argv)\n        sdsfreesplitres(argv, argc);\n    if (ai)\n        aofInfoFree(ai);\n    do {\n        if (((3) & 255) < server.verbosity)\n            break;\n        _serverLog(3, \"\\n*** FATAL AOF MANIFEST FILE ERROR ***\\n\");\n    } while (0);\n    if (line) {\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n            _serverLog(3, \"Reading the manifest file, at line %d\\n\", linenum);\n        } while (0);\n        do {\n            if (((3) & 255) < server.verbosity)\n                break;\n            _serverLog(3, \">>> '%s'\\n\", line);\n        } while (0);\n    }\n    do {\n        if (((3) & 255) < server.verbosity)\n            break;\n        _serverLog(3, \"%s\\n\", err);\n    } while (0);\n    exit(1);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/aof.c#2243:1#rewriteAppendOnlyFileRio",
            "gotos": 16,
            "labels": 1,
            "body": "{\n    dictIterator *di;\n    dictEntry *de;\n    int j;\n    long key_count = 0;\n    long long updated_time = 0;\n    if (server.aof_timestamp_enabled) {\n        sds ts = genAofTimestampAnnotationIfNeeded(1);\n        if (<recovery-expr>()(aof, ts, <recovery-expr>()(ts)) == 0) {\n            sdsfree(ts);\n            goto werr;\n        }\n        sdsfree(ts);\n    }\n    if (rewriteFunctions(aof) == 0)\n        goto werr;\n    for (j = 0; j < server.dbnum; j++) {\n        char selectcmd[] = \"*2\\r\\n$6\\r\\nSELECT\\r\\n\";\n        redisDb *db = server.db + j;\n        dict *d = db->dict;\n        if (((d)->ht_used[0] + (d)->ht_used[1]) == 0)\n            continue;\n        di = dictGetSafeIterator(d);\n        if (<recovery-expr>()(aof, selectcmd, sizeof (selectcmd) - 1) == 0)\n            goto werr;\n        if (<recovery-expr>()(aof, j) == 0)\n            goto werr;\n        while (<recovery-expr>())\n            {\n                sds keystr;\n                robj key, *o;\n                long long expiretime;\n                int aof_bytes_before_key(int *);\n                keystr = ((de)->key);\n                o = (<recovery-expr>((de)).val);\n                do {\n                    key.type = 0;\n                    key.encoding = 0;\n                    key.ptr = keystr;\n                } while (0);\n                expiretime = getExpire(db, &key);\n                if (o->type == 0) {\n                    char cmd[] = \"*3\\r\\n$3\\r\\nSET\\r\\n\";\n                    if (<recovery-expr>()(aof, cmd, sizeof (cmd) - 1) == 0)\n                        goto werr;\n                    if (rioWriteBulkObject(aof, &key) == 0)\n                        goto werr;\n                    if (rioWriteBulkObject(aof, o) == 0)\n                        goto werr;\n                } else if (o->type == 1) {\n                    if (rewriteListObject(aof, &key, o) == 0)\n                        goto werr;\n                } else if (o->type == 2) {\n                    if (rewriteSetObject(aof, &key, o) == 0)\n                        goto werr;\n                } else if (o->type == 3) {\n                    if (rewriteSortedSetObject(aof, &key, o) == 0)\n                        goto werr;\n                } else if (o->type == 4) {\n                    if (rewriteHashObject(aof, &key, o) == 0)\n                        goto werr;\n                } else if (o->type == 6) {\n                    if (rewriteStreamObject(aof, &key, o) == 0)\n                        goto werr;\n                } else if (o->type == 5) {\n                    if (rewriteModuleObject(aof, &key, o, j) == 0)\n                        goto werr;\n                } else {\n                    _serverPanic(\"/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/aof.c\", 2304, \"Unknown object type\") , __builtin_unreachable();\n                }\n                int dump_size(int *);\n                if (server.in_fork_child)\n                    dismissObject(o, <recovery-expr>());\n                if (expiretime != -1) {\n                    char cmd[] = \"*3\\r\\n$9\\r\\nPEXPIREAT\\r\\n\";\n                    if (<recovery-expr>()(aof, cmd, sizeof (cmd) - 1) == 0)\n                        goto werr;\n                    if (rioWriteBulkObject(aof, &key) == 0)\n                        goto werr;\n                    if (<recovery-expr>()(aof, expiretime) == 0)\n                        goto werr;\n                }\n                if ((key_count++ & 1023) == 0) {\n                    long long now = mstime();\n                    if (now - updated_time >= 1000) {\n                        sendChildInfo(CHILD_INFO_TYPE_CURRENT_INFO, key_count, \"AOF rewrite\");\n                        updated_time = now;\n                    }\n                }\n                if (server.rdb_key_save_delay)\n                    debugDelay(server.rdb_key_save_delay);\n            }\n        dictReleaseIterator(di);\n    }\n    return 0;\n  werr:\n    if (di)\n        dictReleaseIterator(di);\n    return -1;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/aof.c#1632:1#loadAppendOnlyFiles",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    int status, ret = 0;\n    long long start;\n    sds aof_name;\n    int total_num, aof_num = 0, last_file;\n    if (fileExist(server.aof_filename)) {\n        if (<recovery-expr>()) {\n            aofUpgradePrepare(am);\n        }\n    }\n    if (<recovery-expr>()) {\n        return 1;\n    }\n    total_num = getBaseAndIncrAppendOnlyFilesNum(am);\n    ((total_num > 0) ? (void)0 : (_serverAssert(\"total_num > 0\", \"/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/aof.c\", 1664) , __builtin_unreachable()));\n    if (status != 0) {\n        if (status == 1)\n            status = 4;\n        return status;\n    } else if (<recovery-expr>()) {\n        return 2;\n    }\n    if (am->base_aof_info) {\n        ((am->base_aof_info->file_type == AOF_FILE_TYPE_BASE) ? (void)0 : (_serverAssert(\"am->base_aof_info->file_type == AOF_FILE_TYPE_BASE\", \"/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/aof.c\", 1682) , __builtin_unreachable()));\n        aof_name = (char *)am->base_aof_info->file_name;\n        updateLoadingFileName(aof_name);\n        last_file = ++aof_num == total_num;\n        start = ustime();\n        ret = loadSingleAppendOnlyFile(aof_name);\n        if (ret == 0 || (ret == 5 && last_file)) {\n            do {\n                if (((2) & 255) < server.verbosity)\n                    break;\n                _serverLog(2, \"DB loaded from base file %s: %.3f seconds\", aof_name, (float)(ustime() - start) / 1000000);\n            } while (0);\n        }\n        if (ret == 5 && !last_file) {\n            ret = 4;\n        }\n        if (ret == 3 || ret == 4) {\n            goto cleanup;\n        }\n    }\n    if (((am->incr_aof_list)->len)) {\n        listNode *ln;\n        listIter li;\n        listRewind(am->incr_aof_list, &li);\n        while (<recovery-expr>())\n            {\n                aofInfo *ai = (aofInfo *)ln->value;\n                ((ai->file_type == AOF_FILE_TYPE_INCR) ? (void)0 : (_serverAssert(\"ai->file_type == AOF_FILE_TYPE_INCR\", \"/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/aof.c\", 1712) , __builtin_unreachable()));\n                aof_name = (char *)ai->file_name;\n                updateLoadingFileName(aof_name);\n                last_file = ++aof_num == total_num;\n                start = ustime();\n                ret = loadSingleAppendOnlyFile(aof_name);\n                if (ret == 0 || (ret == 5 && last_file)) {\n                    do {\n                        if (((2) & 255) < server.verbosity)\n                            break;\n                        _serverLog(2, \"DB loaded from incr file %s: %.3f seconds\", aof_name, (float)(ustime() - start) / 1000000);\n                    } while (0);\n                }\n                if (ret == 2)\n                    ret = 0;\n                if (ret == 5 && !last_file) {\n                    ret = 4;\n                }\n                if (ret == 3 || ret == 4) {\n                    goto cleanup;\n                }\n            }\n    }\n    <recovery-expr>(server) = <recovery-expr>(server);\n  cleanup:\n    stopLoading(ret == 0 || ret == 5);\n    return ret;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/aof.c#1060:1#flushAppendOnlyFile",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    int sync_in_progress = 0;\n    mstime_t latency;\n    if (<recovery-expr>()(server.aof_buf) == 0) {\n        if (server.aof_fsync == 2 && <recovery-expr>(server) != <recovery-expr>(server) && <recovery-expr>(server) > <recovery-expr>(server) && !(sync_in_progress = aofFsyncInProgress())) {\n            goto try_fsync;\n        } else {\n            return;\n        }\n    }\n    if (server.aof_fsync == 2)\n        sync_in_progress = aofFsyncInProgress();\n    if (server.aof_fsync == 2 && !force) {\n        if (sync_in_progress) {\n            if (<recovery-expr>(server) == 0) {\n                <recovery-expr>(server) = <recovery-expr>(server);\n                return;\n            } else if (<recovery-expr>(server) - <recovery-expr>(server) < 2) {\n                return;\n            }\n            server.aof_delayed_fsync++;\n            do {\n                if (((2) & 255) < server.verbosity)\n                    break;\n                _serverLog(2, \"Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.\");\n            } while (0);\n        }\n    }\n    if (server.aof_flush_sleep && <recovery-expr>()(server.aof_buf)) {\n        usleep(server.aof_flush_sleep);\n    }\n    if (server.latency_monitor_threshold) {\n        latency = mstime();\n    } else {\n        latency = 0;\n    }\n    ;\n    if (server.latency_monitor_threshold) {\n        latency = mstime() - latency;\n    }\n    ;\n    if (sync_in_progress) {\n        if (server.latency_monitor_threshold && (latency) >= server.latency_monitor_threshold)\n            latencyAddSample((\"aof-write-pending-fsync\"), (latency));\n        ;\n    } else if (hasActiveChildProcess()) {\n        if (server.latency_monitor_threshold && (latency) >= server.latency_monitor_threshold)\n            latencyAddSample((\"aof-write-active-child\"), (latency));\n        ;\n    } else {\n        if (server.latency_monitor_threshold && (latency) >= server.latency_monitor_threshold)\n            latencyAddSample((\"aof-write-alone\"), (latency));\n        ;\n    }\n    if (server.latency_monitor_threshold && (latency) >= server.latency_monitor_threshold)\n        latencyAddSample((\"aof-write\"), (latency));\n    ;\n    <recovery-expr>(server) = 0;\n    if (<recovery-expr>()) {\n        static int last_write_error_log;\n        int can_log = 0;\n        if ((<recovery-expr>(server) - <recovery-expr>()) > 30) {\n            can_log = 1;\n            <recovery-expr>() = <recovery-expr>(server);\n        }\n        if (<recovery-expr>()) {\n            if (can_log) {\n                do {\n                    if (((3) & 255) < server.verbosity)\n                        break;\n                } while (0);\n            }\n        } else {\n            if (can_log) {\n                do {\n                    if (((3) & 255) < server.verbosity)\n                        break;\n                } while (0);\n            }\n            if (ftruncate(server.aof_fd, <recovery-expr>(server)) == -1) {\n                if (can_log) {\n                    do {\n                        if (((3) & 255) < server.verbosity)\n                            break;\n                    } while (0);\n                }\n            } else {\n            }\n        }\n        if (server.aof_fsync == 1) {\n            do {\n                if (((3) & 255) < server.verbosity)\n                    break;\n                _serverLog(3, \"Can't recover from AOF write error when the AOF fsync policy is 'always'. Exiting...\");\n            } while (0);\n            exit(1);\n        } else {\n            server.aof_last_write_status = -1;\n            if (<recovery-expr>()) {\n            }\n            return;\n        }\n    } else {\n        if (server.aof_last_write_status == -1) {\n            do {\n                if (((3) & 255) < server.verbosity)\n                    break;\n                _serverLog(3, \"AOF write error looks solved, Redis can write again.\");\n            } while (0);\n            server.aof_last_write_status = 0;\n        }\n    }\n    if ((<recovery-expr>()(server.aof_buf) + <recovery-expr>()(server.aof_buf)) < 4000) {\n        sdsclear(server.aof_buf);\n    } else {\n        sdsfree(server.aof_buf);\n        server.aof_buf = sdsempty();\n    }\n  try_fsync:\n    if (server.aof_no_fsync_on_rewrite && hasActiveChildProcess())\n        return;\n    if (server.aof_fsync == 1) {\n        if (server.latency_monitor_threshold) {\n            latency = mstime();\n        } else {\n            latency = 0;\n        }\n        ;\n        if (<recovery-expr>()) {\n            do {\n                if (((3) & 255) < server.verbosity)\n                    break;\n            } while (0);\n            exit(1);\n        }\n        if (server.latency_monitor_threshold) {\n            latency = mstime() - latency;\n        }\n        ;\n        if (server.latency_monitor_threshold && (latency) >= server.latency_monitor_threshold)\n            latencyAddSample((\"aof-fsync-always\"), (latency));\n        ;\n        <recovery-expr>(server) = <recovery-expr>(server);\n        <recovery-expr>(server) = <recovery-expr>(server);\n    } else if ((server.aof_fsync == 2 && <recovery-expr>(server) > <recovery-expr>(server))) {\n        if (!sync_in_progress) {\n            aof_background_fsync(server.aof_fd);\n            <recovery-expr>(server) = <recovery-expr>(server);\n        }\n        <recovery-expr>(server) = <recovery-expr>(server);\n    }\n}\n"
        }
    ],
    "total": 114,
    "visited": 10
}
