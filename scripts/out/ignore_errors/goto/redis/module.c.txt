{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/module.c#5857:1#RM_Call",
            "gotos": 13,
            "labels": 1,
            "body": "{\n    client *c;\n    robj **argv;\n    int argc = 0, flags = 0;\n    RedisModuleCallReply *reply;\n    int replicate = 0;\n    int error_as_call_replies = 0;\n    replicate = flags & (1 << 0);\n    error_as_call_replies = flags & (1 << 8);\n    user *user;\n    if (flags & (1 << 5)) {\n        user = ctx->user ? ctx->user->user : ctx->client->user;\n        if (!user) {\n            if (error_as_call_replies) {\n                sds msg = sdsnew(\"cannot run as user, no user directly attached to context or context's client\");\n                reply = callReplyCreateError(msg, ctx);\n            }\n            return reply;\n        }\n    }\n    c = moduleAllocTempClient(user);\n    <recovery-expr>(c) |= (1ULL << 41);\n    c->db = ctx->client->db;\n    c->argv = argv;\n    c->argc = c->argv_len = argc;\n    c->resp = 2;\n    if (flags & (1 << 3)) {\n        c->resp = 3;\n    } else if (flags & (1 << 4)) {\n        c->resp = ctx->client->resp;\n    }\n    if (ctx->module)\n        ctx->module->in_call++;\n    if (<recovery-expr>()) {\n        goto cleanup;\n    }\n    moduleCallCommandFilters(c);\n    c->cmd = c->lastcmd = c->realcmd = lookupCommand(c->argv, c->argc);\n    sds err;\n    if (<recovery-expr>()) {\n        if (error_as_call_replies)\n            reply = callReplyCreateError(err, ctx);\n        goto cleanup;\n    }\n    if (<recovery-expr>()) {\n        if (error_as_call_replies)\n            reply = callReplyCreateError(err, ctx);\n        goto cleanup;\n    }\n    if (flags & (1 << 6)) {\n        if (<recovery-expr>()) {\n            if (error_as_call_replies) {\n                sds msg = sdscatfmt(sdsempty(), \"command '%S' is not allowed on script mode\", c->cmd->fullname);\n                reply = callReplyCreateError(msg, ctx);\n            }\n            goto cleanup;\n        }\n    }\n    if (flags & (1 << 9) && server.maxmemory) {\n        if (<recovery-expr>()) {\n            int oom_state;\n            if (ctx->flags & (1 << 4)) {\n            } else {\n                oom_state = server.pre_command_oom_state;\n            }\n            if (oom_state) {\n                if (error_as_call_replies) {\n                    sds msg = sdsdup(shared.oomerr->ptr);\n                    reply = callReplyCreateError(msg, ctx);\n                }\n                goto cleanup;\n            }\n        }\n    } else {\n        <recovery-expr>(c) |= (1ULL << 44);\n    }\n    if (flags & (1 << 7)) {\n        if (<recovery-expr>()) {\n            if (error_as_call_replies) {\n                sds msg = sdscatfmt(sdsempty(), \"Write command '%S' was called while write is not allowed.\", c->cmd->fullname);\n                reply = callReplyCreateError(msg, ctx);\n            }\n            goto cleanup;\n        }\n    }\n    if (flags & (1 << 6)) {\n        if (<recovery-expr>()) {\n            if (!checkGoodReplicasStatus()) {\n                if (error_as_call_replies) {\n                    sds msg = sdsdup(shared.noreplicaserr->ptr);\n                    reply = callReplyCreateError(msg, ctx);\n                }\n                goto cleanup;\n            }\n            int deny_write_type = writeCommandsDeniedByDiskError();\n            int obey_client = (server.current_client && mustObeyClient(server.current_client));\n            if (deny_write_type != 0 && !obey_client) {\n                if (error_as_call_replies) {\n                    sds msg = writeCommandsGetDiskErrorMessage(deny_write_type);\n                    reply = callReplyCreateError(msg, ctx);\n                }\n                goto cleanup;\n            }\n            if (server.masterhost && server.repl_slave_ro && !obey_client) {\n                if (error_as_call_replies) {\n                    sds msg = sdsdup(shared.roslaveerr->ptr);\n                    reply = callReplyCreateError(msg, ctx);\n                }\n                goto cleanup;\n            }\n        }\n        if (<recovery-expr>()) {\n            if (error_as_call_replies) {\n                sds msg = sdsdup(shared.masterdownerr->ptr);\n                reply = callReplyCreateError(msg, ctx);\n            }\n            goto cleanup;\n        }\n    }\n    if (flags & (1 << 5)) {\n        int acl_errpos;\n        int acl_retval;\n        acl_retval = ACLCheckAllUserCommandPerm(user, c->cmd, c->argv, c->argc, &acl_errpos);\n        if (acl_retval != 0) {\n            sds object = (acl_retval == 1) ? sdsdup(c->cmd->fullname) : sdsdup(c->argv[acl_errpos]->ptr);\n            addACLLogEntry(ctx->client, acl_retval, 3, -1, ctx->client->user->name, object);\n            if (error_as_call_replies) {\n                sds acl_msg = getAclErrorMessage(acl_retval, ctx->client->user, c->cmd, c->argv[acl_errpos]->ptr, 0);\n                sds msg = sdscatfmt(sdsempty(), \"-NOPERM %S\\r\\n\", acl_msg);\n                sdsfree(acl_msg);\n                reply = callReplyCreateError(msg, ctx);\n            }\n            goto cleanup;\n        }\n    }\n    if (server.cluster_enabled && !mustObeyClient(ctx->client)) {\n        int error_code;\n        <recovery-expr>(c) &= ~((1 << 17) | (1 << 9));\n        <recovery-expr>(c) |= <recovery-expr>(ctx->client) & ((1 << 17) | (1 << 9));\n        if (<recovery-expr>()) {\n            sds msg;\n            if (error_code == 7) {\n                if (error_as_call_replies) {\n                    msg = sdscatfmt(sdsempty(), \"Can not execute a write command '%S' while the cluster is down and readonly\", c->cmd->fullname);\n                }\n            } else if (error_code == 5) {\n                if (error_as_call_replies) {\n                    msg = sdscatfmt(sdsempty(), \"Can not execute a command '%S' while the cluster is down\", c->cmd->fullname);\n                }\n            } else {\n                if (error_as_call_replies) {\n                    msg = sdsnew(\"Attempted to access a non local key in a cluster node\");\n                }\n            }\n            if (msg) {\n                reply = callReplyCreateError(msg, ctx);\n            }\n            goto cleanup;\n        }\n    }\n    if (flags & (1 << 10)) {\n        goto cleanup;\n    }\n    int prev_replication_allowed = server.replication_allowed;\n    server.replication_allowed = replicate && server.replication_allowed;\n    int call_flags = (1 << 0) | (1 << 1) | (1 << 4);\n    if (replicate) {\n        if (!(flags & (1 << 1)))\n            call_flags |= (1 << 2);\n        if (!(flags & (1 << 2)))\n            call_flags |= (1 << 3);\n    }\n    call(c, call_flags);\n    server.replication_allowed = prev_replication_allowed;\n    (((<recovery-expr>(c) & (1 << 4)) == 0) ? (void)0 : (_serverAssert(\"(c->flags & CLIENT_BLOCKED) == 0\", \"/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/module.c\", 6123) , __builtin_unreachable()));\n    sds proto = <recovery-expr>()(c->buf, c->bufpos);\n    c->bufpos = 0;\n    while (((c->reply)->len))\n        {\n            clientReplyBlock *o = ((((c->reply)->head))->value);\n            proto = <recovery-expr>()(proto, o->buf, <recovery-expr>(o));\n            listDelNode(c->reply, ((c->reply)->head));\n        }\n    reply = callReplyCreate(proto, c->deferred_reply_errors, ctx);\n  cleanup:\n    if (reply)\n        autoMemoryAdd(ctx, 2, reply);\n    if (ctx->module)\n        ctx->module->in_call--;\n    moduleReleaseTempClient(c);\n    return reply;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/module.c#6837:1#RM_LoadFloat",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    if (io->error)\n        return 0;\n    if (<recovery-expr>())\n        goto loaderr;\n    float value;\n    int retval = rdbLoadBinaryFloatValue(io->rio, &value);\n    if (retval == -1)\n        goto loaderr;\n    return value;\n  loaderr:\n    moduleRDBLoadError(io);\n    return 0;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/module.c#6801:1#RM_LoadDouble",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    if (io->error)\n        return 0;\n    if (<recovery-expr>())\n        goto loaderr;\n    double value;\n    int retval = rdbLoadBinaryDoubleValue(io->rio, &value);\n    if (retval == -1)\n        goto loaderr;\n    return value;\n  loaderr:\n    moduleRDBLoadError(io);\n    return 0;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/module.c#6650:1#RM_SaveUnsigned",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    if (io->error)\n        return;\n    if (flushRedisModuleIOBuffer(io) == -1)\n        goto saveerr;\n    int retval = <recovery-expr>()(io->rio, 2);\n    if (retval == -1)\n        goto saveerr;\n    <recovery-expr>(io) += retval;\n    retval = <recovery-expr>()(io->rio, <recovery-expr>());\n    if (retval == -1)\n        goto saveerr;\n    <recovery-expr>(io) += retval;\n    return;\n  saveerr:\n    io->error = 1;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/module.c#5695:1#moduleCreateArgvFromUserFormat",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    int argc = 0, argv_size, j;\n    robj **argv;\n    argv_size = strlen(fmt) + 1;\n    argv = <recovery-expr>()(argv, sizeof(robj *) * argv_size);\n    argv[0] = createStringObject(cmdname, strlen(cmdname));\n    argc++;\n    const char *p = fmt;\n    while (*p)\n        {\n            if (*p == 'c') {\n                char *cstr;\n                argv[argc++] = createStringObject(cstr, strlen(cstr));\n            } else if (*p == 's') {\n                robj *obj;\n                if (<recovery-expr>())\n                    obj = createStringObject(obj->ptr, <recovery-expr>()(obj->ptr));\n                else\n                    incrRefCount(obj);\n                argv[argc++] = obj;\n            } else if (*p == 'b') {\n                char *buf;\n                int len(int *);\n                argv[argc++] = createStringObject(buf, <recovery-expr>());\n            } else if (*p == 'l') {\n                long long ll;\n                argv[argc++] = createObject(0, sdsfromlonglong(ll));\n            } else if (*p == 'v') {\n                robj **v;\n                int vlen(int *);\n                argv_size += <recovery-expr>() - 1;\n                argv = <recovery-expr>()(argv, sizeof(robj *) * argv_size);\n                int i(int *);\n                for (<recovery-expr>() = 0; <recovery-expr>() < <recovery-expr>(); <recovery-expr>()++) {\n                    incrRefCount(v[<recovery-expr>()]);\n                    argv[argc++] = v[<recovery-expr>()];\n                }\n            } else if (*p == '!') {\n                if (flags)\n                    (*flags) |= (1 << 0);\n            } else if (*p == 'A') {\n                if (flags)\n                    (*flags) |= (1 << 1);\n            } else if (*p == 'R') {\n                if (flags)\n                    (*flags) |= (1 << 2);\n            } else if (*p == '3') {\n                if (flags)\n                    (*flags) |= (1 << 3);\n            } else if (*p == '0') {\n                if (flags)\n                    (*flags) |= (1 << 4);\n            } else if (*p == 'C') {\n                if (flags)\n                    (*flags) |= (1 << 5);\n            } else if (*p == 'S') {\n                if (flags)\n                    (*flags) |= (1 << 6);\n            } else if (*p == 'W') {\n                if (flags)\n                    (*flags) |= (1 << 7);\n            } else if (*p == 'M') {\n                if (flags)\n                    (*flags) |= (1 << 9);\n            } else if (*p == 'E') {\n                if (flags)\n                    (*flags) |= (1 << 8);\n            } else if (*p == 'D') {\n                if (flags)\n                    (*flags) |= ((1 << 10) | (1 << 8));\n            } else {\n                goto fmterr;\n            }\n            p++;\n        }\n    if (argcp)\n        *argcp = argc;\n    return argv;\n  fmterr:\n    for (j = 0; j < argc; j++)\n        decrRefCount(argv[j]);\n    zfree(argv);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/module.c#6741:1#moduleLoadString",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    if (<recovery-expr>())\n        goto loaderr;\n    void *s = rdbGenericLoadStringObject(io->rio, plain ? (1 << 1) : 0, lenptr);\n    if (<recovery-expr>())\n        goto loaderr;\n    return s;\n  loaderr:\n    moduleRDBLoadError(io);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/module.c#6670:1#RM_LoadUnsigned",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    if (io->error)\n        return 0;\n    if (<recovery-expr>())\n        goto loaderr;\n    int retval;\n    if (retval == -1)\n        goto loaderr;\n  loaderr:\n    moduleRDBLoadError(io);\n    return 0;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/module.c#6782:1#RM_SaveDouble",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    if (io->error)\n        return;\n    if (flushRedisModuleIOBuffer(io) == -1)\n        goto saveerr;\n    int retval = <recovery-expr>()(io->rio, 4);\n    if (retval == -1)\n        goto saveerr;\n    <recovery-expr>(io) += retval;\n    retval = rdbSaveBinaryDoubleValue(io->rio, value);\n    if (retval == -1)\n        goto saveerr;\n    <recovery-expr>(io) += retval;\n    return;\n  saveerr:\n    io->error = 1;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/module.c#6818:1#RM_SaveFloat",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    if (io->error)\n        return;\n    if (flushRedisModuleIOBuffer(io) == -1)\n        goto saveerr;\n    int retval = <recovery-expr>()(io->rio, 3);\n    if (retval == -1)\n        goto saveerr;\n    <recovery-expr>(io) += retval;\n    retval = rdbSaveBinaryFloatValue(io->rio, value);\n    if (retval == -1)\n        goto saveerr;\n    <recovery-expr>(io) += retval;\n    return;\n  saveerr:\n    io->error = 1;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/module.c#6723:1#RM_SaveStringBuffer",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    if (io->error)\n        return;\n    if (flushRedisModuleIOBuffer(io) == -1)\n        goto saveerr;\n    if (<recovery-expr>())\n        goto saveerr;\n    if (<recovery-expr>())\n        goto saveerr;\n    return;\n  saveerr:\n    io->error = 1;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/module.c#6704:1#RM_SaveString",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    if (io->error)\n        return;\n    if (flushRedisModuleIOBuffer(io) == -1)\n        goto saveerr;\n    if (<recovery-expr>())\n        goto saveerr;\n    if (<recovery-expr>())\n        goto saveerr;\n    return;\n  saveerr:\n    io->error = 1;\n}\n"
        }
    ],
    "total": 537,
    "visited": 11
}
