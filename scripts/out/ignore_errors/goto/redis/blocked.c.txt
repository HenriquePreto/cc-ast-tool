{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/blocked.c#412:1#serveClientsBlockedOnStreamKey",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    if (!server.blocked_clients_by_type[4])\n        return;\n    dictEntry *de = dictFind(rl->db->blocking_keys, rl->key);\n    stream *s;\n    if (de) {\n        list *clients = (<recovery-expr>((de)).val);\n        listNode *ln;\n        listIter li;\n        listRewind(clients, &li);\n        while ((ln = listNext(&li)))\n            {\n                client *receiver = ((ln)->value);\n                if (receiver->btype != 4)\n                    continue;\n                bkinfo *bki = dictFetchValue(<recovery-expr>(receiver).keys, rl->key);\n                streamID *gt = &<recovery-expr>(bki);\n                if (!<recovery-expr>(receiver).xread_group && (!o || o->type != 6)) {\n                    continue;\n                }\n                long long prev_error_replies = server.stat_total_error_replies;\n                client *old_client = server.current_client;\n                server.current_client = receiver;\n                monotime replyTimer;\n                elapsedStart(&replyTimer);\n                streamCG *group;\n                if (<recovery-expr>(receiver).xread_group) {\n                    if (!o || o->type != 6) {\n                        addReplyError(receiver, \"-UNBLOCKED the stream key no longer exists\");\n                        goto unblock_receiver;\n                    }\n                    group = streamLookupCG(s, <recovery-expr>(receiver).xread_group->ptr);\n                    if (!group) {\n                        addReplyError(receiver, \"-NOGROUP the consumer group this client was blocked on no longer exists\");\n                        goto unblock_receiver;\n                    } else {\n                        *gt = <recovery-expr>(group);\n                    }\n                }\n                if (streamCompareID(&<recovery-expr>(s), gt) > 0) {\n                    streamID start = *gt;\n                    streamIncrID(&start);\n                    streamConsumer *consumer;\n                    int noack = 0;\n                    if (group) {\n                        noack = <recovery-expr>(receiver).xread_group_noack;\n                        sds name = <recovery-expr>(receiver).xread_consumer->ptr;\n                        consumer = streamLookupConsumer(group, name, 0);\n                        if (<recovery-expr>()) {\n                            consumer = streamCreateConsumer(group, name, rl->key, rl->db->id, 0);\n                            if (noack) {\n                                streamPropagateConsumerCreation(receiver, rl->key, <recovery-expr>(receiver).xread_group, consumer->name);\n                            }\n                        }\n                    }\n                    if (receiver->resp == 2) {\n                        addReplyArrayLen(receiver, 1);\n                        addReplyArrayLen(receiver, 2);\n                    } else {\n                        addReplyMapLen(receiver, 1);\n                    }\n                    addReplyBulk(receiver, rl->key);\n                    streamPropInfo pi = {rl->key, <recovery-expr>(receiver).xread_group};\n                  unblock_receiver:\n                    updateStatsOnUnblock(receiver, 0, <recovery-expr>()(replyTimer), server.stat_total_error_replies != prev_error_replies);\n                    unblockClient(receiver);\n                    afterCommand(receiver);\n                    server.current_client = old_client;\n                }\n            }\n    }\n}\n"
        }
    ],
    "total": 69,
    "visited": 1
}
