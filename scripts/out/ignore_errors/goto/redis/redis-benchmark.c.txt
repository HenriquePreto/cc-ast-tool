{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/redis-benchmark.c#1414:1#parseOptions",
            "gotos": 18,
            "labels": 2,
            "body": "{\n    int i;\n    int lastarg;\n    int exit_status = 1;\n    for (i = 1; i < argc; i++) {\n        lastarg = (i == (argc - 1));\n        if (!strcmp(argv[i], \"-c\")) {\n            if (lastarg)\n                goto invalid;\n            config.numclients = atoi(argv[++i]);\n        } else if (!strcmp(argv[i], \"-v\") || !strcmp(argv[i], \"--version\")) {\n            sds version = benchmarkVersion();\n            printf(\"redis-benchmark %s\\n\", version);\n            sdsfree(version);\n            exit(0);\n        } else if (!strcmp(argv[i], \"-n\")) {\n            if (lastarg)\n                goto invalid;\n            config.requests = atoi(argv[++i]);\n        } else if (!strcmp(argv[i], \"-k\")) {\n            if (lastarg)\n                goto invalid;\n            config.keepalive = atoi(argv[++i]);\n        } else if (!strcmp(argv[i], \"-h\")) {\n            if (lastarg)\n                goto invalid;\n            sdsfree(config.conn_info.hostip);\n            config.conn_info.hostip = sdsnew(argv[++i]);\n        } else if (!strcmp(argv[i], \"-p\")) {\n            if (lastarg)\n                goto invalid;\n            config.conn_info.hostport = atoi(argv[++i]);\n            if (config.conn_info.hostport < 0 || config.conn_info.hostport > 65535) {\n                exit(1);\n            }\n        } else if (!strcmp(argv[i], \"-s\")) {\n            if (lastarg)\n                goto invalid;\n            config.hostsocket = strdup(argv[++i]);\n        } else if (!strcmp(argv[i], \"-x\")) {\n            config.stdinarg = 1;\n        } else if (!strcmp(argv[i], \"-a\")) {\n            if (lastarg)\n                goto invalid;\n            config.conn_info.auth = sdsnew(argv[++i]);\n        } else if (!strcmp(argv[i], \"--user\")) {\n            if (lastarg)\n                goto invalid;\n            config.conn_info.user = sdsnew(argv[++i]);\n        } else if (!strcmp(argv[i], \"-u\") && !lastarg) {\n            parseRedisUri(argv[++i], \"redis-benchmark\", &config.conn_info, &config.tls);\n            if (config.conn_info.hostport < 0 || config.conn_info.hostport > 65535) {\n                exit(1);\n            }\n            config.input_dbnumstr = sdsfromlonglong(config.conn_info.input_dbnum);\n        } else if (!strcmp(argv[i], \"-3\")) {\n            config.resp3 = 1;\n        } else if (!strcmp(argv[i], \"-d\")) {\n            if (lastarg)\n                goto invalid;\n            config.datasize = atoi(argv[++i]);\n            if (config.datasize < 1)\n                config.datasize = 1;\n            if (config.datasize > 1024 * 1024 * 1024)\n                config.datasize = 1024 * 1024 * 1024;\n        } else if (!strcmp(argv[i], \"-P\")) {\n            if (lastarg)\n                goto invalid;\n            config.pipeline = atoi(argv[++i]);\n            if (config.pipeline <= 0)\n                config.pipeline = 1;\n        } else if (!strcmp(argv[i], \"-r\")) {\n            if (lastarg)\n                goto invalid;\n            const char *next = argv[++i], *p = next;\n            if (*p == '-') {\n                p++;\n                if (*p < '0' || *p > '9')\n                    goto invalid;\n            }\n            config.randomkeys = 1;\n            config.randomkeys_keyspacelen = atoi(next);\n            if (config.randomkeys_keyspacelen < 0)\n                config.randomkeys_keyspacelen = 0;\n        } else if (!strcmp(argv[i], \"-q\")) {\n            config.quiet = 1;\n        } else if (!strcmp(argv[i], \"--csv\")) {\n            config.csv = 1;\n        } else if (!strcmp(argv[i], \"-l\")) {\n            config.loop = 1;\n        } else if (!strcmp(argv[i], \"-I\")) {\n            config.idlemode = 1;\n        } else if (!strcmp(argv[i], \"-e\")) {\n        } else if (!strcmp(argv[i], \"-t\")) {\n            if (lastarg)\n                goto invalid;\n            config.tests = sdsnew(\",\");\n            config.tests = sdscat(config.tests, (char *)argv[++i]);\n            config.tests = sdscat(config.tests, \",\");\n            sdstolower(config.tests);\n        } else if (!strcmp(argv[i], \"--dbnum\")) {\n            if (lastarg)\n                goto invalid;\n            config.conn_info.input_dbnum = atoi(argv[++i]);\n            config.input_dbnumstr = sdsfromlonglong(config.conn_info.input_dbnum);\n        } else if (!strcmp(argv[i], \"--precision\")) {\n            if (lastarg)\n                goto invalid;\n            config.precision = atoi(argv[++i]);\n            if (config.precision < 0)\n                config.precision = 3;\n            if (config.precision > 4)\n                config.precision = 4;\n        } else if (!strcmp(argv[i], \"--threads\")) {\n            if (lastarg)\n                goto invalid;\n            config.num_threads = atoi(argv[++i]);\n            if (config.num_threads > 500) {\n                config.num_threads = 500;\n            } else if (config.num_threads < 0)\n                config.num_threads = 0;\n        } else if (!strcmp(argv[i], \"--cluster\")) {\n            config.cluster_mode = 1;\n        } else if (!strcmp(argv[i], \"--enable-tracking\")) {\n            config.enable_tracking = 1;\n        } else if (!strcmp(argv[i], \"--help\")) {\n            exit_status = 0;\n            goto usage;\n        } else {\n            if (argv[i][0] == '-')\n                goto invalid;\n            return i;\n        }\n    }\n    return i;\n  invalid:\n    printf(\"Invalid option \\\"%s\\\" or option argument missing\\n\\n\", argv[i]);\n  usage:\n    printf(\"%s%s\", \"Usage: redis-benchmark [OPTIONS] [COMMAND ARGS...]\\n\\nOptions:\\n -h <hostname>      Server hostname (default 127.0.0.1)\\n -p <port>          Server port (default 6379)\\n -s <socket>        Server socket (overrides host and port)\\n -a <password>      Password for Redis Auth\\n --user <username>  Used to send ACL style 'AUTH username pass'. Needs -a.\\n -u <uri>           Server URI.\\n -c <clients>       Number of parallel connections (default 50)\\n -n <requests>      Total number of requests (default 100000)\\n -d <size>          Data size of SET/GET value in bytes (default 3)\\n --dbnum <db>       SELECT the specified db number (default 0)\\n -3                 Start session in RESP3 protocol mode.\\n --threads <num>    Enable multi-thread mode.\\n --cluster          Enable cluster mode.\\n                    If the command is supplied on the command line in cluster\\n                    mode, the key must contain \\\"{tag}\\\". Otherwise, the\\n                    command will not be sent to the right cluster node.\\n --enable-tracking  Send CLIENT TRACKING on before starting benchmark.\\n -k <boolean>       1=keep alive 0=reconnect (default 1)\\n -r <keyspacelen>   Use random keys for SET/GET/INCR, random values for SADD,\\n                    random members and scores for ZADD.\\n                    Using this option the benchmark will expand the string\\n                    __rand_int__ inside an argument with a 12 digits number in\\n                    the specified range from 0 to keyspacelen-1. The\\n                    substitution changes every time a command is executed.\\n                    Default tests use this to hit random keys in the specified\\n                    range.\\n                    Note: If -r is omitted, all commands in a benchmark will\\n                    use the same key.\\n -P <numreq>        Pipeline <numreq> requests. Default 1 (no pipeline).\\n -q                 Quiet. Just show query/sec values\\n --precision        Number of decimal places to display in latency output (default 0)\\n --csv              Output in CSV format\\n -l                 Loop. Run the tests forever\\n -t <tests>         Only run the comma separated list of tests. The test\\n                    names are the same as the ones produced as output.\\n                    The -t option is ignored if a specific command is supplied\\n                    on the command line.\\n -I                 Idle mode. Just open N idle connections and wait.\\n -x                 Read last argument from STDIN.\\n --help             Output this help and exit.\\n --version          Output version and exit.\\n\\n\", \"Examples:\\n\\n Run the benchmark with the default configuration against 127.0.0.1:6379:\\n   $ redis-benchmark\\n\\n Use 20 parallel clients, for a total of 100k requests, against 192.168.1.1:\\n   $ redis-benchmark -h 192.168.1.1 -p 6379 -n 100000 -c 20\\n\\n Fill 127.0.0.1:6379 with about 1 million keys only using the SET test:\\n   $ redis-benchmark -t set -n 1000000 -r 100000000\\n\\n Benchmark 127.0.0.1:6379 for a few commands producing CSV output:\\n   $ redis-benchmark -t ping,set,get -n 100000 --csv\\n\\n Benchmark a specific command line:\\n   $ redis-benchmark -r 10000 -n 10000 eval 'return redis.call(\\\"ping\\\")' 0\\n\\n Fill a list with 10000 random elements:\\n   $ redis-benchmark -r 10000 -n 10000 lpush mylist __rand_int__\\n\\n On user specified command lines __rand_int__ is replaced with a random integer\\n with a range of values selected by the -r option.\\n\");\n    exit(exit_status);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/redis-benchmark.c#1290:1#fetchClusterSlotsConfiguration",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    ((void)c);\n    int success = 1, is_fetching_slots = 0, last_update = 0;\n    do {\n    } while (0);\n    if (c->slots_last_update < last_update) {\n        c->slots_last_update = last_update;\n        return -1;\n    }\n    do {\n    } while (0);\n    if (is_fetching_slots)\n        return -1;\n    const char *errmsg = \"Failed to update cluster slots configuration\";\n    static dictType dtype;\n    dict *masters = dictCreate(&dtype);\n    if (<recovery-expr>()) {\n        success = 0;\n        goto cleanup;\n    }\n    updateClusterSlotsConfiguration();\n  cleanup:\n    ;\n    dictRelease(masters);\n    return success;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/redis-benchmark.c#1122:1#fetchClusterConfiguration",
            "gotos": 7,
            "labels": 1,
            "body": "{\n    int success = 1;\n    if (<recovery-expr>()) {\n        exit(1);\n    }\n    clusterNode *firstNode = createClusterNode((char *)config.conn_info.hostip, config.conn_info.hostport);\n    if (!firstNode) {\n        success = 0;\n        goto cleanup;\n    }\n    if (!success)\n        goto cleanup;\n    if (!success) {\n        if (<recovery-expr>()) {\n        } else {\n        }\n        goto cleanup;\n    }\n    char *lines, *p, *line;\n    while (<recovery-expr>())\n        {\n            *p = '\\x00';\n            line = lines;\n            lines = p + 1;\n            char *name, *addr, *flags, *master_id;\n            int i = 0;\n            while (<recovery-expr>())\n                {\n                    *p = '\\x00';\n                    char *token = line;\n                    line = p + 1;\n                    switch (i++) {\n                      case 0:\n                        name = token;\n                        break;\n                      case 1:\n                        addr = token;\n                        break;\n                      case 2:\n                        flags = token;\n                        break;\n                      case 3:\n                        master_id = token;\n                        break;\n                    }\n                    if (i == 8)\n                        break;\n                }\n            if (!flags) {\n                success = 0;\n                goto cleanup;\n            }\n            int myself;\n            int is_replica;\n            if (is_replica)\n                continue;\n            if (<recovery-expr>()) {\n                success = 0;\n                goto cleanup;\n            }\n            clusterNode *node;\n            char *ip;\n            int port = 0;\n            char *paddr = strrchr(addr, ':');\n            if (<recovery-expr>()) {\n                *paddr = '\\x00';\n                ip = addr;\n                addr = paddr + 1;\n                if (<recovery-expr>())\n                    *paddr = '\\x00';\n                port = atoi(addr);\n            }\n            if (myself) {\n                node = firstNode;\n                if (<recovery-expr>()) {\n                    node->ip = sdsnew(ip);\n                    node->port = port;\n                }\n            } else {\n                node = createClusterNode(sdsnew(ip), port);\n            }\n            if (<recovery-expr>()) {\n                success = 0;\n                goto cleanup;\n            }\n            if (<recovery-expr>())\n                node->name = sdsnew(name);\n            if (i == 8) {\n                int remaining = strlen(line);\n                while (remaining > 0)\n                    {\n                        p = strchr(line, ' ');\n                        if (<recovery-expr>())\n                            p = line + remaining;\n                        remaining -= (p - line);\n                        char *slotsdef = line;\n                        *p = '\\x00';\n                        if (remaining) {\n                            line = p + 1;\n                            remaining--;\n                        } else\n                            line = p;\n                        char *dash;\n                        if (slotsdef[0] == '[') {\n                            slotsdef++;\n                            if ((p = strstr(slotsdef, \"->-\"))) {\n                                *p = '\\x00';\n                                p += 3;\n                                char *closing_bracket = strchr(p, ']');\n                                if (closing_bracket)\n                                    *closing_bracket = '\\x00';\n                                sds slot = sdsnew(slotsdef);\n                                sds dst = sdsnew(p);\n                                node->migrating_count += 2;\n                                node->migrating = <recovery-expr>()(node->migrating, (node->migrating_count * sizeof(sds)));\n                                node->migrating[node->migrating_count - 2] = slot;\n                                node->migrating[node->migrating_count - 1] = dst;\n                            } else if ((p = strstr(slotsdef, \"-<-\"))) {\n                                *p = '\\x00';\n                                p += 3;\n                                char *closing_bracket = strchr(p, ']');\n                                if (closing_bracket)\n                                    *closing_bracket = '\\x00';\n                                sds slot = sdsnew(slotsdef);\n                                sds src = sdsnew(p);\n                                node->importing_count += 2;\n                                node->importing = <recovery-expr>()(node->importing, (node->importing_count * sizeof(sds)));\n                                node->importing[node->importing_count - 2] = slot;\n                                node->importing[node->importing_count - 1] = src;\n                            }\n                        } else if (<recovery-expr>()) {\n                            p = dash;\n                            int start, stop;\n                            *p = '\\x00';\n                            start = atoi(slotsdef);\n                            stop = atoi(p + 1);\n                            while (start <= stop)\n                                {\n                                    int slot = start++;\n                                    node->slots[node->slots_count++] = slot;\n                                }\n                        } else if (p > slotsdef) {\n                            int slot = atoi(slotsdef);\n                            node->slots[node->slots_count++] = slot;\n                        }\n                    }\n            }\n            if (node->slots_count == 0) {\n                continue;\n            }\n            if (!addClusterNode(node)) {\n                success = 0;\n                goto cleanup;\n            }\n        }\n  cleanup:\n    ;\n    if (!success) {\n        if (config.cluster_nodes)\n            freeClusterNodes();\n    }\n    return success;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/redis-benchmark.c#313:1#getRedisConfig",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    redisConfig *cfg = <recovery-expr>()(sizeof (*cfg));\n    if (<recovery-expr>()) {\n        freeRedisConfig(cfg);\n        exit(1);\n    }\n    int i = 0;\n    void *r;\n    for (; i < 2; i++) {\n        int res;\n        if (<recovery-expr>())\n            goto fail;\n        if (<recovery-expr>()) {\n            goto fail;\n        }\n        if (<recovery-expr>())\n            goto fail;\n        char *value;\n        if (!value)\n            value = \"\";\n        switch (i) {\n          case 0:\n            cfg->save = sdsnew(value);\n            break;\n          case 1:\n            cfg->appendonly = sdsnew(value);\n            break;\n        }\n    }\n    return cfg;\n  fail:\n    ;\n    int abort_test = 0;\n    if (<recovery-expr>())\n        abort_test = 1;\n    freeRedisConfig(cfg);\n    if (abort_test)\n        exit(1);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/redis-benchmark.c#256:1#getRedisContext",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    if (<recovery-expr>()) {\n        char *err;\n        goto cleanup;\n    }\n    if (config.tls == 1) {\n        const char *err;\n        if (<recovery-expr>()) {\n            goto cleanup;\n        }\n    }\n    if (<recovery-expr>()) {\n        if (<recovery-expr>()) {\n            exit(1);\n        }\n    }\n  cleanup:\n    ;\n}\n"
        }
    ],
    "total": 47,
    "visited": 5
}
