{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#9327:1#xmlParseStartTag2",
            "gotos": 12,
            "labels": 2,
            "body": "{\n    const int *localname;\n    const int *prefix;\n    const int *attname;\n    const int *aprefix;\n    const int *nsname;\n    const int **atts;\n    int maxatts = <recovery-expr>()->maxatts;\n    int nratts, nbatts, nbdef, inputid;\n    int i, j, nbNs, attval;\n    unsigned long cur;\n    int nsNr = <recovery-expr>()->nsNr;\n    {\n        <recovery-expr>()->input->col++;\n        <recovery-expr>()->input->cur++;\n    }\n    ;\n    if (<recovery-expr>())\n        <recovery-expr>()(<recovery-expr>());\n    ;\n    cur = <recovery-expr>()->input->cur - <recovery-expr>()->input->base;\n    inputid = <recovery-expr>()->input->id;\n    nbatts = 0;\n    nratts = 0;\n    nbdef = 0;\n    nbNs = 0;\n    attval = 0;\n    <recovery-expr>()->nsNr = nsNr;\n    <recovery-expr>() = <recovery-expr>()(<recovery-expr>(), &<recovery-expr>());\n    if (<recovery-expr>()) {\n    }\n    *tlen = <recovery-expr>()->input->cur - <recovery-expr>()->input->base - cur;\n    <recovery-expr>()(<recovery-expr>());\n    if (<recovery-expr>())\n        <recovery-expr>()(<recovery-expr>());\n    ;\n    while (<recovery-expr>())\n        {\n            int id = <recovery-expr>()->input->id;\n            unsigned long cons = (<recovery-expr>()->input->consumed + (<recovery-expr>()->input->cur - <recovery-expr>()->input->base));\n            int len = -1, alloc = 0;\n            if (<recovery-expr>())\n                goto next_attr;\n            if (<recovery-expr>()) {\n                const int *URL;\n                if (<recovery-expr>()) {\n                    xmlErrMemory(<recovery-expr>(), \"dictionary allocation failure\");\n                    goto done;\n                }\n                if (*<recovery-expr>() != 0) {\n                    if (<recovery-expr>()) {\n                    } else {\n                        if (<recovery-expr>()) {\n                        }\n                    }\n                    if (<recovery-expr>() == <recovery-expr>()->str_xml_ns) {\n                        if (<recovery-expr>() != <recovery-expr>()->str_xml) {\n                        }\n                        goto next_attr;\n                    }\n                    if (<recovery-expr>()) {\n                        goto next_attr;\n                    }\n                }\n                for (j = 1; j <= nbNs; j++)\n                    if (<recovery-expr>())\n                        break;\n                if (j <= nbNs)\n                    ;\n                else if (<recovery-expr>())\n                    nbNs++;\n            } else if (<recovery-expr>() == <recovery-expr>()->str_xmlns) {\n                const int *URL;\n                if (<recovery-expr>() == <recovery-expr>()->str_xml) {\n                    if (<recovery-expr>() != <recovery-expr>()->str_xml_ns) {\n                    }\n                    goto next_attr;\n                }\n                if (<recovery-expr>() == <recovery-expr>()->str_xml_ns) {\n                    if (<recovery-expr>() != <recovery-expr>()->str_xml) {\n                    }\n                    goto next_attr;\n                }\n                if (<recovery-expr>() == <recovery-expr>()->str_xmlns) {\n                    goto next_attr;\n                }\n                if (<recovery-expr>()) {\n                    goto next_attr;\n                }\n                if (<recovery-expr>()) {\n                    goto next_attr;\n                } else {\n                    if (<recovery-expr>()) {\n                    } else {\n                        if (<recovery-expr>()) {\n                        }\n                    }\n                }\n                for (j = 1; j <= nbNs; j++)\n                    if (<recovery-expr>()->nsTab[<recovery-expr>()->nsNr - 2 * j] == <recovery-expr>())\n                        break;\n                if (j <= nbNs)\n                    <recovery-expr>()(<recovery-expr>(), <recovery-expr>(), <recovery-expr>());\n                else if (<recovery-expr>()(<recovery-expr>(), <recovery-expr>(), <recovery-expr>()) > 0)\n                    nbNs++;\n            } else {\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()(<recovery-expr>(), nbatts + 5) < 0) {\n                        goto next_attr;\n                    }\n                    maxatts = <recovery-expr>()->maxatts;\n                    <recovery-expr>() = <recovery-expr>()->atts;\n                }\n                <recovery-expr>()->attallocs[nratts++] = alloc;\n                <recovery-expr>()[nbatts++] = <recovery-expr>();\n                <recovery-expr>()[nbatts++] = <recovery-expr>();\n                if (alloc)\n                    ;\n                else\n                    <recovery-expr>()[nbatts++] = <recovery-expr>()->input->base;\n                if (alloc != 0)\n                    attval = 1;\n            }\n          next_attr:\n            if (<recovery-expr>()) {\n            }\n            if (<recovery-expr>())\n                <recovery-expr>()(<recovery-expr>());\n            if (<recovery-expr>())\n                break;\n            if (((*<recovery-expr>()->input->cur) == '>') || ((((*<recovery-expr>()->input->cur) == '/') && (<recovery-expr>()->input->cur[(1)] == '>'))))\n                break;\n            if (<recovery-expr>()(<recovery-expr>()) == 0) {\n                break;\n            }\n            if (<recovery-expr>()) {\n                break;\n            }\n            if (<recovery-expr>())\n                <recovery-expr>()(<recovery-expr>());\n            ;\n        }\n    if (<recovery-expr>()->input->id != inputid) {\n        goto done;\n    }\n    for (i = 0 , j = 0; j < nratts; i += 5 , j++) {\n        if (<recovery-expr>()) {\n        }\n    }\n    if (<recovery-expr>()) {\n        xmlDefAttrsPtr defaults;\n        defaults = xmlHashLookup2(<recovery-expr>()->attsDefault, <recovery-expr>(), <recovery-expr>());\n        if (<recovery-expr>()) {\n            for (i = 0; i < <recovery-expr>(defaults); i++) {\n                <recovery-expr>() = <recovery-expr>(defaults)[5 * i];\n                <recovery-expr>() = <recovery-expr>(defaults)[5 * i + 1];\n                if (<recovery-expr>()) {\n                    for (j = 1; j <= nbNs; j++)\n                        if (<recovery-expr>())\n                            break;\n                    if (j <= nbNs)\n                        continue;\n                    if (<recovery-expr>() != <recovery-expr>(defaults)[5 * i + 2]) {\n                        if (<recovery-expr>())\n                            nbNs++;\n                    }\n                } else if (<recovery-expr>() == <recovery-expr>()->str_xmlns) {\n                    for (j = 1; j <= nbNs; j++)\n                        if (<recovery-expr>()->nsTab[<recovery-expr>()->nsNr - 2 * j] == <recovery-expr>())\n                            break;\n                    if (j <= nbNs)\n                        continue;\n                    <recovery-expr>() = <recovery-expr>()(<recovery-expr>(), <recovery-expr>());\n                    if (<recovery-expr>() != <recovery-expr>(defaults)[2]) {\n                        if (<recovery-expr>()(<recovery-expr>(), <recovery-expr>(), <recovery-expr>(defaults)[5 * i + 2]) > 0)\n                            nbNs++;\n                    }\n                } else {\n                    for (j = 0; j < nbatts; j += 5) {\n                        if ((<recovery-expr>() == <recovery-expr>()[j]) && (<recovery-expr>() == <recovery-expr>()[j + 1]))\n                            break;\n                    }\n                    if (j < nbatts)\n                        continue;\n                    if (<recovery-expr>()) {\n                        if (<recovery-expr>()(<recovery-expr>(), nbatts + 5) < 0) {\n                            goto done;\n                        }\n                        maxatts = <recovery-expr>()->maxatts;\n                        <recovery-expr>() = <recovery-expr>()->atts;\n                    }\n                    <recovery-expr>()[nbatts++] = <recovery-expr>();\n                    <recovery-expr>()[nbatts++] = <recovery-expr>();\n                    if (<recovery-expr>())\n                        ;\n                    else\n                        <recovery-expr>()[nbatts++] = <recovery-expr>()(<recovery-expr>(), <recovery-expr>());\n                    <recovery-expr>()[nbatts++] = <recovery-expr>(defaults)[5 * i + 2];\n                    <recovery-expr>()[nbatts++] = <recovery-expr>(defaults)[5 * i + 3];\n                    if (<recovery-expr>()) {\n                    }\n                    nbdef++;\n                }\n            }\n        }\n    }\n    for (i = 0; i < nbatts; i += 5) {\n        if (<recovery-expr>()) {\n            <recovery-expr>() = <recovery-expr>()(<recovery-expr>(), <recovery-expr>()[i + 1]);\n            if (<recovery-expr>()) {\n            }\n            <recovery-expr>()[i + 2] = <recovery-expr>();\n        } else\n            ;\n        for (j = 0; j < i; j += 5) {\n            if (<recovery-expr>()[i] == <recovery-expr>()[j]) {\n                if (<recovery-expr>()[i + 1] == <recovery-expr>()[j + 1]) {\n                    <recovery-expr>()(<recovery-expr>(), <recovery-expr>()[i + 1], <recovery-expr>()[i]);\n                    break;\n                }\n                if (<recovery-expr>()) {\n                    break;\n                }\n            }\n        }\n    }\n    <recovery-expr>() = <recovery-expr>()(<recovery-expr>(), <recovery-expr>());\n    if (<recovery-expr>()) {\n    }\n    *<recovery-expr>() = <recovery-expr>();\n    *<recovery-expr>() = <recovery-expr>();\n    if (<recovery-expr>()) {\n        if (nbNs > 0)\n            <recovery-expr>()->sax->startElementNs(<recovery-expr>()->userData, <recovery-expr>(), <recovery-expr>(), <recovery-expr>(), nbNs, &<recovery-expr>()->nsTab[<recovery-expr>()->nsNr - 2 * nbNs], nbatts / 5, nbdef, <recovery-expr>());\n        else\n            ;\n    }\n  done:\n    if (attval != 0) {\n    }\n    return (<recovery-expr>());\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#6751:1#xmlParseConditionalSections",
            "gotos": 7,
            "labels": 1,
            "body": "{\n    int *inputIds;\n    while (<recovery-expr>())\n        {\n            if (((*<recovery-expr>()->input->cur) == '<') && (<recovery-expr>()->input->cur[(1)] == '!') && (<recovery-expr>()->input->cur[(2)] == '[')) {\n                int id = <recovery-expr>()->input->id;\n                do {\n                    <recovery-expr>()->input->cur += (3) , <recovery-expr>()->input->col += (3);\n                } while (0);\n                <recovery-expr>()(<recovery-expr>());\n                if (((((((unsigned char *)<recovery-expr>()->input->cur)[0] == 'I' && ((unsigned char *)<recovery-expr>()->input->cur)[1] == 'N' && ((unsigned char *)<recovery-expr>()->input->cur)[2] == 'C' && ((unsigned char *)<recovery-expr>()->input->cur)[3] == 'L') && ((unsigned char *)<recovery-expr>()->input->cur)[4] == 'U') && ((unsigned char *)<recovery-expr>()->input->cur)[5] == 'D') && ((unsigned char *)<recovery-expr>()->input->cur)[6] == 'E')) {\n                    do {\n                        <recovery-expr>()->input->cur += (7) , <recovery-expr>()->input->col += (7);\n                    } while (0);\n                    <recovery-expr>()(<recovery-expr>());\n                    if ((*<recovery-expr>()->input->cur) != '[') {\n                        <recovery-expr>()(<recovery-expr>());\n                        goto error;\n                    }\n                    if (<recovery-expr>()->input->id != id) {\n                    }\n                    xmlNextChar(<recovery-expr>());\n                    if (<recovery-expr>()) {\n                        int *tmp;\n                        if (<recovery-expr>()) {\n                            goto error;\n                        }\n                        inputIds = tmp;\n                    }\n                } else if ((((((unsigned char *)<recovery-expr>()->input->cur)[0] == 'I' && ((unsigned char *)<recovery-expr>()->input->cur)[1] == 'G' && ((unsigned char *)<recovery-expr>()->input->cur)[2] == 'N' && ((unsigned char *)<recovery-expr>()->input->cur)[3] == 'O') && ((unsigned char *)<recovery-expr>()->input->cur)[4] == 'R') && ((unsigned char *)<recovery-expr>()->input->cur)[5] == 'E')) {\n                    int state;\n                    do {\n                        <recovery-expr>()->input->cur += (6) , <recovery-expr>()->input->col += (6);\n                    } while (0);\n                    <recovery-expr>()(<recovery-expr>());\n                    if ((*<recovery-expr>()->input->cur) != '[') {\n                        <recovery-expr>()(<recovery-expr>());\n                        goto error;\n                    }\n                    if (<recovery-expr>()->input->id != id) {\n                    }\n                    xmlNextChar(<recovery-expr>());\n                    state = <recovery-expr>()->disableSAX;\n                    if (<recovery-expr>()->recovery == 0)\n                        <recovery-expr>()->disableSAX = 1;\n                    while ((*<recovery-expr>()->input->cur) != 0)\n                        {\n                            if (((*<recovery-expr>()->input->cur) == '<') && (<recovery-expr>()->input->cur[(1)] == '!') && (<recovery-expr>()->input->cur[(2)] == '[')) {\n                                do {\n                                    <recovery-expr>()->input->cur += (3) , <recovery-expr>()->input->col += (3);\n                                } while (0);\n                                if (<recovery-expr>()) {\n                                    goto error;\n                                }\n                            } else if (((*<recovery-expr>()->input->cur) == ']') && (<recovery-expr>()->input->cur[(1)] == ']') && (<recovery-expr>()->input->cur[(2)] == '>')) {\n                                if (<recovery-expr>())\n                                    break;\n                                do {\n                                    <recovery-expr>()->input->cur += (3) , <recovery-expr>()->input->col += (3);\n                                } while (0);\n                            } else {\n                                xmlNextChar(<recovery-expr>());\n                            }\n                        }\n                    <recovery-expr>()->disableSAX = state;\n                    if ((*<recovery-expr>()->input->cur) == 0) {\n                        goto error;\n                    }\n                    if (<recovery-expr>()->input->id != id) {\n                    }\n                    do {\n                        <recovery-expr>()->input->cur += (3) , <recovery-expr>()->input->col += (3);\n                    } while (0);\n                } else {\n                    <recovery-expr>()(<recovery-expr>());\n                    goto error;\n                }\n            } else if (<recovery-expr>()) {\n                if (<recovery-expr>()) {\n                }\n                do {\n                    <recovery-expr>()->input->cur += (3) , <recovery-expr>()->input->col += (3);\n                } while (0);\n            } else {\n                int id = <recovery-expr>()->input->id;\n                unsigned long cons = (<recovery-expr>()->input->consumed + (<recovery-expr>()->input->cur - <recovery-expr>()->input->base));\n                xmlParseMarkupDecl(<recovery-expr>());\n                if ((id == <recovery-expr>()->input->id) && (cons == (<recovery-expr>()->input->consumed + (<recovery-expr>()->input->cur - <recovery-expr>()->input->base)))) {\n                    <recovery-expr>()(<recovery-expr>());\n                    goto error;\n                }\n            }\n            if (<recovery-expr>())\n                break;\n            <recovery-expr>()(<recovery-expr>());\n            if (<recovery-expr>())\n                <recovery-expr>()(<recovery-expr>());\n            ;\n        }\n  error:\n    xmlFree(inputIds);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#2650:1#xmlStringLenDecodeEntities",
            "gotos": 19,
            "labels": 2,
            "body": "{\n    const int *last;\n    int c, l;\n    <recovery-expr>() = <recovery-expr>() + len;\n    if (<recovery-expr>()) {\n    }\n    if (<recovery-expr>())\n        goto mem_error;\n    if (<recovery-expr>() < <recovery-expr>())\n        c = xmlStringCurrentChar(<recovery-expr>(), <recovery-expr>(), &l);\n    else\n        c = 0;\n    while (<recovery-expr>())\n        {\n            if (c == 0)\n                break;\n            if ((c == '&') && (<recovery-expr>()[1] == '#')) {\n                int val = <recovery-expr>()(<recovery-expr>(), &<recovery-expr>());\n                if (val == 0)\n                    goto int_error;\n                if (<recovery-expr>()) {\n                    {\n                        if (<recovery-expr>())\n                            goto mem_error;\n                        if (<recovery-expr>())\n                            goto mem_error;\n                    }\n                    ;\n                }\n            } else if (<recovery-expr>()) {\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()) {\n                        if (<recovery-expr>()) {\n                            {\n                                if (<recovery-expr>())\n                                    goto mem_error;\n                                if (<recovery-expr>())\n                                    goto mem_error;\n                            }\n                            ;\n                        }\n                    } else {\n                        goto int_error;\n                    }\n                } else if (<recovery-expr>()) {\n                    <recovery-expr>()->depth++;\n                    <recovery-expr>()->depth--;\n                    if (<recovery-expr>()) {\n                        goto int_error;\n                    }\n                    while (<recovery-expr>())\n                        {\n                            if (<recovery-expr>()) {\n                                if (<recovery-expr>())\n                                    goto int_error;\n                                {\n                                    if (<recovery-expr>())\n                                        goto mem_error;\n                                    if (<recovery-expr>())\n                                        goto mem_error;\n                                }\n                                ;\n                            }\n                        }\n                } else if (<recovery-expr>()) {\n                    int i;\n                    const int *cur;\n                    if (<recovery-expr>()) {\n                        {\n                            if (<recovery-expr>())\n                                goto mem_error;\n                            if (<recovery-expr>())\n                                goto mem_error;\n                        }\n                        ;\n                    }\n                }\n            } else if (<recovery-expr>()) {\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()) {\n                        if (<recovery-expr>()) {\n                        } else {\n                        }\n                    }\n                    <recovery-expr>()->depth++;\n                    <recovery-expr>()->depth--;\n                    if (<recovery-expr>()) {\n                        goto int_error;\n                    }\n                    while (<recovery-expr>())\n                        {\n                            if (<recovery-expr>()) {\n                                if (<recovery-expr>())\n                                    goto int_error;\n                                {\n                                    if (<recovery-expr>())\n                                        goto mem_error;\n                                    if (<recovery-expr>())\n                                        goto mem_error;\n                                }\n                                ;\n                            }\n                        }\n                }\n            } else {\n                <recovery-expr>() += l;\n                if (<recovery-expr>()) {\n                    {\n                        if (<recovery-expr>())\n                            goto mem_error;\n                        if (<recovery-expr>())\n                            goto mem_error;\n                    }\n                    ;\n                }\n            }\n            if (<recovery-expr>() < <recovery-expr>())\n                c = xmlStringCurrentChar(<recovery-expr>(), <recovery-expr>(), &l);\n            else\n                c = 0;\n        }\n  mem_error:\n    ;\n  int_error:\n    ;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#5437:1#xmlParseEntityDecl",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    const int *name;\n    const int *ndata;\n    int isParameter = 0;\n    if ((((((((unsigned char *)<recovery-expr>()->input->cur)[0] == '<' && ((unsigned char *)<recovery-expr>()->input->cur)[1] == '!' && ((unsigned char *)<recovery-expr>()->input->cur)[2] == 'E' && ((unsigned char *)<recovery-expr>()->input->cur)[3] == 'N') && ((unsigned char *)<recovery-expr>()->input->cur)[4] == 'T') && ((unsigned char *)<recovery-expr>()->input->cur)[5] == 'I') && ((unsigned char *)<recovery-expr>()->input->cur)[6] == 'T') && ((unsigned char *)<recovery-expr>()->input->cur)[7] == 'Y')) {\n        int inputid = <recovery-expr>()->input->id;\n        if (<recovery-expr>())\n            <recovery-expr>()(<recovery-expr>());\n        ;\n        do {\n            <recovery-expr>()->input->cur += (8) , <recovery-expr>()->input->col += (8);\n        } while (0);\n        if (<recovery-expr>()(<recovery-expr>()) == 0) {\n        }\n        if ((*<recovery-expr>()->input->cur) == '%') {\n            xmlNextChar(<recovery-expr>());\n            if (<recovery-expr>()(<recovery-expr>()) == 0) {\n            }\n            isParameter = 1;\n        }\n        <recovery-expr>() = <recovery-expr>()(<recovery-expr>());\n        if (<recovery-expr>()) {\n            return;\n        }\n        if (<recovery-expr>()) {\n        }\n        if (<recovery-expr>()(<recovery-expr>()) == 0) {\n        }\n        if (isParameter) {\n            if (((*<recovery-expr>()->input->cur) == '\"') || ((*<recovery-expr>()->input->cur) == '\\'')) {\n                if (<recovery-expr>()) {\n                }\n            } else {\n                if (<recovery-expr>()) {\n                }\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()) {\n                    } else {\n                        if (<recovery-expr>()) {\n                        } else {\n                        }\n                    }\n                }\n            }\n        } else {\n            if (((*<recovery-expr>()->input->cur) == '\"') || ((*<recovery-expr>()->input->cur) == '\\'')) {\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()) {\n                        if (<recovery-expr>()) {\n                            xmlErrMemory(<recovery-expr>(), \"New Doc failed\");\n                            return;\n                        }\n                    }\n                }\n            } else {\n                if (<recovery-expr>()) {\n                }\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()) {\n                    } else {\n                        if (<recovery-expr>()) {\n                        }\n                    }\n                }\n                if (((*<recovery-expr>()->input->cur) != '>') && (<recovery-expr>()(<recovery-expr>()) == 0)) {\n                }\n                if (((((unsigned char *)<recovery-expr>()->input->cur)[0] == 'N' && ((unsigned char *)<recovery-expr>()->input->cur)[1] == 'D' && ((unsigned char *)<recovery-expr>()->input->cur)[2] == 'A' && ((unsigned char *)<recovery-expr>()->input->cur)[3] == 'T') && ((unsigned char *)<recovery-expr>()->input->cur)[4] == 'A')) {\n                    do {\n                        <recovery-expr>()->input->cur += (5) , <recovery-expr>()->input->col += (5);\n                    } while (0);\n                    if (<recovery-expr>()(<recovery-expr>()) == 0) {\n                    }\n                    <recovery-expr>() = <recovery-expr>()(<recovery-expr>());\n                } else {\n                    if (<recovery-expr>()) {\n                        if (<recovery-expr>()) {\n                            if (<recovery-expr>()) {\n                                xmlErrMemory(<recovery-expr>(), \"New Doc failed\");\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (<recovery-expr>())\n            goto done;\n        <recovery-expr>()(<recovery-expr>());\n        if ((*<recovery-expr>()->input->cur) != '>') {\n            <recovery-expr>()(<recovery-expr>());\n        } else {\n            if (inputid != <recovery-expr>()->input->id) {\n            }\n            xmlNextChar(<recovery-expr>());\n        }\n        if (<recovery-expr>()) {\n            if (isParameter) {\n            } else {\n                if (<recovery-expr>()) {\n                }\n            }\n            if (<recovery-expr>()) {\n            }\n        }\n      done:\n        ;\n    }\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#4909:1#xmlParseComment",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    const int *in;\n    int ccol;\n    int inputid;\n    if (((*<recovery-expr>()->input->cur) != '<') || (<recovery-expr>()->input->cur[(1)] != '!') || (<recovery-expr>()->input->cur[(2)] != '-') || (<recovery-expr>()->input->cur[(3)] != '-'))\n        return;\n    inputid = <recovery-expr>()->input->id;\n    do {\n        <recovery-expr>()->input->cur += (4) , <recovery-expr>()->input->col += (4);\n    } while (0);\n    if (<recovery-expr>())\n        <recovery-expr>()(<recovery-expr>());\n    ;\n    if (<recovery-expr>())\n        <recovery-expr>()(<recovery-expr>());\n    ;\n    <recovery-expr>() = <recovery-expr>()->input->cur;\n    do {\n        if (*<recovery-expr>() == 10) {\n            do {\n                <recovery-expr>()->input->line++;\n                <recovery-expr>()->input->col = 1;\n                <recovery-expr>()++;\n            } while (*<recovery-expr>() == 10);\n        }\n      get_more:\n        ccol = <recovery-expr>()->input->col;\n        while (((*<recovery-expr>() > '-') && (*<recovery-expr>() <= 127)) || ((*<recovery-expr>() >= 32) && (*<recovery-expr>() < '-')) || (*<recovery-expr>() == 9))\n            {\n                <recovery-expr>()++;\n                ccol++;\n            }\n        <recovery-expr>()->input->col = ccol;\n        if (*<recovery-expr>() == 10) {\n            do {\n                <recovery-expr>()->input->line++;\n                <recovery-expr>()->input->col = 1;\n                <recovery-expr>()++;\n            } while (*<recovery-expr>() == 10);\n            goto get_more;\n        }\n        if (<recovery-expr>()) {\n            if (<recovery-expr>()) {\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()) {\n                        return;\n                    }\n                } else if (<recovery-expr>()) {\n                    if (<recovery-expr>()) {\n                        return;\n                    }\n                }\n            }\n        }\n        if (<recovery-expr>()) {\n            return;\n        }\n        <recovery-expr>()->input->cur = <recovery-expr>();\n        if (*<recovery-expr>() == 10) {\n            <recovery-expr>()++;\n            <recovery-expr>()->input->line++;\n            <recovery-expr>()->input->col = 1;\n        }\n        if (*<recovery-expr>() == 13) {\n            <recovery-expr>()++;\n            if (*<recovery-expr>() == 10) {\n                <recovery-expr>()->input->cur = <recovery-expr>();\n                <recovery-expr>()++;\n                <recovery-expr>()->input->line++;\n                <recovery-expr>()->input->col = 1;\n                goto get_more;\n            }\n            <recovery-expr>()--;\n        }\n        if (<recovery-expr>())\n            <recovery-expr>()(<recovery-expr>());\n        ;\n        if (<recovery-expr>())\n            <recovery-expr>()(<recovery-expr>());\n        ;\n        if (<recovery-expr>()) {\n            return;\n        }\n        <recovery-expr>() = <recovery-expr>()->input->cur;\n        if (*<recovery-expr>() == '-') {\n            if (<recovery-expr>()[1] == '-') {\n                if (<recovery-expr>()[2] == '>') {\n                    if (<recovery-expr>()->input->id != inputid) {\n                    }\n                    do {\n                        <recovery-expr>()->input->cur += (3) , <recovery-expr>()->input->col += (3);\n                    } while (0);\n                    if (<recovery-expr>()) {\n                    }\n                    return;\n                }\n                if (<recovery-expr>()) {\n                } else\n                    ;\n                if (<recovery-expr>()) {\n                    return;\n                }\n                <recovery-expr>()++;\n                <recovery-expr>()->input->col++;\n            }\n            <recovery-expr>()++;\n            <recovery-expr>()->input->col++;\n            goto get_more;\n        }\n    } while (((*<recovery-expr>() >= 32) && (*<recovery-expr>() <= 127)) || (*<recovery-expr>() == 9) || (*<recovery-expr>() == 10));\n    return;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#4769:1#xmlParseCommentComplex",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    int q, ql;\n    int r, rl;\n    int cur, l;\n    int inputid;\n    inputid = <recovery-expr>()->input->id;\n    if (<recovery-expr>()) {\n        <recovery-expr>() = 0;\n        <recovery-expr>() = 100;\n        if (<recovery-expr>()) {\n            return;\n        }\n    }\n    if (<recovery-expr>())\n        <recovery-expr>()(<recovery-expr>());\n    ;\n    q = xmlCurrentChar(<recovery-expr>(), &ql);\n    if (q == 0)\n        goto not_terminated;\n    if (!IS_CHAR(q)) {\n        xmlFree(<recovery-expr>());\n        return;\n    }\n    do {\n        if (*(<recovery-expr>()->input->cur) == '\\n') {\n            <recovery-expr>()->input->line++;\n            <recovery-expr>()->input->col = 1;\n        } else\n            <recovery-expr>()->input->col++;\n        <recovery-expr>()->input->cur += ql;\n    } while (0);\n    r = xmlCurrentChar(<recovery-expr>(), &rl);\n    if (r == 0)\n        goto not_terminated;\n    if (!IS_CHAR(r)) {\n        xmlFree(<recovery-expr>());\n        return;\n    }\n    do {\n        if (*(<recovery-expr>()->input->cur) == '\\n') {\n            <recovery-expr>()->input->line++;\n            <recovery-expr>()->input->col = 1;\n        } else\n            <recovery-expr>()->input->col++;\n        <recovery-expr>()->input->cur += rl;\n    } while (0);\n    cur = xmlCurrentChar(<recovery-expr>(), &l);\n    if (cur == 0)\n        goto not_terminated;\n    while (IS_CHAR(cur) && ((cur != '>') || (r != '-') || (q != '-')))\n        {\n            if ((r == '-') && (q == '-')) {\n            }\n            if (<recovery-expr>() + 5 >= <recovery-expr>()) {\n                if (<recovery-expr>()) {\n                    xmlFree(<recovery-expr>());\n                    return;\n                }\n            }\n            if (ql == 1)\n                <recovery-expr>()[<recovery-expr>()++] = q;\n            else\n                <recovery-expr>() += xmlCopyCharMultiByte(&<recovery-expr>()[<recovery-expr>()], q);\n            q = r;\n            ql = rl;\n            r = cur;\n            rl = l;\n            if (<recovery-expr>()) {\n                if (<recovery-expr>())\n                    <recovery-expr>()(<recovery-expr>());\n                ;\n                if (<recovery-expr>())\n                    <recovery-expr>()(<recovery-expr>());\n                ;\n                if (<recovery-expr>()) {\n                    xmlFree(<recovery-expr>());\n                    return;\n                }\n            }\n            do {\n                if (*(<recovery-expr>()->input->cur) == '\\n') {\n                    <recovery-expr>()->input->line++;\n                    <recovery-expr>()->input->col = 1;\n                } else\n                    <recovery-expr>()->input->col++;\n                <recovery-expr>()->input->cur += l;\n            } while (0);\n            cur = xmlCurrentChar(<recovery-expr>(), &l);\n            if (cur == 0) {\n                if (<recovery-expr>())\n                    <recovery-expr>()(<recovery-expr>());\n                ;\n                if (<recovery-expr>())\n                    <recovery-expr>()(<recovery-expr>());\n                ;\n                cur = xmlCurrentChar(<recovery-expr>(), &l);\n            }\n            if (<recovery-expr>()) {\n                xmlFree(<recovery-expr>());\n                return;\n            }\n        }\n    <recovery-expr>()[<recovery-expr>()] = 0;\n    if (cur == 0) {\n    } else if (!IS_CHAR(cur)) {\n    } else {\n        if (inputid != <recovery-expr>()->input->id) {\n        }\n        xmlNextChar(<recovery-expr>());\n        if (<recovery-expr>())\n            <recovery-expr>()->sax->comment(<recovery-expr>()->userData, <recovery-expr>());\n    }\n    xmlFree(<recovery-expr>());\n    return;\n  not_terminated:\n    ;\n    xmlFree(<recovery-expr>());\n    return;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#9031:1#xmlParseAttValueInternal",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    const int *in;\n    int line, col;\n    int maxLength;\n    if (<recovery-expr>())\n        <recovery-expr>()(<recovery-expr>());\n    ;\n    line = <recovery-expr>()->input->line;\n    col = <recovery-expr>()->input->col;\n    if (*<recovery-expr>() != '\"' && *<recovery-expr>() != '\\'') {\n    }\n    col++;\n    if (<recovery-expr>()) {\n        const int *oldbase;\n        if (<recovery-expr>())\n            <recovery-expr>()(<recovery-expr>());\n        ;\n        if (<recovery-expr>() != <recovery-expr>()->input->base) {\n        }\n    }\n    if (normalize) {\n        while (<recovery-expr>())\n            {\n                if (*<recovery-expr>() == 10) {\n                    line++;\n                    col = 1;\n                } else {\n                    col++;\n                }\n                <recovery-expr>()++;\n                if (<recovery-expr>()) {\n                    const int *oldbase;\n                    if (<recovery-expr>())\n                        <recovery-expr>()(<recovery-expr>());\n                    ;\n                    if (<recovery-expr>() != <recovery-expr>()->input->base) {\n                    }\n                    if (<recovery-expr>()) {\n                    }\n                }\n            }\n        while (<recovery-expr>())\n            {\n                col++;\n                if ((*<recovery-expr>()++ == 32) && (*<recovery-expr>() == 32))\n                    break;\n                if (<recovery-expr>()) {\n                    const int *oldbase;\n                    if (<recovery-expr>())\n                        <recovery-expr>()(<recovery-expr>());\n                    ;\n                    if (<recovery-expr>() != <recovery-expr>()->input->base) {\n                    }\n                    if (<recovery-expr>()) {\n                    }\n                }\n            }\n        while (<recovery-expr>())\n            {\n                if (*<recovery-expr>() == 10) {\n                    line++ , col = 1;\n                } else {\n                    col++;\n                }\n                <recovery-expr>()++;\n                if (<recovery-expr>()) {\n                    const int *oldbase;\n                    if (<recovery-expr>())\n                        <recovery-expr>()(<recovery-expr>());\n                    ;\n                    if (<recovery-expr>() != <recovery-expr>()->input->base) {\n                    }\n                    if (<recovery-expr>()) {\n                    }\n                }\n            }\n        if (<recovery-expr>()) {\n        }\n        if (<recovery-expr>())\n            goto need_complex;\n    } else {\n        while (<recovery-expr>())\n            {\n                <recovery-expr>()++;\n                col++;\n                if (<recovery-expr>()) {\n                    const int *oldbase;\n                    if (<recovery-expr>())\n                        <recovery-expr>()(<recovery-expr>());\n                    ;\n                    if (<recovery-expr>() != <recovery-expr>()->input->base) {\n                    }\n                    if (<recovery-expr>()) {\n                    }\n                }\n            }\n        if (<recovery-expr>()) {\n        }\n        if (<recovery-expr>())\n            goto need_complex;\n    }\n    <recovery-expr>()++;\n    col++;\n    if (<recovery-expr>()) {\n        if (alloc)\n            *alloc = 0;\n    } else {\n        if (alloc)\n            *alloc = 1;\n    }\n    <recovery-expr>()->input->cur = <recovery-expr>();\n    <recovery-expr>()->input->line = line;\n    <recovery-expr>()->input->col = col;\n  need_complex:\n    if (alloc)\n        *alloc = 1;\n    return <recovery-expr>()(<recovery-expr>(), len, normalize);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#3930:1#xmlParseAttValueComplex",
            "gotos": 21,
            "labels": 2,
            "body": "{\n    int c, l, in_space = 0;\n    if (<recovery-expr>()->input->cur[(0)] == '\"') {\n        xmlNextChar(<recovery-expr>());\n    } else if (<recovery-expr>()->input->cur[(0)] == '\\'') {\n        xmlNextChar(<recovery-expr>());\n    } else {\n    }\n    if (<recovery-expr>())\n        goto mem_error;\n    c = xmlCurrentChar(<recovery-expr>(), &l);\n    while (<recovery-expr>())\n        {\n            if (c == '&') {\n                in_space = 0;\n                if (<recovery-expr>()->input->cur[(1)] == '#') {\n                    int val = <recovery-expr>()(<recovery-expr>());\n                    if (val == '&') {\n                        if (<recovery-expr>()->replaceEntities) {\n                            if (<recovery-expr>()) {\n                                {\n                                    if (<recovery-expr>())\n                                        goto mem_error;\n                                    if (<recovery-expr>())\n                                        goto mem_error;\n                                }\n                                ;\n                            }\n                        } else {\n                            if (<recovery-expr>()) {\n                                {\n                                    if (<recovery-expr>())\n                                        goto mem_error;\n                                    if (<recovery-expr>())\n                                        goto mem_error;\n                                }\n                                ;\n                            }\n                        }\n                    } else if (val != 0) {\n                        if (<recovery-expr>()) {\n                            {\n                                if (<recovery-expr>())\n                                    goto mem_error;\n                                if (<recovery-expr>())\n                                    goto mem_error;\n                            }\n                            ;\n                        }\n                    }\n                } else {\n                    <recovery-expr>()->nbentities++;\n                    if (<recovery-expr>()) {\n                        if (<recovery-expr>()) {\n                            {\n                                if (<recovery-expr>())\n                                    goto mem_error;\n                                if (<recovery-expr>())\n                                    goto mem_error;\n                            }\n                            ;\n                        }\n                        if (<recovery-expr>()) {\n                        } else {\n                        }\n                    } else if (<recovery-expr>()) {\n                        if (<recovery-expr>()) {\n                            ++<recovery-expr>()->depth;\n                            --<recovery-expr>()->depth;\n                            if (<recovery-expr>()) {\n                                while (<recovery-expr>())\n                                    {\n                                        if (<recovery-expr>()) {\n                                        } else\n                                            ;\n                                        if (<recovery-expr>()) {\n                                            {\n                                                if (<recovery-expr>())\n                                                    goto mem_error;\n                                                if (<recovery-expr>())\n                                                    goto mem_error;\n                                            }\n                                            ;\n                                        }\n                                    }\n                            }\n                        } else {\n                            if (<recovery-expr>()) {\n                                {\n                                    if (<recovery-expr>())\n                                        goto mem_error;\n                                    if (<recovery-expr>())\n                                        goto mem_error;\n                                }\n                                ;\n                            }\n                        }\n                    } else if (<recovery-expr>()) {\n                        int i;\n                        const int *cur;\n                        if (<recovery-expr>()) {\n                            unsigned long oldnbent = <recovery-expr>()->nbentities, diff;\n                            ++<recovery-expr>()->depth;\n                            --<recovery-expr>()->depth;\n                            diff = <recovery-expr>()->nbentities - oldnbent + 1;\n                            if (<recovery-expr>()) {\n                            } else {\n                            }\n                        }\n                        while (<recovery-expr>())\n                            {\n                                {\n                                    if (<recovery-expr>())\n                                        goto mem_error;\n                                    if (<recovery-expr>())\n                                        goto mem_error;\n                                }\n                                ;\n                            }\n                    }\n                }\n            } else {\n                if ((c == 32) || (c == 13) || (c == 10) || (c == 9)) {\n                    if (<recovery-expr>()) {\n                        if ((!normalize) || (!in_space)) {\n                            while (<recovery-expr>())\n                                {\n                                    {\n                                        if (<recovery-expr>())\n                                            goto mem_error;\n                                        if (<recovery-expr>())\n                                            goto mem_error;\n                                    }\n                                    ;\n                                }\n                        }\n                        in_space = 1;\n                    }\n                } else {\n                    in_space = 0;\n                    if (<recovery-expr>()) {\n                        {\n                            if (<recovery-expr>())\n                                goto mem_error;\n                            if (<recovery-expr>())\n                                goto mem_error;\n                        }\n                        ;\n                    }\n                }\n                do {\n                    if (*(<recovery-expr>()->input->cur) == '\\n') {\n                        <recovery-expr>()->input->line++;\n                        <recovery-expr>()->input->col = 1;\n                    } else\n                        <recovery-expr>()->input->col++;\n                    <recovery-expr>()->input->cur += l;\n                } while (0);\n            }\n            if (<recovery-expr>())\n                <recovery-expr>()(<recovery-expr>());\n            ;\n            c = xmlCurrentChar(<recovery-expr>(), &l);\n            if (<recovery-expr>()) {\n                goto mem_error;\n            }\n        }\n    if (<recovery-expr>())\n        goto error;\n    if ((in_space) && (normalize)) {\n    }\n    if ((*<recovery-expr>()->input->cur) == '<') {\n    } else if (<recovery-expr>()) {\n        if ((c != 0) && (!IS_CHAR(c))) {\n        } else {\n        }\n    } else\n        xmlNextChar(<recovery-expr>());\n  mem_error:\n    ;\n  error:\n    ;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#1358:1#xmlAddSpecialAttr",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    if (<recovery-expr>()) {\n        <recovery-expr>()->attsSpecial = xmlHashCreateDict(10, <recovery-expr>()->dict);\n        if (<recovery-expr>())\n            goto mem_error;\n    }\n    if (<recovery-expr>())\n        return;\n    return;\n  mem_error:\n    ;\n    return;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#4442:1#xmlParseCharData",
            "gotos": 3,
            "labels": 2,
            "body": "{\n    const int *in;\n    int nbchar = 0;\n    int line = <recovery-expr>()->input->line;\n    int col = <recovery-expr>()->input->col;\n    int ccol;\n    if (<recovery-expr>())\n        <recovery-expr>()(<recovery-expr>());\n    ;\n    if (<recovery-expr>())\n        <recovery-expr>()(<recovery-expr>());\n    ;\n    if (!cdata) {\n        <recovery-expr>() = <recovery-expr>()->input->cur;\n        do {\n          get_more_space:\n            while (*<recovery-expr>() == 32)\n                {\n                    <recovery-expr>()++;\n                    <recovery-expr>()->input->col++;\n                }\n            if (*<recovery-expr>() == 10) {\n                do {\n                    <recovery-expr>()->input->line++;\n                    <recovery-expr>()->input->col = 1;\n                    <recovery-expr>()++;\n                } while (*<recovery-expr>() == 10);\n                goto get_more_space;\n            }\n            if (*<recovery-expr>() == '<') {\n                nbchar = <recovery-expr>() - <recovery-expr>()->input->cur;\n                if (nbchar > 0) {\n                    const int *tmp;\n                    <recovery-expr>()->input->cur = <recovery-expr>();\n                    if (<recovery-expr>()) {\n                        if (<recovery-expr>()(<recovery-expr>(), <recovery-expr>(), nbchar, 1)) {\n                            if (<recovery-expr>())\n                                <recovery-expr>()->sax->ignorableWhitespace(<recovery-expr>()->userData, <recovery-expr>(), nbchar);\n                        } else {\n                            if (<recovery-expr>())\n                                <recovery-expr>()->sax->characters(<recovery-expr>()->userData, <recovery-expr>(), nbchar);\n                            if (*<recovery-expr>()->space == -1)\n                                *<recovery-expr>()->space = -2;\n                        }\n                    } else if (<recovery-expr>()) {\n                        <recovery-expr>()->sax->characters(<recovery-expr>()->userData, <recovery-expr>(), nbchar);\n                    }\n                }\n                return;\n            }\n          get_more:\n            ccol = <recovery-expr>()->input->col;\n            while (test_char_data[*<recovery-expr>()])\n                {\n                    <recovery-expr>()++;\n                    ccol++;\n                }\n            <recovery-expr>()->input->col = ccol;\n            if (*<recovery-expr>() == 10) {\n                do {\n                    <recovery-expr>()->input->line++;\n                    <recovery-expr>()->input->col = 1;\n                    <recovery-expr>()++;\n                } while (*<recovery-expr>() == 10);\n                goto get_more;\n            }\n            if (*<recovery-expr>() == ']') {\n                if ((<recovery-expr>()[1] == ']') && (<recovery-expr>()[2] == '>')) {\n                    <recovery-expr>()->input->cur = <recovery-expr>() + 1;\n                    return;\n                }\n                <recovery-expr>()++;\n                <recovery-expr>()->input->col++;\n                goto get_more;\n            }\n            nbchar = <recovery-expr>() - <recovery-expr>()->input->cur;\n            if (nbchar > 0) {\n                if (<recovery-expr>()) {\n                    const int *tmp;\n                    <recovery-expr>()->input->cur = <recovery-expr>();\n                    if (<recovery-expr>()(<recovery-expr>(), <recovery-expr>(), nbchar, 0)) {\n                        if (<recovery-expr>())\n                            <recovery-expr>()->sax->ignorableWhitespace(<recovery-expr>()->userData, <recovery-expr>(), nbchar);\n                    } else {\n                        if (<recovery-expr>())\n                            <recovery-expr>()->sax->characters(<recovery-expr>()->userData, <recovery-expr>(), nbchar);\n                        if (*<recovery-expr>()->space == -1)\n                            *<recovery-expr>()->space = -2;\n                    }\n                    line = <recovery-expr>()->input->line;\n                    col = <recovery-expr>()->input->col;\n                } else if (<recovery-expr>()) {\n                    if (<recovery-expr>())\n                        <recovery-expr>()->sax->characters(<recovery-expr>()->userData, <recovery-expr>()->input->cur, nbchar);\n                    line = <recovery-expr>()->input->line;\n                    col = <recovery-expr>()->input->col;\n                }\n                if (<recovery-expr>())\n                    return;\n            }\n            <recovery-expr>()->input->cur = <recovery-expr>();\n            if (*<recovery-expr>() == 13) {\n                <recovery-expr>()++;\n                if (*<recovery-expr>() == 10) {\n                    <recovery-expr>()->input->cur = <recovery-expr>();\n                    <recovery-expr>()++;\n                    <recovery-expr>()->input->line++;\n                    <recovery-expr>()->input->col = 1;\n                    continue;\n                }\n                <recovery-expr>()--;\n            }\n            if (*<recovery-expr>() == '<') {\n                return;\n            }\n            if (*<recovery-expr>() == '&') {\n                return;\n            }\n            if (<recovery-expr>())\n                <recovery-expr>()(<recovery-expr>());\n            ;\n            if (<recovery-expr>())\n                <recovery-expr>()(<recovery-expr>());\n            ;\n            if (<recovery-expr>())\n                return;\n            <recovery-expr>() = <recovery-expr>()->input->cur;\n        } while (((*<recovery-expr>() >= 32) && (*<recovery-expr>() <= 127)) || (*<recovery-expr>() == 9) || (*<recovery-expr>() == 10));\n        nbchar = 0;\n    }\n    <recovery-expr>()->input->line = line;\n    <recovery-expr>()->input->col = col;\n    <recovery-expr>()(<recovery-expr>(), cdata);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#1479:1#xmlCheckLanguageID",
            "gotos": 10,
            "labels": 4,
            "body": "{\n    const int *cur;\n    if (<recovery-expr>())\n        return (0);\n    if (((<recovery-expr>()[0] == 'i') && (<recovery-expr>()[1] == '-')) || ((<recovery-expr>()[0] == 'I') && (<recovery-expr>()[1] == '-')) || ((<recovery-expr>()[0] == 'x') && (<recovery-expr>()[1] == '-')) || ((<recovery-expr>()[0] == 'X') && (<recovery-expr>()[1] == '-'))) {\n        <recovery-expr>() += 2;\n        while (((<recovery-expr>()[0] >= 'A') && (<recovery-expr>()[0] <= 'Z')) || ((<recovery-expr>()[0] >= 'a') && (<recovery-expr>()[0] <= 'z')))\n            <recovery-expr>()++;\n        return (<recovery-expr>()[0] == 0);\n    }\n    if (<recovery-expr>()) {\n        if (<recovery-expr>())\n            return (0);\n        return (1);\n    }\n    if (<recovery-expr>())\n        return (0);\n    if (<recovery-expr>())\n        return (1);\n    if (<recovery-expr>())\n        return (0);\n    if (<recovery-expr>())\n        goto region_m49;\n    if (<recovery-expr>())\n        goto script;\n    if (<recovery-expr>())\n        goto region;\n    if (<recovery-expr>())\n        goto variant;\n    if (<recovery-expr>())\n        return (0);\n    if (<recovery-expr>())\n        return (1);\n    if (<recovery-expr>())\n        return (0);\n    if (<recovery-expr>())\n        goto region_m49;\n    if (<recovery-expr>())\n        goto region;\n    if (<recovery-expr>())\n        goto variant;\n    if (<recovery-expr>())\n        return (0);\n  script:\n    if (<recovery-expr>())\n        return (1);\n    if (<recovery-expr>())\n        return (0);\n    if (<recovery-expr>())\n        goto region_m49;\n    if (<recovery-expr>())\n        goto variant;\n    if (<recovery-expr>())\n        return (0);\n  region:\n    if (<recovery-expr>())\n        return (1);\n    if (<recovery-expr>())\n        return (0);\n    if (<recovery-expr>())\n        return (0);\n  variant:\n    if (<recovery-expr>())\n        return (1);\n    if (<recovery-expr>())\n        return (0);\n    return (1);\n  region_m49:\n    if (<recovery-expr>()) {\n        goto region;\n    }\n    return (0);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#1247:1#xmlAddDefAttrs",
            "gotos": 5,
            "labels": 1,
            "body": "{\n    xmlDefAttrsPtr defaults;\n    int len;\n    const int *name;\n    const int *prefix;\n    if (<recovery-expr>()) {\n        if (<recovery-expr>())\n            return;\n    }\n    if (<recovery-expr>()) {\n        <recovery-expr>()->attsDefault = xmlHashCreateDict(10, <recovery-expr>()->dict);\n        if (<recovery-expr>())\n            goto mem_error;\n    }\n    <recovery-expr>() = xmlSplitQName3(<recovery-expr>(), &len);\n    if (<recovery-expr>()) {\n        <recovery-expr>() = xmlDictLookup(<recovery-expr>()->dict, <recovery-expr>(), -1);\n    } else {\n        <recovery-expr>() = xmlDictLookup(<recovery-expr>()->dict, <recovery-expr>(), -1);\n        <recovery-expr>() = xmlDictLookup(<recovery-expr>()->dict, <recovery-expr>(), len);\n    }\n    defaults = xmlHashLookup2(<recovery-expr>()->attsDefault, <recovery-expr>(), <recovery-expr>());\n    if (<recovery-expr>()) {\n        if (<recovery-expr>())\n            goto mem_error;\n        <recovery-expr>(defaults) = 0;\n        <recovery-expr>(defaults) = 4;\n        if (<recovery-expr>()) {\n            xmlFree(defaults);\n            goto mem_error;\n        }\n    } else if (<recovery-expr>(defaults) >= <recovery-expr>(defaults)) {\n        xmlDefAttrsPtr temp;\n        if (<recovery-expr>())\n            goto mem_error;\n        defaults = temp;\n        <recovery-expr>(defaults) *= 2;\n        if (<recovery-expr>()) {\n            xmlFree(defaults);\n            goto mem_error;\n        }\n    }\n    <recovery-expr>() = xmlSplitQName3(<recovery-expr>(), &len);\n    if (<recovery-expr>()) {\n        <recovery-expr>() = xmlDictLookup(<recovery-expr>()->dict, <recovery-expr>(), -1);\n    } else {\n        <recovery-expr>() = xmlDictLookup(<recovery-expr>()->dict, <recovery-expr>(), -1);\n        <recovery-expr>() = xmlDictLookup(<recovery-expr>()->dict, <recovery-expr>(), len);\n    }\n    <recovery-expr>(defaults)[5 * <recovery-expr>(defaults)] = <recovery-expr>();\n    <recovery-expr>(defaults)[5 * <recovery-expr>(defaults) + 1] = <recovery-expr>();\n    len = xmlStrlen(<recovery-expr>());\n    <recovery-expr>() = xmlDictLookup(<recovery-expr>()->dict, <recovery-expr>(), len);\n    <recovery-expr>(defaults)[5 * <recovery-expr>(defaults) + 2] = <recovery-expr>();\n    <recovery-expr>(defaults)[5 * <recovery-expr>(defaults) + 3] = <recovery-expr>() + len;\n    <recovery-expr>(defaults)++;\n    return;\n  mem_error:\n    ;\n    return;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#1875:1#nameNsPush",
            "gotos": 3,
            "labels": 1,
            "body": "{\n    if (<recovery-expr>()->nameNr >= <recovery-expr>()->nameMax) {\n        const int **tmp;\n        <recovery-expr>()->nameMax *= 2;\n        if (<recovery-expr>()) {\n            <recovery-expr>()->nameMax /= 2;\n            goto mem_error;\n        }\n        <recovery-expr>()->nameTab = <recovery-expr>();\n        if (<recovery-expr>()) {\n            <recovery-expr>()->nameMax /= 2;\n            goto mem_error;\n        }\n    } else if (<recovery-expr>()) {\n        if (<recovery-expr>())\n            goto mem_error;\n    }\n    <recovery-expr>()->nameTab[<recovery-expr>()->nameNr] = <recovery-expr>();\n    <recovery-expr>()->name = <recovery-expr>();\n    return (<recovery-expr>()->nameNr++);\n  mem_error:\n    ;\n    return (-1);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#1955:1#namePush",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    if (<recovery-expr>())\n        return (-1);\n    if (<recovery-expr>()->nameNr >= <recovery-expr>()->nameMax) {\n        const int **tmp;\n        if (<recovery-expr>()) {\n            goto mem_error;\n        }\n        <recovery-expr>()->nameTab = <recovery-expr>();\n        <recovery-expr>()->nameMax *= 2;\n    }\n    <recovery-expr>()->nameTab[<recovery-expr>()->nameNr] = <recovery-expr>();\n    <recovery-expr>()->name = <recovery-expr>();\n    return (<recovery-expr>()->nameNr++);\n  mem_error:\n    ;\n    return (-1);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#1707:1#xmlCtxtGrowAttrs",
            "gotos": 4,
            "labels": 1,
            "body": "{\n    const int **atts;\n    int *attallocs;\n    int maxatts;\n    if (<recovery-expr>()) {\n        maxatts = 55;\n        if (<recovery-expr>())\n            goto mem_error;\n        <recovery-expr>()->atts = <recovery-expr>();\n        attallocs = (int *)xmlMalloc((maxatts / 5) * sizeof(int));\n        if (<recovery-expr>())\n            goto mem_error;\n        <recovery-expr>()->attallocs = attallocs;\n        <recovery-expr>()->maxatts = maxatts;\n    } else if (nr + 5 > <recovery-expr>()->maxatts) {\n        maxatts = (nr + 5) * 2;\n        if (<recovery-expr>())\n            goto mem_error;\n        <recovery-expr>()->atts = <recovery-expr>();\n        attallocs = (int *)xmlRealloc((void *)<recovery-expr>()->attallocs, (maxatts / 5) * sizeof(int));\n        if (<recovery-expr>())\n            goto mem_error;\n        <recovery-expr>()->attallocs = attallocs;\n        <recovery-expr>()->maxatts = maxatts;\n    }\n    return (<recovery-expr>()->maxatts);\n  mem_error:\n    ;\n    return (-1);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#3776:1#xmlParseEntityValue",
            "gotos": 7,
            "labels": 1,
            "body": "{\n    int len = 0;\n    int size = 100;\n    int c, l;\n    int maxLength;\n    const int *cur;\n    if ((*<recovery-expr>()->input->cur) == '\"')\n        ;\n    else if ((*<recovery-expr>()->input->cur) == '\\'')\n        ;\n    else {\n    }\n    if (<recovery-expr>()) {\n    }\n    if (<recovery-expr>())\n        <recovery-expr>()(<recovery-expr>());\n    ;\n    if (<recovery-expr>())\n        goto error;\n    xmlNextChar(<recovery-expr>());\n    c = xmlCurrentChar(<recovery-expr>(), &l);\n    while (<recovery-expr>())\n        {\n            if (len + 5 >= size) {\n                size *= 2;\n                if (<recovery-expr>()) {\n                    goto error;\n                }\n            }\n            do {\n                if (*(<recovery-expr>()->input->cur) == '\\n') {\n                    <recovery-expr>()->input->line++;\n                    <recovery-expr>()->input->col = 1;\n                } else\n                    <recovery-expr>()->input->col++;\n                <recovery-expr>()->input->cur += l;\n            } while (0);\n            if (<recovery-expr>())\n                <recovery-expr>()(<recovery-expr>());\n            ;\n            c = xmlCurrentChar(<recovery-expr>(), &l);\n            if (c == 0) {\n                if (<recovery-expr>())\n                    <recovery-expr>()(<recovery-expr>());\n                ;\n                c = xmlCurrentChar(<recovery-expr>(), &l);\n            }\n            if (len > maxLength) {\n                goto error;\n            }\n        }\n    if (<recovery-expr>())\n        goto error;\n    if (<recovery-expr>()) {\n        goto error;\n    }\n    xmlNextChar(<recovery-expr>());\n    while (*<recovery-expr>() != 0)\n        {\n            if ((*<recovery-expr>() == '%') || ((*<recovery-expr>() == '&') && (<recovery-expr>()[1] != '#'))) {\n                int nameOk = 0;\n                <recovery-expr>()++;\n                if (<recovery-expr>()) {\n                    nameOk = 1;\n                }\n                if ((nameOk == 0) || (*<recovery-expr>() != ';')) {\n                    goto error;\n                }\n                if (<recovery-expr>()) {\n                    goto error;\n                }\n                if (*<recovery-expr>() == 0)\n                    break;\n            }\n            <recovery-expr>()++;\n        }\n    ++<recovery-expr>()->depth;\n    --<recovery-expr>()->depth;\n    if (<recovery-expr>()) {\n    }\n  error:\n    ;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/parser.c#3472:1#xmlParseNCName",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    const int *in;\n    const int *ret;\n    <recovery-expr>() = <recovery-expr>()->input->cur;\n    if (<recovery-expr>()) {\n        <recovery-expr>()++;\n        while (<recovery-expr>())\n            <recovery-expr>()++;\n        if (<recovery-expr>())\n            goto complex;\n        if ((*<recovery-expr>() > 0) && (*<recovery-expr>() < 128)) {\n            if (<recovery-expr>()) {\n            }\n            <recovery-expr>()->input->cur = <recovery-expr>();\n            if (<recovery-expr>()) {\n            }\n            return (<recovery-expr>());\n        }\n    }\n  complex:\n    return (<recovery-expr>()(<recovery-expr>()));\n}\n"
        }
    ],
    "total": 132,
    "visited": 17
}
