{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/tree.c#10010:1#xmlDOMWrapAdoptAttr",
            "gotos": 4,
            "labels": 2,
            "body": "{\n    int adoptStr = 1;\n    if (<recovery-expr>())\n        return (-1);\n    <recovery-expr>()->doc = <recovery-expr>();\n    if (<recovery-expr>()) {\n        if (<recovery-expr>()) {\n        }\n        if (<recovery-expr>()) {\n        } else if (<recovery-expr>()) {\n        } else {\n            if (<recovery-expr>())\n                goto internal_error;\n            if (<recovery-expr>()) {\n            }\n        }\n        if (<recovery-expr>())\n            goto internal_error;\n    }\n    if (<recovery-expr>()) {\n        if (<recovery-expr>()->dict) {\n            const int *old;\n            <recovery-expr>()->name = xmlDictLookup(<recovery-expr>()->dict, <recovery-expr>()->name, -1);\n            if (<recovery-expr>())\n                xmlFree((char *)<recovery-expr>());\n        } else if ((<recovery-expr>()) && (<recovery-expr>()->dict) && xmlDictOwns(<recovery-expr>()->dict, <recovery-expr>()->name)) {\n        }\n    }\n    ;\n    <recovery-expr>()->atype = 0;\n    if (<recovery-expr>())\n        return (0);\n    if (<recovery-expr>())\n        goto internal_error;\n    while (<recovery-expr>())\n        {\n            switch (<recovery-expr>()) {\n                if (<recovery-expr>()) {\n                }\n                break;\n                if ((<recovery-expr>()->intSubset) || (<recovery-expr>()->extSubset)) {\n                    if (<recovery-expr>()) {\n                    }\n                }\n                break;\n              default:\n                break;\n            }\n            if (<recovery-expr>()) {\n                continue;\n            }\n          next_sibling:\n            if (<recovery-expr>())\n                break;\n            if (<recovery-expr>())\n                ;\n            else {\n                goto next_sibling;\n            }\n        }\n    return (0);\n  internal_error:\n    return (-1);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/tree.c#9114:1#xmlDOMWrapAdoptBranch",
            "gotos": 13,
            "labels": 4,
            "body": "{\n    int ret = 0;\n    xmlNsMapPtr nsMap;\n    xmlNsMapItemPtr mi;\n    int depth = -1, adoptStr = 1;\n    int parnsdone;\n    int ancestorsOnly = 0;\n    if (<recovery-expr>())\n        adoptStr = 0;\n    else\n        adoptStr = 1;\n    if (<recovery-expr>())\n        nsMap = (xmlNsMapPtr)<recovery-expr>()->namespaceMap;\n    if (<recovery-expr>()) {\n        parnsdone = 1;\n    } else\n        parnsdone = 0;\n    if (<recovery-expr>())\n        goto internal_error;\n    while (<recovery-expr>())\n        {\n            if (<recovery-expr>()) {\n                if (<recovery-expr>())\n                    goto leave_node;\n                do {\n                    if (<recovery-expr>())\n                        break;\n                } while (<recovery-expr>());\n                if (<recovery-expr>())\n                    goto leave_node;\n            }\n            switch (<recovery-expr>()) {\n                return (-1);\n                depth++;\n                if (<recovery-expr>()) {\n                    if (!parnsdone) {\n                        if (<recovery-expr>()(&nsMap, <recovery-expr>()) == -1)\n                            goto internal_error;\n                        parnsdone = 1;\n                    }\n                }\n                if (<recovery-expr>())\n                    goto ns_end;\n                if (!parnsdone) {\n                    if (<recovery-expr>()(&nsMap, <recovery-expr>()) == -1)\n                        goto internal_error;\n                    parnsdone = 1;\n                }\n                if (<recovery-expr>()) {\n                }\n                if ((<recovery-expr>()) && (<recovery-expr>()->getNsForNodeFunc)) {\n                    if (<recovery-expr>())\n                        goto internal_error;\n                } else {\n                    if (<recovery-expr>())\n                        goto internal_error;\n                }\n              ns_end:\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()->dict) {\n                        const int *old;\n                        if (<recovery-expr>())\n                            xmlFree((char *)<recovery-expr>());\n                    } else if (<recovery-expr>()) {\n                    }\n                }\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()) {\n                        continue;\n                    }\n                } else {\n                    if (<recovery-expr>()) {\n                    }\n                }\n                break;\n                if (<recovery-expr>()) {\n                }\n                goto leave_node;\n                if ((<recovery-expr>()->intSubset) || (<recovery-expr>()->extSubset)) {\n                    if (<recovery-expr>()) {\n                    }\n                }\n                goto leave_node;\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()->dict) {\n                        const int *old;\n                        if (<recovery-expr>())\n                            xmlFree((char *)<recovery-expr>());\n                    } else if (<recovery-expr>()) {\n                    }\n                }\n                if (<recovery-expr>()) {\n                }\n                break;\n                break;\n              default:\n                goto internal_error;\n            }\n            if (<recovery-expr>()) {\n                continue;\n            }\n          leave_node:\n            if (<recovery-expr>())\n                break;\n            if (<recovery-expr>()) {\n                if (<recovery-expr>()) {\n                    while (<recovery-expr>())\n                        {\n                            mi = (nsMap)->last;\n                            (nsMap)->last = (mi)->prev;\n                            (mi)->next = (nsMap)->pool;\n                            (nsMap)->pool = mi;\n                        }\n                }\n                depth--;\n            }\n            if (<recovery-expr>())\n                ;\n            else if (<recovery-expr>()) {\n            } else {\n                goto leave_node;\n            }\n        }\n    goto exit;\n  internal_error:\n    ret = -1;\n  exit:\n    if (<recovery-expr>()) {\n        if ((<recovery-expr>()) && (<recovery-expr>()->namespaceMap == nsMap)) {\n            if (nsMap->first) {\n                if (nsMap->pool)\n                    nsMap->last->next = nsMap->pool;\n                nsMap->pool = nsMap->first;\n            }\n        } else\n            xmlDOMWrapNsMapFree(nsMap);\n    }\n    return (ret);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/tree.c#8851:1#xmlDOMWrapReconcileNamespaces",
            "gotos": 10,
            "labels": 6,
            "body": "{\n    int depth = -1, adoptns = 0, parnsdone = 0;\n    xmlNsMapPtr nsMap;\n    xmlNsMapItemPtr mi;\n    int ancestorsOnly = 0;\n    int optRemoveRedundantNS;\n    int sizeRedund = 0, nbRedund = 0, ret, i, j;\n    if (<recovery-expr>())\n        return (-1);\n    do {\n        switch (<recovery-expr>()) {\n            adoptns = 1;\n            depth++;\n            if (<recovery-expr>()) {\n                while (<recovery-expr>())\n                    {\n                        if (!parnsdone) {\n                            if (<recovery-expr>()) {\n                                if (<recovery-expr>())\n                                    goto internal_error;\n                            }\n                            parnsdone = 1;\n                        }\n                        if (<recovery-expr>()) {\n                        }\n                        if (<recovery-expr>())\n                            adoptns = 0;\n                        if (<recovery-expr>()) {\n                        }\n                        if (<recovery-expr>())\n                            goto internal_error;\n                      next_ns_decl:\n                        ;\n                    }\n            }\n            if (!adoptns)\n                goto ns_end;\n            if (<recovery-expr>())\n                goto ns_end;\n            if (!parnsdone) {\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>())\n                        goto internal_error;\n                }\n                parnsdone = 1;\n            }\n            if (<recovery-expr>()) {\n                for (i = 0 , j = 0; i < nbRedund; i++ , j += 2) {\n                    if (<recovery-expr>()) {\n                        break;\n                    }\n                }\n            }\n            if (<recovery-expr>()) {\n            }\n            if (<recovery-expr>())\n                goto internal_error;\n          ns_end:\n            if (<recovery-expr>()) {\n                continue;\n            }\n            break;\n          default:\n            goto next_sibling;\n        }\n      into_content:\n        if (<recovery-expr>()) {\n            continue;\n        }\n      next_sibling:\n        if (<recovery-expr>())\n            break;\n        if (<recovery-expr>()) {\n            if (<recovery-expr>()) {\n                while (<recovery-expr>())\n                    {\n                        mi = (nsMap)->last;\n                        (nsMap)->last = (mi)->prev;\n                        (mi)->next = (nsMap)->pool;\n                        (nsMap)->pool = mi;\n                    }\n            }\n            depth--;\n        }\n        if (<recovery-expr>())\n            ;\n        else {\n            if (<recovery-expr>()) {\n                goto into_content;\n            }\n            goto next_sibling;\n        }\n    } while (<recovery-expr>());\n    ret = 0;\n    goto exit;\n  internal_error:\n    ret = -1;\n  exit:\n    if (<recovery-expr>()) {\n        for (i = 0 , j = 0; i < nbRedund; i++ , j += 2) {\n        }\n    }\n    if (<recovery-expr>())\n        xmlDOMWrapNsMapFree(nsMap);\n    return (ret);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/tree.c#8630:1#xmlDOMWrapNSNormDeclareNsForced",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    char buf[50];\n    const int *pref;\n    int counter = 0;\n    <recovery-expr>() = <recovery-expr>();\n    while (1)\n        {\n            if (<recovery-expr>())\n                goto ns_next_prefix;\n            if (<recovery-expr>()) {\n                if (<recovery-expr>())\n                    goto ns_next_prefix;\n            }\n            if (<recovery-expr>())\n                ;\n            else {\n            }\n          ns_next_prefix:\n            counter++;\n            if (<recovery-expr>()) {\n                snprintf((char *)buf, sizeof (buf), \"ns_%d\", counter);\n            } else\n                snprintf((char *)buf, sizeof (buf), \"%.30s_%d\", (char *)<recovery-expr>(), counter);\n        }\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/tree.c#8330:1#xmlDOMWrapRemoveNode",
            "gotos": 6,
            "labels": 3,
            "body": "{\n    int sizeList, nbList, i, j;\n    if (<recovery-expr>())\n        return (-1);\n    if (<recovery-expr>())\n        return (0);\n    switch (<recovery-expr>()->type) {\n        <recovery-expr>()(<recovery-expr>());\n        return (0);\n        break;\n      default:\n        return (1);\n    }\n    <recovery-expr>()(<recovery-expr>());\n    do {\n        switch (<recovery-expr>()->type) {\n            if (<recovery-expr>()) {\n                do {\n                    if (<recovery-expr>())\n                        goto internal_error;\n                } while (<recovery-expr>());\n            }\n            if (<recovery-expr>()) {\n                if (<recovery-expr>()) {\n                    for (i = 0 , j = 0; i < nbList; i++ , j += 2) {\n                        if (<recovery-expr>()) {\n                            goto next_node;\n                        }\n                    }\n                }\n                if (<recovery-expr>()) {\n                } else {\n                    if (<recovery-expr>())\n                        goto internal_error;\n                }\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>())\n                        goto internal_error;\n                }\n            }\n            if (<recovery-expr>()) {\n                continue;\n            }\n            break;\n          default:\n            goto next_sibling;\n        }\n      next_node:\n        if (<recovery-expr>()) {\n            <recovery-expr>() = <recovery-expr>()->children;\n            continue;\n        }\n      next_sibling:\n        if (<recovery-expr>())\n            break;\n        if (<recovery-expr>())\n            <recovery-expr>() = <recovery-expr>()->next;\n        else {\n            <recovery-expr>() = <recovery-expr>()->parent;\n            goto next_sibling;\n        }\n    } while (<recovery-expr>());\n    return (0);\n  internal_error:\n    ;\n    return (-1);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/tree.c#1268:1#xmlStringLenGetNodeList",
            "gotos": 8,
            "labels": 1,
            "body": "{\n    const int *cur;\n    const int *q;\n    <recovery-expr>() = <recovery-expr>();\n    <recovery-expr>() = <recovery-expr>();\n    while (<recovery-expr>())\n        {\n            if (<recovery-expr>()[0] == '&') {\n                int charval = 0;\n                if (<recovery-expr>() != <recovery-expr>()) {\n                    if (<recovery-expr>())\n                        goto out;\n                }\n                <recovery-expr>() = <recovery-expr>();\n                if (<recovery-expr>()) {\n                    <recovery-expr>() += 3;\n                    while (<recovery-expr>())\n                        {\n                            if (<recovery-expr>())\n                                ;\n                            else if (<recovery-expr>())\n                                ;\n                            else if (<recovery-expr>())\n                                ;\n                            else {\n                                charval = 0;\n                                break;\n                            }\n                            <recovery-expr>()++;\n                        }\n                    if (<recovery-expr>())\n                        <recovery-expr>()++;\n                    <recovery-expr>() = <recovery-expr>();\n                } else if (<recovery-expr>()) {\n                    <recovery-expr>() += 2;\n                    while (<recovery-expr>())\n                        {\n                            if (<recovery-expr>())\n                                ;\n                            else {\n                                charval = 0;\n                                break;\n                            }\n                            <recovery-expr>()++;\n                        }\n                    if (<recovery-expr>())\n                        <recovery-expr>()++;\n                    <recovery-expr>() = <recovery-expr>();\n                } else {\n                    <recovery-expr>()++;\n                    <recovery-expr>() = <recovery-expr>();\n                    while (<recovery-expr>())\n                        <recovery-expr>()++;\n                    if (<recovery-expr>()) {\n                        goto out;\n                    }\n                    if (<recovery-expr>() != <recovery-expr>()) {\n                        if (<recovery-expr>()) {\n                            if (<recovery-expr>())\n                                goto out;\n                        } else {\n                            if (<recovery-expr>()) {\n                                if (<recovery-expr>()) {\n                                    goto out;\n                                }\n                                if (<recovery-expr>()) {\n                                } else {\n                                }\n                            }\n                            if (<recovery-expr>()) {\n                                goto out;\n                            } else if (<recovery-expr>()) {\n                                while (<recovery-expr>())\n                                    {\n                                    }\n                            }\n                            if (<recovery-expr>()) {\n                            } else {\n                            }\n                        }\n                    }\n                    <recovery-expr>()++;\n                    <recovery-expr>() = <recovery-expr>();\n                }\n                if (charval != 0) {\n                    int l;\n                    if (<recovery-expr>())\n                        goto out;\n                    charval = 0;\n                }\n            } else\n                <recovery-expr>()++;\n        }\n    if (<recovery-expr>() != <recovery-expr>()) {\n        if (<recovery-expr>())\n            goto out;\n    }\n    if (<recovery-expr>()) {\n        if (<recovery-expr>())\n            goto out;\n        if (<recovery-expr>()) {\n        } else {\n        }\n    } else if (<recovery-expr>()) {\n    }\n  out:\n    ;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/tree.c#4251:1#xmlStaticCopyNode",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    switch (<recovery-expr>()->type) {\n        break;\n    }\n    if (<recovery-expr>()) {\n        xmlTreeErrMemory(\"copying node\");\n    }\n    if (<recovery-expr>()->name == <recovery-expr>())\n        ;\n    else if (<recovery-expr>()->name == <recovery-expr>())\n        ;\n    else if (<recovery-expr>()->name == <recovery-expr>())\n        ;\n    else if (<recovery-expr>()) {\n    }\n    if (<recovery-expr>()) {\n    } else {\n    }\n    if (<recovery-expr>()) {\n    }\n    if (!extended)\n        goto out;\n    if (<recovery-expr>()) {\n        if (<recovery-expr>()) {\n            if (<recovery-expr>()) {\n            } else {\n            }\n        } else {\n        }\n    }\n    if (<recovery-expr>()) {\n        if (<recovery-expr>()) {\n        } else {\n        }\n    } else if (<recovery-expr>()) {\n        while (<recovery-expr>())\n            {\n                if (<recovery-expr>()) {\n                }\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()) {\n                    } else {\n                    }\n                }\n                if (<recovery-expr>()) {\n                    continue;\n                }\n                while (1)\n                    {\n                        if (<recovery-expr>()) {\n                            break;\n                        }\n                        if (<recovery-expr>()) {\n                            break;\n                        }\n                    }\n            }\n    }\n  out:\n    ;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/tree.c#9482:1#xmlDOMWrapCloneNode",
            "gotos": 20,
            "labels": 5,
            "body": "{\n    int ret = 0;\n    xmlNsMapPtr nsMap;\n    xmlNsMapItemPtr mi;\n    int depth = -1;\n    int parnsdone = 0;\n    int ancestorsOnly = 0;\n    if (<recovery-expr>())\n        return (-1);\n    if (<recovery-expr>())\n        return (1);\n    if (<recovery-expr>()) {\n        return (-1);\n    }\n    if (<recovery-expr>())\n        <recovery-expr>() = <recovery-expr>()->doc;\n    if (<recovery-expr>())\n        return (-1);\n    if (<recovery-expr>())\n        nsMap = (xmlNsMapPtr)<recovery-expr>()->namespaceMap;\n    if (<recovery-expr>())\n        return (-1);\n    while (<recovery-expr>())\n        {\n            if (<recovery-expr>()) {\n                goto internal_error;\n            }\n            switch (<recovery-expr>()) {\n                goto internal_error;\n                break;\n                if (<recovery-expr>()) {\n                    xmlTreeErrMemory(\"xmlDOMWrapCloneNode(): allocating a node\");\n                    goto internal_error;\n                }\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()) {\n                    } else\n                        ;\n                } else\n                    ;\n                break;\n                if (<recovery-expr>()) {\n                    xmlTreeErrMemory(\"xmlDOMWrapCloneNode(): allocating an attr-node\");\n                    goto internal_error;\n                }\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()) {\n                    } else\n                        ;\n                } else\n                    ;\n                break;\n              default:\n                goto internal_error;\n            }\n            if (<recovery-expr>())\n                ;\n            else if (<recovery-expr>())\n                ;\n            else if (<recovery-expr>())\n                ;\n            else if (<recovery-expr>()) {\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()) {\n                    } else\n                        ;\n                }\n                ;\n            }\n            switch (<recovery-expr>()) {\n                return (-1);\n                depth++;\n                if (<recovery-expr>()) {\n                    if (!parnsdone) {\n                        if (<recovery-expr>()) {\n                            if (<recovery-expr>()(&nsMap, <recovery-expr>()) == -1)\n                                goto internal_error;\n                        }\n                        parnsdone = 1;\n                    }\n                }\n                break;\n                break;\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()) {\n                    } else\n                        ;\n                }\n                ;\n                goto leave_node;\n                goto leave_node;\n                if (<recovery-expr>() != <recovery-expr>()) {\n                    if ((<recovery-expr>()->intSubset) || (<recovery-expr>()->extSubset)) {\n                        if (<recovery-expr>()) {\n                        }\n                    }\n                } else {\n                }\n                goto leave_node;\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()) {\n                    } else\n                        ;\n                }\n                ;\n                goto leave_node;\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()) {\n                    } else\n                        ;\n                }\n                ;\n                goto leave_node;\n              default:\n                goto internal_error;\n            }\n            if (<recovery-expr>())\n                goto end_ns_reference;\n            if (!parnsdone) {\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()(&nsMap, <recovery-expr>()) == -1)\n                        goto internal_error;\n                }\n                parnsdone = 1;\n            }\n            if (<recovery-expr>()) {\n            }\n            if (<recovery-expr>()) {\n                if (<recovery-expr>())\n                    goto internal_error;\n            } else {\n                if (<recovery-expr>())\n                    goto internal_error;\n            }\n          end_ns_reference:\n            if (<recovery-expr>()) {\n                if (<recovery-expr>()) {\n                    if (<recovery-expr>()) {\n                        if (<recovery-expr>()) {\n                            goto internal_error;\n                        }\n                    }\n                }\n            }\n            if (<recovery-expr>()) {\n                continue;\n            }\n          into_content:\n            if (<recovery-expr>()) {\n                if (<recovery-expr>()) {\n                    continue;\n                }\n            }\n          leave_node:\n            if (<recovery-expr>())\n                break;\n            if (<recovery-expr>()) {\n                if (<recovery-expr>()) {\n                    while (<recovery-expr>())\n                        {\n                            mi = (nsMap)->last;\n                            (nsMap)->last = (mi)->prev;\n                            (mi)->next = (nsMap)->pool;\n                            (nsMap)->pool = mi;\n                        }\n                }\n                depth--;\n            }\n            if (<recovery-expr>()) {\n            } else if (<recovery-expr>()) {\n                goto leave_node;\n            } else {\n                goto into_content;\n            }\n        }\n    goto exit;\n  internal_error:\n    ret = -1;\n  exit:\n    if (<recovery-expr>()) {\n        if ((<recovery-expr>()) && (<recovery-expr>()->namespaceMap == nsMap)) {\n            if (nsMap->first) {\n                if (nsMap->pool)\n                    nsMap->last->next = nsMap->pool;\n                nsMap->pool = nsMap->first;\n            }\n        } else\n            xmlDOMWrapNsMapFree(nsMap);\n    }\n    return (ret);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/tree.c#1491:1#xmlStringGetNodeList",
            "gotos": 6,
            "labels": 1,
            "body": "{\n    const int *cur;\n    const int *q;\n    <recovery-expr>() = <recovery-expr>();\n    while (*<recovery-expr>() != 0)\n        {\n            if (<recovery-expr>()[0] == '&') {\n                int charval = 0;\n                if (<recovery-expr>() != <recovery-expr>()) {\n                    if (<recovery-expr>())\n                        goto out;\n                }\n                <recovery-expr>() = <recovery-expr>();\n                if ((<recovery-expr>()[1] == '#') && (<recovery-expr>()[2] == 'x')) {\n                    <recovery-expr>() += 3;\n                    while (<recovery-expr>())\n                        {\n                            if (<recovery-expr>())\n                                ;\n                            else if (<recovery-expr>())\n                                ;\n                            else if (<recovery-expr>())\n                                ;\n                            else {\n                                charval = 0;\n                                break;\n                            }\n                            <recovery-expr>()++;\n                        }\n                    if (<recovery-expr>())\n                        <recovery-expr>()++;\n                    <recovery-expr>() = <recovery-expr>();\n                } else if (<recovery-expr>()[1] == '#') {\n                    <recovery-expr>() += 2;\n                    while (<recovery-expr>())\n                        {\n                            if (<recovery-expr>())\n                                ;\n                            else {\n                                charval = 0;\n                                break;\n                            }\n                            <recovery-expr>()++;\n                        }\n                    if (<recovery-expr>())\n                        <recovery-expr>()++;\n                    <recovery-expr>() = <recovery-expr>();\n                } else {\n                    <recovery-expr>()++;\n                    <recovery-expr>() = <recovery-expr>();\n                    while ((*<recovery-expr>() != 0) && (*<recovery-expr>() != ';'))\n                        <recovery-expr>()++;\n                    if (*<recovery-expr>() == 0) {\n                        goto out;\n                    }\n                    if (<recovery-expr>() != <recovery-expr>()) {\n                        if (<recovery-expr>()) {\n                            if (<recovery-expr>())\n                                goto out;\n                        } else {\n                            if (<recovery-expr>()) {\n                                if (<recovery-expr>()) {\n                                    goto out;\n                                }\n                                if (<recovery-expr>()) {\n                                } else {\n                                }\n                            }\n                            if (<recovery-expr>()) {\n                                goto out;\n                            } else if (<recovery-expr>()) {\n                                while (<recovery-expr>())\n                                    {\n                                    }\n                            }\n                            if (<recovery-expr>()) {\n                            } else {\n                            }\n                        }\n                    }\n                    <recovery-expr>()++;\n                    <recovery-expr>() = <recovery-expr>();\n                }\n                if (charval != 0) {\n                    int len;\n                    if (<recovery-expr>())\n                        goto out;\n                    charval = 0;\n                }\n            } else\n                <recovery-expr>()++;\n        }\n    if (<recovery-expr>()) {\n    }\n    if (<recovery-expr>()) {\n        if (<recovery-expr>()) {\n        }\n        if (<recovery-expr>()) {\n        } else {\n        }\n    }\n  out:\n    ;\n}\n"
        }
    ],
    "total": 136,
    "visited": 9
}
