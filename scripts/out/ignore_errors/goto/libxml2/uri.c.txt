{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/uri.c#2382:1#xmlCanonicPath",
            "gotos": 2,
            "labels": 1,
            "body": "{\n    const int *absuri;\n    if ((<recovery-expr>()[0] == '/') && (<recovery-expr>()[1] == '/') && (<recovery-expr>()[2] != '/'))\n        <recovery-expr>()++;\n    if (<recovery-expr>()) {\n        return xmlStrdup(<recovery-expr>());\n    }\n    if (<recovery-expr>()) {\n        int l, j;\n        unsigned char c;\n        l = <recovery-expr>() - <recovery-expr>();\n        if ((l <= 0) || (l > 20))\n            goto path_processing;\n        for (j = 0; j < l; j++) {\n            c = <recovery-expr>()[j];\n            if (!(((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z'))))\n                goto path_processing;\n        }\n        if (<recovery-expr>()) {\n            if (<recovery-expr>()) {\n            }\n        }\n    }\n  path_processing:\n    ;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/uri.c#2175:1#xmlBuildRelativeURI",
            "gotos": 11,
            "labels": 1,
            "body": "{\n    int ret;\n    int ix;\n    int nbslash = 0;\n    int len;\n    int remove_path = 0;\n    if (<recovery-expr>()[0] != '.') {\n        if (ret != 0)\n            goto done;\n    } else\n        ;\n    if (<recovery-expr>()) {\n        goto done;\n    }\n    if (<recovery-expr>())\n        goto done;\n    if (<recovery-expr>()[0] != '.') {\n        if (ret != 0)\n            goto done;\n    } else\n        ;\n    if (<recovery-expr>()) {\n        goto done;\n    }\n    if (<recovery-expr>()) {\n        goto done;\n    }\n    if (<recovery-expr>()) {\n        goto done;\n    }\n    if (<recovery-expr>()) {\n        remove_path = 1;\n    }\n    {\n        int pos = 0;\n        while (<recovery-expr>())\n            pos++;\n        if (<recovery-expr>()) {\n            goto done;\n        }\n        ix = pos;\n        for (; ix > 0; ix--) {\n            if (<recovery-expr>())\n                break;\n        }\n        if (<recovery-expr>()) {\n            goto done;\n        }\n    }\n    if (nbslash == 0) {\n        goto done;\n    }\n    if (<recovery-expr>()) {\n        xmlURIErrMemory(\"building relative URI\\n\");\n        goto done;\n    }\n    for (; nbslash > 0; nbslash--) {\n    }\n    if (<recovery-expr>()) {\n        if (<recovery-expr>()) {\n        } else {\n        }\n    } else {\n    }\n  done:\n    ;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/uri.c#1894:1#xmlBuildURI",
            "gotos": 12,
            "labels": 2,
            "body": "{\n    int ret, len, indx, cur, out;\n    if (<recovery-expr>())\n        ret = -1;\n    else {\n        if (*<recovery-expr>()) {\n            if (<recovery-expr>())\n                goto done;\n        } else\n            ret = 0;\n    }\n    if (ret != 0)\n        goto done;\n    if (<recovery-expr>()) {\n        goto done;\n    }\n    if (<recovery-expr>())\n        ret = -1;\n    else {\n        if (<recovery-expr>())\n            goto done;\n    }\n    if (ret != 0) {\n        goto done;\n    }\n    if (<recovery-expr>()) {\n        if (<recovery-expr>()) {\n        }\n        goto done;\n    }\n    if (<recovery-expr>())\n        goto done;\n    if (<recovery-expr>()) {\n        if (<recovery-expr>())\n            ;\n        else if (<recovery-expr>()) {\n        }\n        goto step_7;\n    }\n    if (<recovery-expr>()) {\n        goto done;\n    }\n    if (<recovery-expr>()) {\n        if (<recovery-expr>())\n            ;\n        else {\n        }\n        goto step_7;\n    }\n    if (<recovery-expr>())\n        ;\n    else if (<recovery-expr>()) {\n    }\n    if (<recovery-expr>()) {\n        goto step_7;\n    }\n    len = 2;\n    if (<recovery-expr>()) {\n        xmlURIErrMemory(\"resolving URI against base\\n\");\n        goto done;\n    }\n    cur = 0;\n    out = 0;\n    if (<recovery-expr>()) {\n        while (<recovery-expr>())\n            {\n                while (<recovery-expr>())\n                    cur++;\n                if (<recovery-expr>())\n                    break;\n                cur++;\n                while (out < cur)\n                    {\n                        out++;\n                    }\n            }\n    }\n    if (<recovery-expr>()) {\n        indx = 0;\n        while (<recovery-expr>())\n            {\n            }\n    }\n  step_7:\n    ;\n  done:\n    ;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/uri.c#1421:1#xmlNormalizeURIPath",
            "gotos": 1,
            "labels": 1,
            "body": "{\n    char *cur, *out;\n    if (<recovery-expr>())\n        return (-1);\n    cur = path;\n    while (cur[0] == '/')\n        ++cur;\n    if (cur[0] == '\\x00')\n        return (0);\n    out = cur;\n    while (cur[0] != '\\x00')\n        {\n            if ((cur[0] == '.') && (cur[1] == '/')) {\n                cur += 2;\n                while (cur[0] == '/')\n                    cur++;\n                continue;\n            }\n            if ((cur[0] == '.') && (cur[1] == '\\x00'))\n                break;\n            while (cur[0] != '/')\n                {\n                    if (cur[0] == '\\x00')\n                        goto done_cd;\n                    (out++)[0] = (cur++)[0];\n                }\n            while ((cur[0] == '/') && (cur[1] == '/'))\n                cur++;\n            (out++)[0] = (cur++)[0];\n        }\n  done_cd:\n    out[0] = '\\x00';\n    cur = path;\n    while (cur[0] == '/')\n        ++cur;\n    if (cur[0] == '\\x00')\n        return (0);\n    while (1)\n        {\n            char *segp, *tmp;\n            segp = cur;\n            while ((segp[0] != '/') && (segp[0] != '\\x00'))\n                ++segp;\n            if (segp[0] == '\\x00')\n                break;\n            ++segp;\n            if (((cur[0] == '.') && (cur[1] == '.') && (segp == cur + 3)) || ((segp[0] != '.') || (segp[1] != '.') || ((segp[2] != '/') && (segp[2] != '\\x00')))) {\n                cur = segp;\n                continue;\n            }\n            if (segp[2] == '\\x00') {\n                cur[0] = '\\x00';\n                break;\n            }\n            tmp = cur;\n            segp += 3;\n            while ((*tmp++ = *segp++) != 0)\n                ;\n            segp = cur;\n            while ((segp > path) && ((--segp)[0] == '/'))\n                ;\n            if (segp == path)\n                continue;\n            cur = segp;\n            while ((cur > path) && (cur[-1] != '/'))\n                --cur;\n        }\n    out[0] = '\\x00';\n    if (path[0] == '/') {\n        cur = path;\n        while ((cur[0] == '/') && (cur[1] == '.') && (cur[2] == '.') && ((cur[3] == '/') || (cur[3] == '\\x00')))\n            cur += 3;\n        if (cur != path) {\n            out = path;\n            while (cur[0] != '\\x00')\n                (out++)[0] = (cur++)[0];\n            out[0] = 0;\n        }\n    }\n    return (0);\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/uri.c#1067:1#xmlSaveUri",
            "gotos": 20,
            "labels": 1,
            "body": "{\n    const char *p;\n    int len;\n    int max;\n    max = 80;\n    if (<recovery-expr>()) {\n        xmlURIErrMemory(\"saving URI\\n\");\n    }\n    len = 0;\n    if (<recovery-expr>()) {\n        p = <recovery-expr>()->scheme;\n        while (*p != 0)\n            {\n                if (len >= max) {\n                    if (<recovery-expr>())\n                        goto mem_error;\n                }\n            }\n        if (len >= max) {\n            if (<recovery-expr>())\n                goto mem_error;\n        }\n    }\n    if (<recovery-expr>()) {\n        p = <recovery-expr>()->opaque;\n        while (*p != 0)\n            {\n                if (len + 3 >= max) {\n                    if (<recovery-expr>())\n                        goto mem_error;\n                }\n                if ((((*(p)) == ';') || ((*(p)) == '/') || ((*(p)) == '?') || ((*(p)) == ':') || ((*(p)) == '@') || ((*(p)) == '&') || ((*(p)) == '=') || ((*(p)) == '+') || ((*(p)) == '$') || ((*(p)) == ',') || ((*(p)) == '[') || ((*(p)) == ']')) || ((((((*(p)) >= 'a') && ((*(p)) <= 'z')) || (((*(p)) >= 'A') && ((*(p)) <= 'Z'))) || (((*(p)) >= '0') && ((*(p)) <= '9'))) || (((*(p)) == '-') || ((*(p)) == '_') || ((*(p)) == '.') || ((*(p)) == '!') || ((*(p)) == '~') || ((*(p)) == '*') || ((*(p)) == '\\'') || ((*(p)) == '(') || ((*(p)) == ')'))))\n                    ;\n                else {\n                    int val = *(unsigned char *)p++;\n                    int hi = val / 16, lo = val % 16;\n                }\n            }\n    } else {\n        if (<recovery-expr>()) {\n            if (len + 3 >= max) {\n                if (<recovery-expr>())\n                    goto mem_error;\n            }\n            if (<recovery-expr>()) {\n                p = <recovery-expr>()->user;\n                while (*p != 0)\n                    {\n                        if (len + 3 >= max) {\n                            if (<recovery-expr>())\n                                goto mem_error;\n                        }\n                        if ((((((((*(p)) >= 'a') && ((*(p)) <= 'z')) || (((*(p)) >= 'A') && ((*(p)) <= 'Z'))) || (((*(p)) >= '0') && ((*(p)) <= '9'))) || (((*(p)) == '-') || ((*(p)) == '_') || ((*(p)) == '.') || ((*(p)) == '!') || ((*(p)) == '~') || ((*(p)) == '*') || ((*(p)) == '\\'') || ((*(p)) == '(') || ((*(p)) == ')')))) || ((*(p) == ';')) || ((*(p) == ':')) || ((*(p) == '&')) || ((*(p) == '=')) || ((*(p) == '+')) || ((*(p) == '$')) || ((*(p) == ',')))\n                            ;\n                        else {\n                            int val = *(unsigned char *)p++;\n                            int hi = val / 16, lo = val % 16;\n                        }\n                    }\n                if (len + 3 >= max) {\n                    if (<recovery-expr>())\n                        goto mem_error;\n                }\n            }\n            if (<recovery-expr>()) {\n                p = <recovery-expr>()->server;\n                while (*p != 0)\n                    {\n                        if (len >= max) {\n                            if (<recovery-expr>())\n                                goto mem_error;\n                        }\n                    }\n                if (<recovery-expr>()->port > 0) {\n                    if (len + 10 >= max) {\n                        if (<recovery-expr>())\n                            goto mem_error;\n                    }\n                }\n            }\n        } else if (<recovery-expr>()) {\n            if (len + 3 >= max) {\n                if (<recovery-expr>())\n                    goto mem_error;\n            }\n            p = <recovery-expr>()->authority;\n            while (*p != 0)\n                {\n                    if (len + 3 >= max) {\n                        if (<recovery-expr>())\n                            goto mem_error;\n                    }\n                    if ((((((((*(p)) >= 'a') && ((*(p)) <= 'z')) || (((*(p)) >= 'A') && ((*(p)) <= 'Z'))) || (((*(p)) >= '0') && ((*(p)) <= '9'))) || (((*(p)) == '-') || ((*(p)) == '_') || ((*(p)) == '.') || ((*(p)) == '!') || ((*(p)) == '~') || ((*(p)) == '*') || ((*(p)) == '\\'') || ((*(p)) == '(') || ((*(p)) == ')')))) || ((*(p) == '$')) || ((*(p) == ',')) || ((*(p) == ';')) || ((*(p) == ':')) || ((*(p) == '@')) || ((*(p) == '&')) || ((*(p) == '=')) || ((*(p) == '+')))\n                        ;\n                    else {\n                        int val = *(unsigned char *)p++;\n                        int hi = val / 16, lo = val % 16;\n                    }\n                }\n        } else if (<recovery-expr>()) {\n            if (len + 3 >= max) {\n                if (<recovery-expr>())\n                    goto mem_error;\n            }\n        }\n        if (<recovery-expr>()) {\n            p = <recovery-expr>()->path;\n            if (<recovery-expr>()) {\n                if (len + 3 >= max) {\n                    if (<recovery-expr>())\n                        goto mem_error;\n                }\n            }\n            while (*p != 0)\n                {\n                    if (len + 3 >= max) {\n                        if (<recovery-expr>())\n                            goto mem_error;\n                    }\n                    if ((((((((*(p)) >= 'a') && ((*(p)) <= 'z')) || (((*(p)) >= 'A') && ((*(p)) <= 'Z'))) || (((*(p)) >= '0') && ((*(p)) <= '9'))) || (((*(p)) == '-') || ((*(p)) == '_') || ((*(p)) == '.') || ((*(p)) == '!') || ((*(p)) == '~') || ((*(p)) == '*') || ((*(p)) == '\\'') || ((*(p)) == '(') || ((*(p)) == ')')))) || ((*(p) == '/')) || ((*(p) == ';')) || ((*(p) == '@')) || ((*(p) == '&')) || ((*(p) == '=')) || ((*(p) == '+')) || ((*(p) == '$')) || ((*(p) == ',')))\n                        ;\n                    else {\n                        int val = *(unsigned char *)p++;\n                        int hi = val / 16, lo = val % 16;\n                    }\n                }\n        }\n        if (<recovery-expr>()) {\n            if (len + 1 >= max) {\n                if (<recovery-expr>())\n                    goto mem_error;\n            }\n            p = <recovery-expr>()->query_raw;\n            while (*p != 0)\n                {\n                    if (len + 1 >= max) {\n                        if (<recovery-expr>())\n                            goto mem_error;\n                    }\n                }\n        } else if (<recovery-expr>()) {\n            if (len + 3 >= max) {\n                if (<recovery-expr>())\n                    goto mem_error;\n            }\n            p = <recovery-expr>()->query;\n            while (*p != 0)\n                {\n                    if (len + 3 >= max) {\n                        if (<recovery-expr>())\n                            goto mem_error;\n                    }\n                    if ((((((((*(p)) >= 'a') && ((*(p)) <= 'z')) || (((*(p)) >= 'A') && ((*(p)) <= 'Z'))) || (((*(p)) >= '0') && ((*(p)) <= '9'))) || (((*(p)) == '-') || ((*(p)) == '_') || ((*(p)) == '.') || ((*(p)) == '!') || ((*(p)) == '~') || ((*(p)) == '*') || ((*(p)) == '\\'') || ((*(p)) == '(') || ((*(p)) == ')')))) || ((((*(p)) == ';') || ((*(p)) == '/') || ((*(p)) == '?') || ((*(p)) == ':') || ((*(p)) == '@') || ((*(p)) == '&') || ((*(p)) == '=') || ((*(p)) == '+') || ((*(p)) == '$') || ((*(p)) == ',') || ((*(p)) == '[') || ((*(p)) == ']'))))\n                        ;\n                    else {\n                        int val = *(unsigned char *)p++;\n                        int hi = val / 16, lo = val % 16;\n                    }\n                }\n        }\n    }\n    if (<recovery-expr>()) {\n        if (len + 3 >= max) {\n            if (<recovery-expr>())\n                goto mem_error;\n        }\n        p = <recovery-expr>()->fragment;\n        while (*p != 0)\n            {\n                if (len + 3 >= max) {\n                    if (<recovery-expr>())\n                        goto mem_error;\n                }\n                if ((((((((*(p)) >= 'a') && ((*(p)) <= 'z')) || (((*(p)) >= 'A') && ((*(p)) <= 'Z'))) || (((*(p)) >= '0') && ((*(p)) <= '9'))) || (((*(p)) == '-') || ((*(p)) == '_') || ((*(p)) == '.') || ((*(p)) == '!') || ((*(p)) == '~') || ((*(p)) == '*') || ((*(p)) == '\\'') || ((*(p)) == '(') || ((*(p)) == ')')))) || ((((*(p)) == ';') || ((*(p)) == '/') || ((*(p)) == '?') || ((*(p)) == ':') || ((*(p)) == '@') || ((*(p)) == '&') || ((*(p)) == '=') || ((*(p)) == '+') || ((*(p)) == '$') || ((*(p)) == ',') || ((*(p)) == '[') || ((*(p)) == ']'))))\n                    ;\n                else {\n                    int val = *(unsigned char *)p++;\n                    int hi = val / 16, lo = val % 16;\n                }\n            }\n    }\n    if (len >= max) {\n        if (<recovery-expr>())\n            goto mem_error;\n    }\n  mem_error:\n    ;\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/libxml2/uri.c#441:1#xmlParse3986Host",
            "gotos": 9,
            "labels": 2,
            "body": "{\n    const char *cur = *str;\n    const char *host;\n    host = cur;\n    if (*cur == '[') {\n        cur++;\n        while ((*cur != ']') && (*cur != 0))\n            cur++;\n        if (*cur != ']')\n            return (1);\n        cur++;\n        goto found;\n    }\n    if (((*(cur) >= '0') && (*(cur) <= '9'))) {\n        if (xmlParse3986DecOctet(&cur) != 0)\n            goto not_ipv4;\n        if (*cur != '.')\n            goto not_ipv4;\n        cur++;\n        if (xmlParse3986DecOctet(&cur) != 0)\n            goto not_ipv4;\n        if (*cur != '.')\n            goto not_ipv4;\n        if (xmlParse3986DecOctet(&cur) != 0)\n            goto not_ipv4;\n        if (*cur != '.')\n            goto not_ipv4;\n        if (xmlParse3986DecOctet(&cur) != 0)\n            goto not_ipv4;\n        goto found;\n      not_ipv4:\n        cur = *str;\n    }\n    while ((((((*(cur) >= 'a') && (*(cur) <= 'z')) || ((*(cur) >= 'A') && (*(cur) <= 'Z')))) || (((*(cur) >= '0') && (*(cur) <= '9'))) || ((*(cur) == '-')) || ((*(cur) == '.')) || ((*(cur) == '_')) || ((*(cur) == '~'))) || ((*(cur) == '%') && ((((*(cur + 1) >= '0') && (*(cur + 1) <= '9')) || ((*(cur + 1) >= 'a') && (*(cur + 1) <= 'f')) || ((*(cur + 1) >= 'A') && (*(cur + 1) <= 'F')))) && ((((*(cur + 2) >= '0') && (*(cur + 2) <= '9')) || ((*(cur + 2) >= 'a') && (*(cur + 2) <= 'f')) || ((*(cur + 2) >= 'A') && (*(cur + 2) <= 'F'))))) || (((*(cur) == '!')) || ((*(cur) == '$')) || ((*(cur) == '&')) || ((*(cur) == '(')) || ((*(cur) == ')')) || ((*(cur) == '*')) || ((*(cur) == '+')) || ((*(cur) == ',')) || ((*(cur) == ';')) || ((*(cur) == '=')) || ((*(cur) == '\\''))))\n        ((*cur == '%') ? cur += 3 : cur++);\n  found:\n    if (<recovery-expr>()) {\n        if (<recovery-expr>())\n            xmlFree(<recovery-expr>()->authority);\n        if (<recovery-expr>())\n            xmlFree(<recovery-expr>()->server);\n        if (cur != host) {\n        } else\n            ;\n    }\n    *str = cur;\n    return (0);\n}\n"
        }
    ],
    "total": 36,
    "visited": 6
}
