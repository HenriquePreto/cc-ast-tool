{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/src/lzf_d.c#59:1#lzf_decompress",
            "nobreaks": 2,
            "body": "{\n    const u8 *ip = (const u8 *)in_data;\n    u8 *op = (u8 *)out_data;\n    const u8 *const in_end = ip + <recovery-expr>();\n    u8 *const out_end = op + <recovery-expr>();\n    while (ip < in_end)\n        {\n            unsigned int ctrl;\n            ctrl = *ip++;\n            if (ctrl < (1 << 5)) {\n                ctrl++;\n                if (op + ctrl > out_end) {\n                    return 0;\n                }\n                if (ip + ctrl > in_end) {\n                    return 0;\n                }\n                switch (ctrl) {\n                  case 32:\n                    *op++ = *ip++;\n                  case 31:\n                    *op++ = *ip++;\n                  case 30:\n                    *op++ = *ip++;\n                  case 29:\n                    *op++ = *ip++;\n                  case 28:\n                    *op++ = *ip++;\n                  case 27:\n                    *op++ = *ip++;\n                  case 26:\n                    *op++ = *ip++;\n                  case 25:\n                    *op++ = *ip++;\n                  case 24:\n                    *op++ = *ip++;\n                  case 23:\n                    *op++ = *ip++;\n                  case 22:\n                    *op++ = *ip++;\n                  case 21:\n                    *op++ = *ip++;\n                  case 20:\n                    *op++ = *ip++;\n                  case 19:\n                    *op++ = *ip++;\n                  case 18:\n                    *op++ = *ip++;\n                  case 17:\n                    *op++ = *ip++;\n                  case 16:\n                    *op++ = *ip++;\n                  case 15:\n                    *op++ = *ip++;\n                  case 14:\n                    *op++ = *ip++;\n                  case 13:\n                    *op++ = *ip++;\n                  case 12:\n                    *op++ = *ip++;\n                  case 11:\n                    *op++ = *ip++;\n                  case 10:\n                    *op++ = *ip++;\n                  case 9:\n                    *op++ = *ip++;\n                  case 8:\n                    *op++ = *ip++;\n                  case 7:\n                    *op++ = *ip++;\n                  case 6:\n                    *op++ = *ip++;\n                  case 5:\n                    *op++ = *ip++;\n                  case 4:\n                    *op++ = *ip++;\n                  case 3:\n                    *op++ = *ip++;\n                  case 2:\n                    *op++ = *ip++;\n                  case 1:\n                    *op++ = *ip++;\n                }\n            } else {\n                unsigned int len = ctrl >> 5;\n                u8 *ref = op - ((ctrl & 31) << 8) - 1;\n                if (ip >= in_end) {\n                    return 0;\n                }\n                if (len == 7) {\n                    len += *ip++;\n                    if (ip >= in_end) {\n                        return 0;\n                    }\n                }\n                ref -= *ip++;\n                if (op + len + 2 > out_end) {\n                    return 0;\n                }\n                if (ref < (u8 *)out_data) {\n                    return 0;\n                }\n                switch (len) {\n                  default:\n                    len += 2;\n                    if (op >= ref + len) {\n                        memcpy(op, ref, len);\n                        op += len;\n                    } else {\n                        do \n                            *op++ = *ref++;\n                        while (--len);\n                    }\n                    break;\n                  case 9:\n                    *op++ = *ref++;\n                  case 8:\n                    *op++ = *ref++;\n                  case 7:\n                    *op++ = *ref++;\n                  case 6:\n                    *op++ = *ref++;\n                  case 5:\n                    *op++ = *ref++;\n                  case 4:\n                    *op++ = *ref++;\n                  case 3:\n                    *op++ = *ref++;\n                  case 2:\n                    *op++ = *ref++;\n                  case 1:\n                    *op++ = *ref++;\n                  case 0:\n                    *op++ = *ref++;\n                    *op++ = *ref++;\n                }\n            }\n        }\n    return op - (u8 *)out_data;\n}\n"
        }
    ],
    "total": 1,
    "visited": 1
}
