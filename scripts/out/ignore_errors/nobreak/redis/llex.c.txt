{
    "functions": [
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/deps/lua/src/llex.c#334:1#llex",
            "nobreaks": 1,
            "body": "{\n    (<recovery-expr>((ls->buff)) = 0);\n    for (;;) {\n        switch (ls->current) {\n          case '\\n':\n          case '\\r':\n            {\n                inclinenumber(ls);\n                continue;\n            }\n          case '-':\n            {\n                (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z)));\n                if (ls->current != '-')\n                    return '-';\n                (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z)));\n                if (ls->current == '[') {\n                    int sep = skip_sep(ls);\n                    (<recovery-expr>((ls->buff)) = 0);\n                    if (sep >= 0) {\n                        (<recovery-expr>((ls->buff)) = 0);\n                        continue;\n                    }\n                }\n                while (!(ls->current == '\\n' || ls->current == '\\r') && ls->current != (-1))\n                    (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z)));\n                continue;\n            }\n          case '[':\n            {\n                int sep = skip_sep(ls);\n                if (sep >= 0) {\n                    read_long_string(ls, seminfo, sep);\n                    return TK_STRING;\n                } else if (sep == -1)\n                    return '[';\n                else\n                    luaX_lexerror(ls, \"invalid long string delimiter\", TK_STRING);\n            }\n          case '=':\n            {\n                (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z)));\n                if (ls->current != '=')\n                    return '=';\n                else {\n                    (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z)));\n                    return TK_EQ;\n                }\n            }\n          case '<':\n            {\n                (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z)));\n                if (ls->current != '=')\n                    return '<';\n                else {\n                    (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z)));\n                    return TK_LE;\n                }\n            }\n          case '>':\n            {\n                (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z)));\n                if (ls->current != '=')\n                    return '>';\n                else {\n                    (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z)));\n                    return TK_GE;\n                }\n            }\n          case '~':\n            {\n                (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z)));\n                if (ls->current != '=')\n                    return '~';\n                else {\n                    (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z)));\n                    return TK_NE;\n                }\n            }\n          case '\"':\n          case '\\'':\n            {\n                read_string(ls, ls->current, seminfo);\n                return TK_STRING;\n            }\n          case '.':\n            {\n                (save(ls, ls->current) , (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z))));\n                if (check_next(ls, \".\")) {\n                    if (check_next(ls, \".\"))\n                        return TK_DOTS;\n                    else\n                        return TK_CONCAT;\n                } else if (!isdigit(ls->current))\n                    return '.';\n                else {\n                    read_numeral(ls, seminfo);\n                    return TK_NUMBER;\n                }\n            }\n          case (-1):\n            {\n                return TK_EOS;\n            }\n          default:\n            {\n                if (isspace(ls->current)) {\n                    ((void)0);\n                    (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z)));\n                    continue;\n                } else if (isdigit(ls->current)) {\n                    read_numeral(ls, seminfo);\n                    return TK_NUMBER;\n                } else if (isalpha(ls->current) || ls->current == '_') {\n                    TString *ts;\n                    do {\n                        (save(ls, ls->current) , (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z))));\n                    } while (isalnum(ls->current) || ls->current == '_');\n                    ts = <recovery-expr>()(ls, ((ls->buff)->buffer), (<recovery-expr>((ls->buff))));\n                    if (<recovery-expr>(ts).reserved > 0)\n                        return <recovery-expr>(ts).reserved - 1 + 257;\n                    else {\n                        seminfo->ts = ts;\n                        return TK_NAME;\n                    }\n                } else {\n                    int c = ls->current;\n                    (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z)));\n                    return c;\n                }\n            }\n        }\n    }\n}\n"
        },
        {
            "id": "/Users/henriquepreto/Desktop/cc-ast-tool/scripts/benchmarks/redis/deps/lua/src/llex.c#278:1#read_string",
            "nobreaks": 2,
            "body": "{\n    (save(ls, ls->current) , (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z))));\n    while (ls->current != del)\n        {\n            switch (ls->current) {\n              case (-1):\n                luaX_lexerror(ls, \"unfinished string\", TK_EOS);\n                continue;\n              case '\\n':\n              case '\\r':\n                luaX_lexerror(ls, \"unfinished string\", TK_STRING);\n                continue;\n              case '\\\\':\n                {\n                    int c;\n                    (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z)));\n                    switch (ls->current) {\n                      case 'a':\n                        c = '\\a';\n                        break;\n                      case 'b':\n                        c = '\\b';\n                        break;\n                      case 'f':\n                        c = '\\f';\n                        break;\n                      case 'n':\n                        c = '\\n';\n                        break;\n                      case 'r':\n                        c = '\\r';\n                        break;\n                      case 't':\n                        c = '\\t';\n                        break;\n                      case 'v':\n                        c = '\\v';\n                        break;\n                      case '\\n':\n                      case '\\r':\n                        save(ls, '\\n');\n                        inclinenumber(ls);\n                        continue;\n                      case (-1):\n                        continue;\n                      default:\n                        {\n                            if (!isdigit(ls->current))\n                                (save(ls, ls->current) , (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z))));\n                            else {\n                                int i = 0;\n                                c = 0;\n                                do {\n                                    c = 10 * c + (ls->current - '0');\n                                    (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z)));\n                                } while (++i < 3 && isdigit(ls->current));\n                                if (<recovery-expr>())\n                                    luaX_lexerror(ls, \"escape sequence too large\", TK_STRING);\n                                save(ls, c);\n                            }\n                            continue;\n                        }\n                    }\n                    save(ls, c);\n                    (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z)));\n                    continue;\n                }\n              default:\n                (save(ls, ls->current) , (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z))));\n            }\n        }\n    (save(ls, ls->current) , (ls->current = ((<recovery-expr>((ls->z))--) > 0 ? ((int)(((unsigned char)((*(ls->z)->p++))))) : luaZ_fill(ls->z))));\n    seminfo->ts = <recovery-expr>()(ls, ((ls->buff)->buffer) + 1, (<recovery-expr>((ls->buff))) - 2);\n}\n"
        }
    ],
    "total": 19,
    "visited": 2
}
